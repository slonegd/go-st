// Code generated from ./g4/external/stParser.g4 by ANTLR 4.13.2. DO NOT EDIT.

package parser // stParser

import (
	"fmt"
	"strconv"
	"sync"

	"github.com/antlr4-go/antlr/v4"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}

type stParser struct {
	*antlr.BaseParser
}

var StParserParserStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func stparserParserInit() {
	staticData := &StParserParserStaticData
	staticData.LiteralNames = []string{
		"", "'//IL\\n'", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "'_'", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "'=>'",
		"':='", "'REF='", "'?='", "','", "'/'", "'='", "'>='", "'>'", "'['",
		"'<='", "'<'", "'('", "'-'", "", "'*'", "", "'<>'", "", "'+'", "'**'",
		"']'", "')'", "", "'+='", "'-='", "", "", "", "", "'&'", "", "';'",
		"'''", "'.'", "'^'", "", "'..'", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "':'", "", "",
		"", "", "", "'::'", "'->'", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "'ADD'", "", "'CAL'", "'CALC'", "'CALCN'", "'CD'",
		"'CLK'", "'CU'", "'DIV'", "'EQ'", "'GE'", "'GT'", "'IN'", "'JMP'", "'JMPC'",
		"'JMPCN'", "'LD'", "'LDN'", "'LE'", "'LT'", "'MOD'", "'MUL'", "'NE'",
		"'NOT'", "'ORN'", "'PT'", "'PV'", "'R1'", "'R'", "'RET'", "'RETC'",
		"'RETCN'", "'S1'", "'S'", "'ST'", "'STN'", "'ST?'", "'SUB'", "'XORN'",
		"", "'OR'",
	}
	staticData.SymbolicNames = []string{
		"", "IL_CODE", "ANY", "ANY_BIT", "ANY_DATE", "ANY_DERIVED", "ANY_ELEMENTARY",
		"ANY_INT", "ANY_MAGNITUDE", "ANY_NUM", "ANY_REAL", "ANY_STRING", "ARRAY",
		"BOOL", "BYTE", "DATE_AND_TIME", "DINT", "DWORD", "INT", "LINT", "LREAL",
		"LWORD", "REAL", "SINT", "STRING", "TIME", "TIME_OF_DAY", "UDINT", "UINT",
		"ULINT", "USINT", "WORD", "WSTRING", "POINTER", "VAR_OUTPUT", "AT",
		"BY", "CASE", "CONFIGURATION", "CONSTANT", "CONTINUE", "DATE", "DO",
		"DT", "ELSE", "ELSEIF", "UNDERSCORE", "END_CASE", "END_CONFIGURATION",
		"END_FOR", "END_FUNCTION", "END_FUNCTION_BLOCK", "END_IF", "END_PROGRAM",
		"END_REPEAT", "END_RESOURCE", "END_STRUCT", "END_TYPE", "END_VAR", "END_WHILE",
		"EXIT", "FOR", "FUNCTION", "FUNCTION_BLOCK", "F_EDGE", "IF", "INTERVAL",
		"JMP", "NIL", "NON_RETAIN", "OF", "PRIORITY", "PROGRAM", "READ_ONLY",
		"READ_WRITE", "REPEAT", "RESOURCE", "RETAIN", "RETURN", "R_EDGE", "SINGLE",
		"STRUCT", "TASK", "THEN", "TO", "TYPE", "UNTIL", "VAR", "VAR_ACCESS",
		"VAR_CONFIG", "VAR_EXTERNAL", "VAR_GLOBAL", "VAR_INPUT", "VAR_IN_OUT",
		"VAR_TEMP", "WHILE", "WITH", "AND", "ARROW_RIGHT", "ASSIGN", "RASSIGN",
		"ASSIGN_ATTEMPT", "COMMA", "DIV", "EQUALS", "GREATER_EQUALS", "GREATER_THAN",
		"LBRACKET", "LESS_EQUALS", "LESS_THAN", "LPAREN", "MINUS", "MOD", "MULT",
		"NOT", "NOT_EQUALS", "OR", "PLUS", "POWER", "RBRACKET", "RPAREN", "XOR",
		"INCREAE", "DECREASE", "NAMESPACE", "END_NAMESPACE", "USING", "PERSISTENT",
		"AMPERSAND", "NULL", "SEMICOLON", "SQUOTE", "DOT", "CARET", "REF", "RANGE",
		"CAST_LITERAL", "INTERFACE", "END_INTERFACE", "METHOD", "END_METHOD",
		"CLASS", "END_CLASS", "OVERRIDE", "FINAL", "ABSTRACT", "IMPLEMENTS",
		"PUBLIC", "INTERNAL", "PROTECTED", "PRIVATE", "SUPER", "THIS", "EXTENDS",
		"REF_TO", "ON", "STEP", "END_STEP", "INITIAL_STEP", "COLON", "ACTION",
		"END_ACTION", "FROM", "END_TRANSITION", "TRANSITION", "DCOLON", "RIGHTARROW",
		"INTEGER_LITERAL", "BITS_LITERAL", "REAL_LITERAL", "TIME_LITERAL", "DATE_LITERAL",
		"TOD_LITERAL", "DATETIME", "INCOMPL_LOCATION_LITERAL", "STRING_LITERAL",
		"WSTRING_LITERAL", "IDENTIFIER", "WS", "COMMENT", "LINE_COMMENT", "DIRECT_VARIABLE_LITERAL",
		"ERROR_CHAR", "IL_ADD", "IL_ANDN", "IL_CAL", "IL_CALC", "IL_CALCN",
		"IL_CD", "IL_CLK", "IL_CU", "IL_DIV", "IL_EQ", "IL_GE", "IL_GT", "IL_IN",
		"IL_JMP", "IL_JMPC", "IL_JMPCN", "IL_LD", "IL_LDN", "IL_LE", "IL_LT",
		"IL_MOD", "IL_MUL", "IL_NE", "IL_NOT", "IL_ORN", "IL_PT", "IL_PV", "IL_R1",
		"IL_R", "IL_RET", "IL_RETC", "IL_RETCN", "IL_S1", "IL_S", "IL_ST", "IL_STN",
		"IL_STQ", "IL_SUB", "IL_XORN", "EOL", "IL_OR",
	}
	staticData.RuleNames = []string{
		"start", "namespace_declaration", "namespace_elements", "full_qualified_identifier",
		"using_directive", "library_element_declaration", "constant", "cast",
		"integer", "bits", "real", "string", "time", "timeofday", "date", "datetime",
		"ref_null", "data_type_name", "non_generic_type_name", "elementary_type_name",
		"numeric_type_name", "integer_type_name", "signed_integer_type_name",
		"unsigned_integer_type_name", "real_type_name", "date_type_name", "bit_string_type_name",
		"generic_type_name", "data_type_declaration", "type_declaration", "initializations",
		"subrange_spec_init", "subrange", "enumerated_specification", "array_specification",
		"array_initialization", "array_initial_elements", "array_initial_element",
		"structure_declaration", "name", "structure_initialization", "string_type_declaration",
		"reference_specification", "reference_value", "identifier_list", "function_declaration",
		"var_decls", "var_decl", "var_decl_inner", "variable_keyword", "access_specifier",
		"function_block_declaration", "body", "funcBody", "interface_declaration",
		"class_declaration", "methods", "method", "program_declaration", "global_variable_list_declaration",
		"stl_list", "stl_expression", "stl_call", "expression", "primary_expression",
		"invocation", "statement_list", "statement", "empty_statement", "jump_statement",
		"label_statement", "assignment_statement", "mult_assignment_statement",
		"invocation_statement", "variable", "variable_names", "symbolic_variable",
		"subscript_list", "direct_variable", "return_statement", "param_assignment",
		"if_statement", "case_statement", "case_entry", "case_condition", "for_statement",
		"while_statement", "repeat_statement", "exit_statement", "continue_statement",
		"sfc", "sfc_network", "init_step", "step", "action_association", "actionQualifier",
		"transition", "steps", "transitionCond", "action", "ilBody", "ilInstruction",
		"ilSInstr", "ilInstr", "ilSInstrList", "ilSimple", "ilExpr", "ilFunctionCall",
		"ilFormalFunctionCall", "ilJump", "ilCall", "ilOperand", "jump_op",
		"call_op", "simple_op", "exprOperator", "il_param_assignment",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 1, 223, 1216, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4,
		7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10,
		7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7,
		15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20,
		2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2,
		26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31,
		7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7,
		36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41,
		2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2,
		47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52,
		7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7,
		57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62,
		2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2,
		68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73,
		7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2, 78, 7,
		78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7, 82, 2, 83, 7, 83,
		2, 84, 7, 84, 2, 85, 7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7, 88, 2,
		89, 7, 89, 2, 90, 7, 90, 2, 91, 7, 91, 2, 92, 7, 92, 2, 93, 7, 93, 2, 94,
		7, 94, 2, 95, 7, 95, 2, 96, 7, 96, 2, 97, 7, 97, 2, 98, 7, 98, 2, 99, 7,
		99, 2, 100, 7, 100, 2, 101, 7, 101, 2, 102, 7, 102, 2, 103, 7, 103, 2,
		104, 7, 104, 2, 105, 7, 105, 2, 106, 7, 106, 2, 107, 7, 107, 2, 108, 7,
		108, 2, 109, 7, 109, 2, 110, 7, 110, 2, 111, 7, 111, 2, 112, 7, 112, 2,
		113, 7, 113, 2, 114, 7, 114, 2, 115, 7, 115, 2, 116, 7, 116, 1, 0, 5, 0,
		236, 8, 0, 10, 0, 12, 0, 239, 9, 0, 1, 1, 1, 1, 3, 1, 243, 8, 1, 1, 1,
		1, 1, 5, 1, 247, 8, 1, 10, 1, 12, 1, 250, 9, 1, 1, 1, 1, 1, 1, 2, 1, 2,
		1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 260, 8, 2, 1, 3, 1, 3, 1, 3, 5, 3, 265, 8,
		3, 10, 3, 12, 3, 268, 9, 3, 1, 4, 1, 4, 1, 4, 1, 4, 5, 4, 274, 8, 4, 10,
		4, 12, 4, 277, 9, 4, 1, 4, 1, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1,
		5, 1, 5, 3, 5, 289, 8, 5, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1,
		6, 1, 6, 1, 6, 1, 6, 3, 6, 302, 8, 6, 1, 7, 1, 7, 1, 8, 3, 8, 307, 8, 8,
		1, 8, 1, 8, 1, 9, 1, 9, 1, 10, 1, 10, 1, 11, 1, 11, 1, 12, 1, 12, 1, 13,
		1, 13, 1, 14, 1, 14, 1, 15, 1, 15, 1, 16, 1, 16, 1, 17, 1, 17, 3, 17, 329,
		8, 17, 1, 18, 1, 18, 3, 18, 333, 8, 18, 1, 19, 1, 19, 1, 19, 1, 19, 1,
		19, 1, 19, 1, 19, 1, 19, 1, 19, 3, 19, 344, 8, 19, 1, 20, 1, 20, 3, 20,
		348, 8, 20, 1, 21, 1, 21, 3, 21, 352, 8, 21, 1, 22, 1, 22, 1, 23, 1, 23,
		1, 24, 1, 24, 1, 25, 1, 25, 1, 26, 1, 26, 1, 27, 1, 27, 1, 28, 1, 28, 1,
		28, 1, 28, 1, 28, 1, 28, 4, 28, 372, 8, 28, 11, 28, 12, 28, 373, 1, 28,
		1, 28, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 3, 29, 386,
		8, 29, 1, 29, 3, 29, 389, 8, 29, 1, 29, 1, 29, 3, 29, 393, 8, 29, 1, 30,
		1, 30, 1, 30, 1, 30, 3, 30, 399, 8, 30, 1, 31, 1, 31, 1, 31, 1, 31, 1,
		31, 1, 32, 1, 32, 1, 32, 1, 32, 1, 33, 1, 33, 1, 33, 1, 33, 3, 33, 414,
		8, 33, 1, 33, 1, 33, 1, 33, 1, 33, 3, 33, 420, 8, 33, 5, 33, 422, 8, 33,
		10, 33, 12, 33, 425, 9, 33, 1, 33, 1, 33, 1, 34, 1, 34, 1, 34, 1, 34, 1,
		34, 1, 34, 5, 34, 435, 8, 34, 10, 34, 12, 34, 438, 9, 34, 1, 34, 1, 34,
		1, 34, 1, 34, 3, 34, 444, 8, 34, 3, 34, 446, 8, 34, 1, 35, 1, 35, 1, 35,
		1, 35, 5, 35, 452, 8, 35, 10, 35, 12, 35, 455, 9, 35, 1, 35, 3, 35, 458,
		8, 35, 1, 35, 1, 35, 1, 36, 1, 36, 1, 36, 1, 36, 3, 36, 466, 8, 36, 1,
		36, 1, 36, 3, 36, 470, 8, 36, 1, 37, 1, 37, 1, 37, 3, 37, 475, 8, 37, 1,
		38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 5, 38, 483, 8, 38, 10, 38, 12, 38,
		486, 9, 38, 1, 38, 1, 38, 1, 39, 1, 39, 1, 40, 1, 40, 1, 40, 1, 40, 1,
		40, 1, 40, 1, 40, 1, 40, 1, 40, 5, 40, 501, 8, 40, 10, 40, 12, 40, 504,
		9, 40, 1, 40, 1, 40, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 3, 41, 513, 8,
		41, 1, 42, 1, 42, 1, 42, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 44, 1, 44,
		1, 44, 5, 44, 526, 8, 44, 10, 44, 12, 44, 529, 9, 44, 1, 45, 1, 45, 1,
		45, 1, 45, 1, 45, 3, 45, 536, 8, 45, 1, 45, 1, 45, 1, 45, 1, 45, 1, 46,
		5, 46, 543, 8, 46, 10, 46, 12, 46, 546, 9, 46, 1, 47, 1, 47, 1, 47, 1,
		47, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 5, 48, 557, 8, 48, 10, 48, 12, 48,
		560, 9, 48, 1, 49, 1, 49, 3, 49, 564, 8, 49, 1, 49, 3, 49, 567, 8, 49,
		1, 50, 1, 50, 1, 51, 1, 51, 3, 51, 573, 8, 51, 1, 51, 1, 51, 1, 51, 3,
		51, 578, 8, 51, 1, 51, 1, 51, 3, 51, 582, 8, 51, 1, 51, 1, 51, 1, 51, 5,
		51, 587, 8, 51, 10, 51, 12, 51, 590, 9, 51, 1, 51, 1, 51, 1, 51, 1, 52,
		1, 52, 1, 52, 1, 52, 3, 52, 599, 8, 52, 1, 53, 1, 53, 1, 54, 1, 54, 1,
		54, 1, 54, 3, 54, 607, 8, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 55, 1, 55,
		3, 55, 615, 8, 55, 1, 55, 1, 55, 1, 55, 3, 55, 620, 8, 55, 1, 55, 1, 55,
		3, 55, 624, 8, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 56, 5, 56, 631, 8, 56,
		10, 56, 12, 56, 634, 9, 56, 1, 57, 1, 57, 3, 57, 638, 8, 57, 1, 57, 3,
		57, 641, 8, 57, 1, 57, 3, 57, 644, 8, 57, 1, 57, 1, 57, 1, 57, 1, 57, 3,
		57, 650, 8, 57, 3, 57, 652, 8, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 58, 1,
		58, 1, 58, 1, 58, 5, 58, 662, 8, 58, 10, 58, 12, 58, 665, 9, 58, 1, 58,
		1, 58, 1, 58, 1, 59, 1, 59, 5, 59, 672, 8, 59, 10, 59, 12, 59, 675, 9,
		59, 1, 59, 1, 59, 1, 59, 1, 60, 5, 60, 681, 8, 60, 10, 60, 12, 60, 684,
		9, 60, 1, 61, 1, 61, 1, 61, 3, 61, 689, 8, 61, 1, 62, 1, 62, 1, 62, 1,
		63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 3, 63,
		704, 8, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1,
		63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63,
		1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 5, 63, 733, 8,
		63, 10, 63, 12, 63, 736, 9, 63, 1, 64, 1, 64, 1, 64, 3, 64, 741, 8, 64,
		1, 65, 1, 65, 1, 65, 1, 65, 3, 65, 747, 8, 65, 1, 65, 1, 65, 1, 65, 3,
		65, 752, 8, 65, 5, 65, 754, 8, 65, 10, 65, 12, 65, 757, 9, 65, 3, 65, 759,
		8, 65, 1, 65, 1, 65, 1, 66, 5, 66, 764, 8, 66, 10, 66, 12, 66, 767, 9,
		66, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67,
		1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 3,
		67, 789, 8, 67, 1, 67, 1, 67, 3, 67, 793, 8, 67, 1, 67, 1, 67, 3, 67, 797,
		8, 67, 1, 67, 1, 67, 3, 67, 801, 8, 67, 1, 67, 1, 67, 3, 67, 805, 8, 67,
		1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 3, 67, 814, 8, 67, 1,
		68, 1, 68, 1, 69, 1, 69, 1, 69, 1, 70, 1, 70, 1, 70, 1, 71, 1, 71, 1, 71,
		1, 71, 1, 72, 1, 72, 1, 72, 4, 72, 831, 8, 72, 11, 72, 12, 72, 832, 1,
		72, 1, 72, 1, 72, 1, 73, 1, 73, 1, 74, 1, 74, 3, 74, 842, 8, 74, 1, 75,
		1, 75, 1, 76, 1, 76, 4, 76, 848, 8, 76, 11, 76, 12, 76, 849, 3, 76, 852,
		8, 76, 1, 76, 1, 76, 3, 76, 856, 8, 76, 3, 76, 858, 8, 76, 1, 76, 1, 76,
		3, 76, 862, 8, 76, 1, 77, 1, 77, 1, 77, 1, 77, 5, 77, 868, 8, 77, 10, 77,
		12, 77, 871, 9, 77, 1, 77, 1, 77, 1, 78, 1, 78, 1, 79, 1, 79, 1, 80, 1,
		80, 1, 80, 1, 80, 1, 80, 3, 80, 884, 8, 80, 1, 80, 3, 80, 887, 8, 80, 1,
		81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 5, 81, 898,
		8, 81, 10, 81, 12, 81, 901, 9, 81, 1, 81, 1, 81, 3, 81, 905, 8, 81, 1,
		81, 1, 81, 3, 81, 909, 8, 81, 1, 82, 1, 82, 1, 82, 1, 82, 4, 82, 915, 8,
		82, 11, 82, 12, 82, 916, 1, 82, 1, 82, 3, 82, 921, 8, 82, 1, 82, 3, 82,
		924, 8, 82, 1, 82, 1, 82, 1, 83, 1, 83, 1, 83, 5, 83, 931, 8, 83, 10, 83,
		12, 83, 934, 9, 83, 1, 83, 1, 83, 1, 83, 1, 84, 1, 84, 1, 84, 1, 84, 3,
		84, 943, 8, 84, 1, 85, 1, 85, 1, 85, 1, 85, 1, 85, 1, 85, 1, 85, 1, 85,
		3, 85, 953, 8, 85, 1, 85, 1, 85, 1, 85, 1, 85, 1, 86, 1, 86, 1, 86, 1,
		86, 1, 86, 1, 86, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 88, 1, 88,
		1, 89, 1, 89, 1, 90, 4, 90, 976, 8, 90, 11, 90, 12, 90, 977, 1, 91, 1,
		91, 1, 91, 5, 91, 983, 8, 91, 10, 91, 12, 91, 986, 9, 91, 1, 92, 1, 92,
		1, 92, 1, 92, 1, 92, 1, 92, 5, 92, 994, 8, 92, 10, 92, 12, 92, 997, 9,
		92, 1, 92, 1, 92, 1, 93, 1, 93, 1, 93, 3, 93, 1004, 8, 93, 1, 93, 1, 93,
		1, 93, 5, 93, 1009, 8, 93, 10, 93, 12, 93, 1012, 9, 93, 1, 93, 1, 93, 1,
		94, 1, 94, 1, 94, 3, 94, 1019, 8, 94, 1, 94, 1, 94, 5, 94, 1023, 8, 94,
		10, 94, 12, 94, 1026, 9, 94, 1, 94, 1, 94, 1, 95, 1, 95, 1, 95, 3, 95,
		1033, 8, 95, 1, 96, 1, 96, 3, 96, 1037, 8, 96, 1, 96, 1, 96, 1, 96, 1,
		96, 1, 96, 3, 96, 1044, 8, 96, 1, 96, 1, 96, 1, 96, 1, 96, 1, 96, 1, 96,
		1, 96, 1, 97, 1, 97, 1, 97, 1, 97, 1, 97, 5, 97, 1058, 8, 97, 10, 97, 12,
		97, 1061, 9, 97, 1, 97, 3, 97, 1064, 8, 97, 1, 98, 1, 98, 1, 98, 1, 98,
		1, 99, 1, 99, 1, 99, 3, 99, 1073, 8, 99, 1, 99, 1, 99, 1, 99, 1, 100, 3,
		100, 1079, 8, 100, 1, 100, 4, 100, 1082, 8, 100, 11, 100, 12, 100, 1083,
		1, 100, 3, 100, 1087, 8, 100, 1, 101, 1, 101, 3, 101, 1091, 8, 101, 1,
		101, 3, 101, 1094, 8, 101, 1, 101, 1, 101, 1, 101, 1, 102, 1, 102, 1, 102,
		1, 102, 3, 102, 1103, 8, 102, 1, 103, 1, 103, 1, 103, 1, 103, 1, 103, 1,
		103, 3, 103, 1111, 8, 103, 1, 104, 1, 104, 1, 104, 4, 104, 1116, 8, 104,
		11, 104, 12, 104, 1117, 1, 105, 1, 105, 3, 105, 1122, 8, 105, 1, 106, 1,
		106, 1, 106, 3, 106, 1127, 8, 106, 1, 106, 1, 106, 1, 106, 1, 106, 1, 106,
		3, 106, 1134, 8, 106, 3, 106, 1136, 8, 106, 1, 107, 1, 107, 1, 107, 1,
		107, 3, 107, 1142, 8, 107, 3, 107, 1144, 8, 107, 1, 108, 1, 108, 1, 108,
		1, 108, 1, 108, 1, 108, 5, 108, 1152, 8, 108, 10, 108, 12, 108, 1155, 9,
		108, 3, 108, 1157, 8, 108, 1, 108, 1, 108, 1, 109, 1, 109, 1, 109, 1, 110,
		1, 110, 1, 110, 1, 110, 1, 110, 1, 110, 1, 110, 5, 110, 1171, 8, 110, 10,
		110, 12, 110, 1174, 9, 110, 3, 110, 1176, 8, 110, 1, 110, 1, 110, 1, 110,
		1, 110, 5, 110, 1182, 8, 110, 10, 110, 12, 110, 1185, 9, 110, 3, 110, 1187,
		8, 110, 3, 110, 1189, 8, 110, 1, 111, 1, 111, 3, 111, 1193, 8, 111, 1,
		112, 1, 112, 1, 113, 1, 113, 1, 114, 1, 114, 1, 115, 1, 115, 1, 116, 3,
		116, 1204, 8, 116, 1, 116, 1, 116, 1, 116, 1, 116, 1, 116, 3, 116, 1211,
		8, 116, 1, 116, 3, 116, 1214, 8, 116, 1, 116, 0, 1, 126, 117, 0, 2, 4,
		6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42,
		44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78,
		80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112,
		114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142,
		144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172,
		174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202,
		204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232,
		0, 26, 1, 0, 175, 176, 3, 0, 16, 16, 18, 19, 23, 23, 1, 0, 27, 30, 2, 0,
		20, 20, 22, 22, 4, 0, 15, 15, 26, 26, 41, 41, 43, 43, 4, 0, 13, 14, 17,
		17, 21, 21, 31, 31, 1, 0, 2, 11, 2, 0, 64, 64, 79, 79, 2, 0, 24, 24, 32,
		32, 3, 0, 34, 34, 87, 87, 90, 93, 3, 0, 39, 39, 69, 69, 77, 77, 1, 0, 147,
		150, 1, 0, 144, 145, 3, 0, 39, 39, 77, 77, 127, 127, 2, 0, 103, 103, 112,
		112, 2, 0, 111, 111, 117, 117, 2, 0, 105, 106, 108, 109, 2, 0, 104, 104,
		115, 115, 2, 0, 97, 97, 128, 128, 2, 0, 99, 101, 122, 123, 4, 0, 151, 152,
		156, 158, 161, 164, 177, 177, 1, 1, 222, 222, 1, 0, 196, 198, 1, 0, 185,
		187, 5, 0, 188, 190, 195, 195, 199, 200, 206, 206, 208, 219, 10, 0, 97,
		97, 112, 112, 116, 116, 121, 121, 183, 184, 191, 194, 201, 202, 204, 205,
		207, 207, 220, 221, 1296, 0, 237, 1, 0, 0, 0, 2, 240, 1, 0, 0, 0, 4, 259,
		1, 0, 0, 0, 6, 261, 1, 0, 0, 0, 8, 269, 1, 0, 0, 0, 10, 288, 1, 0, 0, 0,
		12, 301, 1, 0, 0, 0, 14, 303, 1, 0, 0, 0, 16, 306, 1, 0, 0, 0, 18, 310,
		1, 0, 0, 0, 20, 312, 1, 0, 0, 0, 22, 314, 1, 0, 0, 0, 24, 316, 1, 0, 0,
		0, 26, 318, 1, 0, 0, 0, 28, 320, 1, 0, 0, 0, 30, 322, 1, 0, 0, 0, 32, 324,
		1, 0, 0, 0, 34, 328, 1, 0, 0, 0, 36, 332, 1, 0, 0, 0, 38, 343, 1, 0, 0,
		0, 40, 347, 1, 0, 0, 0, 42, 351, 1, 0, 0, 0, 44, 353, 1, 0, 0, 0, 46, 355,
		1, 0, 0, 0, 48, 357, 1, 0, 0, 0, 50, 359, 1, 0, 0, 0, 52, 361, 1, 0, 0,
		0, 54, 363, 1, 0, 0, 0, 56, 365, 1, 0, 0, 0, 58, 388, 1, 0, 0, 0, 60, 398,
		1, 0, 0, 0, 62, 400, 1, 0, 0, 0, 64, 405, 1, 0, 0, 0, 66, 409, 1, 0, 0,
		0, 68, 445, 1, 0, 0, 0, 70, 447, 1, 0, 0, 0, 72, 469, 1, 0, 0, 0, 74, 474,
		1, 0, 0, 0, 76, 476, 1, 0, 0, 0, 78, 489, 1, 0, 0, 0, 80, 491, 1, 0, 0,
		0, 82, 507, 1, 0, 0, 0, 84, 514, 1, 0, 0, 0, 86, 517, 1, 0, 0, 0, 88, 522,
		1, 0, 0, 0, 90, 530, 1, 0, 0, 0, 92, 544, 1, 0, 0, 0, 94, 547, 1, 0, 0,
		0, 96, 558, 1, 0, 0, 0, 98, 561, 1, 0, 0, 0, 100, 568, 1, 0, 0, 0, 102,
		570, 1, 0, 0, 0, 104, 598, 1, 0, 0, 0, 106, 600, 1, 0, 0, 0, 108, 602,
		1, 0, 0, 0, 110, 612, 1, 0, 0, 0, 112, 632, 1, 0, 0, 0, 114, 635, 1, 0,
		0, 0, 116, 657, 1, 0, 0, 0, 118, 669, 1, 0, 0, 0, 120, 682, 1, 0, 0, 0,
		122, 688, 1, 0, 0, 0, 124, 690, 1, 0, 0, 0, 126, 703, 1, 0, 0, 0, 128,
		740, 1, 0, 0, 0, 130, 742, 1, 0, 0, 0, 132, 765, 1, 0, 0, 0, 134, 813,
		1, 0, 0, 0, 136, 815, 1, 0, 0, 0, 138, 817, 1, 0, 0, 0, 140, 820, 1, 0,
		0, 0, 142, 823, 1, 0, 0, 0, 144, 827, 1, 0, 0, 0, 146, 837, 1, 0, 0, 0,
		148, 841, 1, 0, 0, 0, 150, 843, 1, 0, 0, 0, 152, 845, 1, 0, 0, 0, 154,
		863, 1, 0, 0, 0, 156, 874, 1, 0, 0, 0, 158, 876, 1, 0, 0, 0, 160, 886,
		1, 0, 0, 0, 162, 888, 1, 0, 0, 0, 164, 910, 1, 0, 0, 0, 166, 927, 1, 0,
		0, 0, 168, 942, 1, 0, 0, 0, 170, 944, 1, 0, 0, 0, 172, 958, 1, 0, 0, 0,
		174, 964, 1, 0, 0, 0, 176, 970, 1, 0, 0, 0, 178, 972, 1, 0, 0, 0, 180,
		975, 1, 0, 0, 0, 182, 979, 1, 0, 0, 0, 184, 987, 1, 0, 0, 0, 186, 1000,
		1, 0, 0, 0, 188, 1015, 1, 0, 0, 0, 190, 1029, 1, 0, 0, 0, 192, 1034, 1,
		0, 0, 0, 194, 1063, 1, 0, 0, 0, 196, 1065, 1, 0, 0, 0, 198, 1069, 1, 0,
		0, 0, 200, 1078, 1, 0, 0, 0, 202, 1090, 1, 0, 0, 0, 204, 1102, 1, 0, 0,
		0, 206, 1110, 1, 0, 0, 0, 208, 1115, 1, 0, 0, 0, 210, 1119, 1, 0, 0, 0,
		212, 1123, 1, 0, 0, 0, 214, 1137, 1, 0, 0, 0, 216, 1145, 1, 0, 0, 0, 218,
		1160, 1, 0, 0, 0, 220, 1163, 1, 0, 0, 0, 222, 1192, 1, 0, 0, 0, 224, 1194,
		1, 0, 0, 0, 226, 1196, 1, 0, 0, 0, 228, 1198, 1, 0, 0, 0, 230, 1200, 1,
		0, 0, 0, 232, 1213, 1, 0, 0, 0, 234, 236, 3, 10, 5, 0, 235, 234, 1, 0,
		0, 0, 236, 239, 1, 0, 0, 0, 237, 235, 1, 0, 0, 0, 237, 238, 1, 0, 0, 0,
		238, 1, 1, 0, 0, 0, 239, 237, 1, 0, 0, 0, 240, 242, 5, 124, 0, 0, 241,
		243, 5, 148, 0, 0, 242, 241, 1, 0, 0, 0, 242, 243, 1, 0, 0, 0, 243, 244,
		1, 0, 0, 0, 244, 248, 3, 6, 3, 0, 245, 247, 3, 8, 4, 0, 246, 245, 1, 0,
		0, 0, 247, 250, 1, 0, 0, 0, 248, 246, 1, 0, 0, 0, 248, 249, 1, 0, 0, 0,
		249, 251, 1, 0, 0, 0, 250, 248, 1, 0, 0, 0, 251, 252, 3, 4, 2, 0, 252,
		3, 1, 0, 0, 0, 253, 260, 3, 56, 28, 0, 254, 260, 3, 90, 45, 0, 255, 260,
		3, 110, 55, 0, 256, 260, 3, 108, 54, 0, 257, 260, 3, 102, 51, 0, 258, 260,
		3, 2, 1, 0, 259, 253, 1, 0, 0, 0, 259, 254, 1, 0, 0, 0, 259, 255, 1, 0,
		0, 0, 259, 256, 1, 0, 0, 0, 259, 257, 1, 0, 0, 0, 259, 258, 1, 0, 0, 0,
		260, 5, 1, 0, 0, 0, 261, 266, 5, 177, 0, 0, 262, 263, 5, 132, 0, 0, 263,
		265, 5, 177, 0, 0, 264, 262, 1, 0, 0, 0, 265, 268, 1, 0, 0, 0, 266, 264,
		1, 0, 0, 0, 266, 267, 1, 0, 0, 0, 267, 7, 1, 0, 0, 0, 268, 266, 1, 0, 0,
		0, 269, 270, 5, 126, 0, 0, 270, 275, 3, 6, 3, 0, 271, 272, 5, 102, 0, 0,
		272, 274, 3, 6, 3, 0, 273, 271, 1, 0, 0, 0, 274, 277, 1, 0, 0, 0, 275,
		273, 1, 0, 0, 0, 275, 276, 1, 0, 0, 0, 276, 278, 1, 0, 0, 0, 277, 275,
		1, 0, 0, 0, 278, 279, 5, 130, 0, 0, 279, 9, 1, 0, 0, 0, 280, 289, 3, 56,
		28, 0, 281, 289, 3, 90, 45, 0, 282, 289, 3, 110, 55, 0, 283, 289, 3, 108,
		54, 0, 284, 289, 3, 102, 51, 0, 285, 289, 3, 116, 58, 0, 286, 289, 3, 118,
		59, 0, 287, 289, 3, 2, 1, 0, 288, 280, 1, 0, 0, 0, 288, 281, 1, 0, 0, 0,
		288, 282, 1, 0, 0, 0, 288, 283, 1, 0, 0, 0, 288, 284, 1, 0, 0, 0, 288,
		285, 1, 0, 0, 0, 288, 286, 1, 0, 0, 0, 288, 287, 1, 0, 0, 0, 289, 11, 1,
		0, 0, 0, 290, 302, 3, 16, 8, 0, 291, 302, 3, 20, 10, 0, 292, 302, 3, 22,
		11, 0, 293, 302, 3, 24, 12, 0, 294, 302, 3, 26, 13, 0, 295, 302, 3, 28,
		14, 0, 296, 302, 3, 30, 15, 0, 297, 302, 3, 14, 7, 0, 298, 302, 3, 18,
		9, 0, 299, 302, 3, 32, 16, 0, 300, 302, 3, 86, 43, 0, 301, 290, 1, 0, 0,
		0, 301, 291, 1, 0, 0, 0, 301, 292, 1, 0, 0, 0, 301, 293, 1, 0, 0, 0, 301,
		294, 1, 0, 0, 0, 301, 295, 1, 0, 0, 0, 301, 296, 1, 0, 0, 0, 301, 297,
		1, 0, 0, 0, 301, 298, 1, 0, 0, 0, 301, 299, 1, 0, 0, 0, 301, 300, 1, 0,
		0, 0, 302, 13, 1, 0, 0, 0, 303, 304, 5, 136, 0, 0, 304, 15, 1, 0, 0, 0,
		305, 307, 5, 111, 0, 0, 306, 305, 1, 0, 0, 0, 306, 307, 1, 0, 0, 0, 307,
		308, 1, 0, 0, 0, 308, 309, 5, 167, 0, 0, 309, 17, 1, 0, 0, 0, 310, 311,
		5, 168, 0, 0, 311, 19, 1, 0, 0, 0, 312, 313, 5, 169, 0, 0, 313, 21, 1,
		0, 0, 0, 314, 315, 7, 0, 0, 0, 315, 23, 1, 0, 0, 0, 316, 317, 5, 170, 0,
		0, 317, 25, 1, 0, 0, 0, 318, 319, 5, 172, 0, 0, 319, 27, 1, 0, 0, 0, 320,
		321, 5, 171, 0, 0, 321, 29, 1, 0, 0, 0, 322, 323, 5, 173, 0, 0, 323, 31,
		1, 0, 0, 0, 324, 325, 5, 129, 0, 0, 325, 33, 1, 0, 0, 0, 326, 329, 3, 36,
		18, 0, 327, 329, 3, 54, 27, 0, 328, 326, 1, 0, 0, 0, 328, 327, 1, 0, 0,
		0, 329, 35, 1, 0, 0, 0, 330, 333, 3, 38, 19, 0, 331, 333, 5, 177, 0, 0,
		332, 330, 1, 0, 0, 0, 332, 331, 1, 0, 0, 0, 333, 37, 1, 0, 0, 0, 334, 344,
		3, 40, 20, 0, 335, 344, 3, 50, 25, 0, 336, 344, 3, 52, 26, 0, 337, 344,
		5, 24, 0, 0, 338, 344, 5, 32, 0, 0, 339, 344, 5, 25, 0, 0, 340, 344, 5,
		2, 0, 0, 341, 344, 5, 3, 0, 0, 342, 344, 5, 7, 0, 0, 343, 334, 1, 0, 0,
		0, 343, 335, 1, 0, 0, 0, 343, 336, 1, 0, 0, 0, 343, 337, 1, 0, 0, 0, 343,
		338, 1, 0, 0, 0, 343, 339, 1, 0, 0, 0, 343, 340, 1, 0, 0, 0, 343, 341,
		1, 0, 0, 0, 343, 342, 1, 0, 0, 0, 344, 39, 1, 0, 0, 0, 345, 348, 3, 42,
		21, 0, 346, 348, 3, 48, 24, 0, 347, 345, 1, 0, 0, 0, 347, 346, 1, 0, 0,
		0, 348, 41, 1, 0, 0, 0, 349, 352, 3, 44, 22, 0, 350, 352, 3, 46, 23, 0,
		351, 349, 1, 0, 0, 0, 351, 350, 1, 0, 0, 0, 352, 43, 1, 0, 0, 0, 353, 354,
		7, 1, 0, 0, 354, 45, 1, 0, 0, 0, 355, 356, 7, 2, 0, 0, 356, 47, 1, 0, 0,
		0, 357, 358, 7, 3, 0, 0, 358, 49, 1, 0, 0, 0, 359, 360, 7, 4, 0, 0, 360,
		51, 1, 0, 0, 0, 361, 362, 7, 5, 0, 0, 362, 53, 1, 0, 0, 0, 363, 364, 7,
		6, 0, 0, 364, 55, 1, 0, 0, 0, 365, 371, 5, 85, 0, 0, 366, 367, 5, 177,
		0, 0, 367, 368, 5, 159, 0, 0, 368, 369, 3, 58, 29, 0, 369, 370, 5, 130,
		0, 0, 370, 372, 1, 0, 0, 0, 371, 366, 1, 0, 0, 0, 372, 373, 1, 0, 0, 0,
		373, 371, 1, 0, 0, 0, 373, 374, 1, 0, 0, 0, 374, 375, 1, 0, 0, 0, 375,
		376, 5, 57, 0, 0, 376, 57, 1, 0, 0, 0, 377, 389, 3, 68, 34, 0, 378, 389,
		3, 82, 41, 0, 379, 389, 3, 62, 31, 0, 380, 389, 3, 76, 38, 0, 381, 389,
		3, 66, 33, 0, 382, 389, 3, 84, 42, 0, 383, 385, 3, 34, 17, 0, 384, 386,
		7, 7, 0, 0, 385, 384, 1, 0, 0, 0, 385, 386, 1, 0, 0, 0, 386, 389, 1, 0,
		0, 0, 387, 389, 3, 66, 33, 0, 388, 377, 1, 0, 0, 0, 388, 378, 1, 0, 0,
		0, 388, 379, 1, 0, 0, 0, 388, 380, 1, 0, 0, 0, 388, 381, 1, 0, 0, 0, 388,
		382, 1, 0, 0, 0, 388, 383, 1, 0, 0, 0, 388, 387, 1, 0, 0, 0, 389, 392,
		1, 0, 0, 0, 390, 391, 5, 99, 0, 0, 391, 393, 3, 60, 30, 0, 392, 390, 1,
		0, 0, 0, 392, 393, 1, 0, 0, 0, 393, 59, 1, 0, 0, 0, 394, 399, 3, 12, 6,
		0, 395, 399, 5, 177, 0, 0, 396, 399, 3, 70, 35, 0, 397, 399, 3, 80, 40,
		0, 398, 394, 1, 0, 0, 0, 398, 395, 1, 0, 0, 0, 398, 396, 1, 0, 0, 0, 398,
		397, 1, 0, 0, 0, 399, 61, 1, 0, 0, 0, 400, 401, 3, 42, 21, 0, 401, 402,
		5, 110, 0, 0, 402, 403, 3, 64, 32, 0, 403, 404, 5, 120, 0, 0, 404, 63,
		1, 0, 0, 0, 405, 406, 3, 16, 8, 0, 406, 407, 5, 135, 0, 0, 407, 408, 3,
		16, 8, 0, 408, 65, 1, 0, 0, 0, 409, 410, 5, 110, 0, 0, 410, 413, 5, 177,
		0, 0, 411, 412, 5, 99, 0, 0, 412, 414, 3, 16, 8, 0, 413, 411, 1, 0, 0,
		0, 413, 414, 1, 0, 0, 0, 414, 423, 1, 0, 0, 0, 415, 416, 5, 102, 0, 0,
		416, 419, 5, 177, 0, 0, 417, 418, 5, 99, 0, 0, 418, 420, 3, 16, 8, 0, 419,
		417, 1, 0, 0, 0, 419, 420, 1, 0, 0, 0, 420, 422, 1, 0, 0, 0, 421, 415,
		1, 0, 0, 0, 422, 425, 1, 0, 0, 0, 423, 421, 1, 0, 0, 0, 423, 424, 1, 0,
		0, 0, 424, 426, 1, 0, 0, 0, 425, 423, 1, 0, 0, 0, 426, 427, 5, 120, 0,
		0, 427, 67, 1, 0, 0, 0, 428, 446, 1, 0, 0, 0, 429, 430, 5, 12, 0, 0, 430,
		431, 5, 107, 0, 0, 431, 436, 3, 64, 32, 0, 432, 433, 5, 102, 0, 0, 433,
		435, 3, 64, 32, 0, 434, 432, 1, 0, 0, 0, 435, 438, 1, 0, 0, 0, 436, 434,
		1, 0, 0, 0, 436, 437, 1, 0, 0, 0, 437, 439, 1, 0, 0, 0, 438, 436, 1, 0,
		0, 0, 439, 440, 5, 119, 0, 0, 440, 443, 5, 70, 0, 0, 441, 444, 3, 82, 41,
		0, 442, 444, 3, 36, 18, 0, 443, 441, 1, 0, 0, 0, 443, 442, 1, 0, 0, 0,
		444, 446, 1, 0, 0, 0, 445, 428, 1, 0, 0, 0, 445, 429, 1, 0, 0, 0, 446,
		69, 1, 0, 0, 0, 447, 448, 5, 107, 0, 0, 448, 453, 3, 72, 36, 0, 449, 450,
		5, 102, 0, 0, 450, 452, 3, 72, 36, 0, 451, 449, 1, 0, 0, 0, 452, 455, 1,
		0, 0, 0, 453, 451, 1, 0, 0, 0, 453, 454, 1, 0, 0, 0, 454, 457, 1, 0, 0,
		0, 455, 453, 1, 0, 0, 0, 456, 458, 5, 102, 0, 0, 457, 456, 1, 0, 0, 0,
		457, 458, 1, 0, 0, 0, 458, 459, 1, 0, 0, 0, 459, 460, 5, 119, 0, 0, 460,
		71, 1, 0, 0, 0, 461, 470, 3, 74, 37, 0, 462, 463, 3, 16, 8, 0, 463, 465,
		5, 110, 0, 0, 464, 466, 3, 74, 37, 0, 465, 464, 1, 0, 0, 0, 465, 466, 1,
		0, 0, 0, 466, 467, 1, 0, 0, 0, 467, 468, 5, 120, 0, 0, 468, 470, 1, 0,
		0, 0, 469, 461, 1, 0, 0, 0, 469, 462, 1, 0, 0, 0, 470, 73, 1, 0, 0, 0,
		471, 475, 3, 12, 6, 0, 472, 475, 3, 80, 40, 0, 473, 475, 3, 70, 35, 0,
		474, 471, 1, 0, 0, 0, 474, 472, 1, 0, 0, 0, 474, 473, 1, 0, 0, 0, 475,
		75, 1, 0, 0, 0, 476, 484, 5, 81, 0, 0, 477, 478, 3, 78, 39, 0, 478, 479,
		5, 159, 0, 0, 479, 480, 3, 58, 29, 0, 480, 481, 5, 130, 0, 0, 481, 483,
		1, 0, 0, 0, 482, 477, 1, 0, 0, 0, 483, 486, 1, 0, 0, 0, 484, 482, 1, 0,
		0, 0, 484, 485, 1, 0, 0, 0, 485, 487, 1, 0, 0, 0, 486, 484, 1, 0, 0, 0,
		487, 488, 5, 56, 0, 0, 488, 77, 1, 0, 0, 0, 489, 490, 5, 177, 0, 0, 490,
		79, 1, 0, 0, 0, 491, 492, 5, 110, 0, 0, 492, 493, 3, 78, 39, 0, 493, 494,
		5, 99, 0, 0, 494, 502, 3, 60, 30, 0, 495, 496, 5, 102, 0, 0, 496, 497,
		3, 78, 39, 0, 497, 498, 5, 99, 0, 0, 498, 499, 3, 60, 30, 0, 499, 501,
		1, 0, 0, 0, 500, 495, 1, 0, 0, 0, 501, 504, 1, 0, 0, 0, 502, 500, 1, 0,
		0, 0, 502, 503, 1, 0, 0, 0, 503, 505, 1, 0, 0, 0, 504, 502, 1, 0, 0, 0,
		505, 506, 5, 120, 0, 0, 506, 81, 1, 0, 0, 0, 507, 512, 7, 8, 0, 0, 508,
		509, 5, 107, 0, 0, 509, 510, 3, 16, 8, 0, 510, 511, 5, 119, 0, 0, 511,
		513, 1, 0, 0, 0, 512, 508, 1, 0, 0, 0, 512, 513, 1, 0, 0, 0, 513, 83, 1,
		0, 0, 0, 514, 515, 5, 154, 0, 0, 515, 516, 3, 34, 17, 0, 516, 85, 1, 0,
		0, 0, 517, 518, 5, 134, 0, 0, 518, 519, 5, 110, 0, 0, 519, 520, 3, 152,
		76, 0, 520, 521, 5, 120, 0, 0, 521, 87, 1, 0, 0, 0, 522, 527, 3, 150, 75,
		0, 523, 524, 5, 102, 0, 0, 524, 526, 3, 150, 75, 0, 525, 523, 1, 0, 0,
		0, 526, 529, 1, 0, 0, 0, 527, 525, 1, 0, 0, 0, 527, 528, 1, 0, 0, 0, 528,
		89, 1, 0, 0, 0, 529, 527, 1, 0, 0, 0, 530, 531, 5, 62, 0, 0, 531, 532,
		3, 78, 39, 0, 532, 535, 5, 159, 0, 0, 533, 536, 3, 38, 19, 0, 534, 536,
		5, 177, 0, 0, 535, 533, 1, 0, 0, 0, 535, 534, 1, 0, 0, 0, 536, 537, 1,
		0, 0, 0, 537, 538, 3, 92, 46, 0, 538, 539, 3, 106, 53, 0, 539, 540, 5,
		50, 0, 0, 540, 91, 1, 0, 0, 0, 541, 543, 3, 94, 47, 0, 542, 541, 1, 0,
		0, 0, 543, 546, 1, 0, 0, 0, 544, 542, 1, 0, 0, 0, 544, 545, 1, 0, 0, 0,
		545, 93, 1, 0, 0, 0, 546, 544, 1, 0, 0, 0, 547, 548, 3, 98, 49, 0, 548,
		549, 3, 96, 48, 0, 549, 550, 5, 58, 0, 0, 550, 95, 1, 0, 0, 0, 551, 552,
		3, 88, 44, 0, 552, 553, 5, 159, 0, 0, 553, 554, 3, 58, 29, 0, 554, 555,
		5, 130, 0, 0, 555, 557, 1, 0, 0, 0, 556, 551, 1, 0, 0, 0, 557, 560, 1,
		0, 0, 0, 558, 556, 1, 0, 0, 0, 558, 559, 1, 0, 0, 0, 559, 97, 1, 0, 0,
		0, 560, 558, 1, 0, 0, 0, 561, 563, 7, 9, 0, 0, 562, 564, 7, 10, 0, 0, 563,
		562, 1, 0, 0, 0, 563, 564, 1, 0, 0, 0, 564, 566, 1, 0, 0, 0, 565, 567,
		3, 100, 50, 0, 566, 565, 1, 0, 0, 0, 566, 567, 1, 0, 0, 0, 567, 99, 1,
		0, 0, 0, 568, 569, 7, 11, 0, 0, 569, 101, 1, 0, 0, 0, 570, 572, 5, 63,
		0, 0, 571, 573, 7, 12, 0, 0, 572, 571, 1, 0, 0, 0, 572, 573, 1, 0, 0, 0,
		573, 574, 1, 0, 0, 0, 574, 577, 5, 177, 0, 0, 575, 576, 5, 153, 0, 0, 576,
		578, 5, 177, 0, 0, 577, 575, 1, 0, 0, 0, 577, 578, 1, 0, 0, 0, 578, 581,
		1, 0, 0, 0, 579, 580, 5, 146, 0, 0, 580, 582, 3, 88, 44, 0, 581, 579, 1,
		0, 0, 0, 581, 582, 1, 0, 0, 0, 582, 583, 1, 0, 0, 0, 583, 584, 3, 92, 46,
		0, 584, 588, 3, 112, 56, 0, 585, 587, 3, 198, 99, 0, 586, 585, 1, 0, 0,
		0, 587, 590, 1, 0, 0, 0, 588, 586, 1, 0, 0, 0, 588, 589, 1, 0, 0, 0, 589,
		591, 1, 0, 0, 0, 590, 588, 1, 0, 0, 0, 591, 592, 3, 104, 52, 0, 592, 593,
		5, 51, 0, 0, 593, 103, 1, 0, 0, 0, 594, 599, 3, 180, 90, 0, 595, 596, 5,
		1, 0, 0, 596, 599, 3, 200, 100, 0, 597, 599, 3, 132, 66, 0, 598, 594, 1,
		0, 0, 0, 598, 595, 1, 0, 0, 0, 598, 597, 1, 0, 0, 0, 599, 105, 1, 0, 0,
		0, 600, 601, 3, 132, 66, 0, 601, 107, 1, 0, 0, 0, 602, 603, 5, 137, 0,
		0, 603, 606, 5, 177, 0, 0, 604, 605, 5, 153, 0, 0, 605, 607, 3, 88, 44,
		0, 606, 604, 1, 0, 0, 0, 606, 607, 1, 0, 0, 0, 607, 608, 1, 0, 0, 0, 608,
		609, 3, 92, 46, 0, 609, 610, 3, 112, 56, 0, 610, 611, 5, 138, 0, 0, 611,
		109, 1, 0, 0, 0, 612, 614, 5, 141, 0, 0, 613, 615, 7, 12, 0, 0, 614, 613,
		1, 0, 0, 0, 614, 615, 1, 0, 0, 0, 615, 616, 1, 0, 0, 0, 616, 619, 5, 177,
		0, 0, 617, 618, 5, 153, 0, 0, 618, 620, 5, 177, 0, 0, 619, 617, 1, 0, 0,
		0, 619, 620, 1, 0, 0, 0, 620, 623, 1, 0, 0, 0, 621, 622, 5, 146, 0, 0,
		622, 624, 3, 88, 44, 0, 623, 621, 1, 0, 0, 0, 623, 624, 1, 0, 0, 0, 624,
		625, 1, 0, 0, 0, 625, 626, 3, 92, 46, 0, 626, 627, 3, 112, 56, 0, 627,
		628, 5, 142, 0, 0, 628, 111, 1, 0, 0, 0, 629, 631, 3, 114, 57, 0, 630,
		629, 1, 0, 0, 0, 631, 634, 1, 0, 0, 0, 632, 630, 1, 0, 0, 0, 632, 633,
		1, 0, 0, 0, 633, 113, 1, 0, 0, 0, 634, 632, 1, 0, 0, 0, 635, 637, 5, 139,
		0, 0, 636, 638, 3, 100, 50, 0, 637, 636, 1, 0, 0, 0, 637, 638, 1, 0, 0,
		0, 638, 640, 1, 0, 0, 0, 639, 641, 7, 12, 0, 0, 640, 639, 1, 0, 0, 0, 640,
		641, 1, 0, 0, 0, 641, 643, 1, 0, 0, 0, 642, 644, 5, 143, 0, 0, 643, 642,
		1, 0, 0, 0, 643, 644, 1, 0, 0, 0, 644, 645, 1, 0, 0, 0, 645, 651, 5, 177,
		0, 0, 646, 649, 5, 159, 0, 0, 647, 650, 3, 38, 19, 0, 648, 650, 5, 177,
		0, 0, 649, 647, 1, 0, 0, 0, 649, 648, 1, 0, 0, 0, 650, 652, 1, 0, 0, 0,
		651, 646, 1, 0, 0, 0, 651, 652, 1, 0, 0, 0, 652, 653, 1, 0, 0, 0, 653,
		654, 3, 92, 46, 0, 654, 655, 3, 104, 52, 0, 655, 656, 5, 140, 0, 0, 656,
		115, 1, 0, 0, 0, 657, 658, 5, 72, 0, 0, 658, 659, 5, 177, 0, 0, 659, 663,
		3, 92, 46, 0, 660, 662, 3, 198, 99, 0, 661, 660, 1, 0, 0, 0, 662, 665,
		1, 0, 0, 0, 663, 661, 1, 0, 0, 0, 663, 664, 1, 0, 0, 0, 664, 666, 1, 0,
		0, 0, 665, 663, 1, 0, 0, 0, 666, 667, 3, 104, 52, 0, 667, 668, 5, 53, 0,
		0, 668, 117, 1, 0, 0, 0, 669, 673, 5, 91, 0, 0, 670, 672, 7, 13, 0, 0,
		671, 670, 1, 0, 0, 0, 672, 675, 1, 0, 0, 0, 673, 671, 1, 0, 0, 0, 673,
		674, 1, 0, 0, 0, 674, 676, 1, 0, 0, 0, 675, 673, 1, 0, 0, 0, 676, 677,
		3, 96, 48, 0, 677, 678, 5, 58, 0, 0, 678, 119, 1, 0, 0, 0, 679, 681, 3,
		122, 61, 0, 680, 679, 1, 0, 0, 0, 681, 684, 1, 0, 0, 0, 682, 680, 1, 0,
		0, 0, 682, 683, 1, 0, 0, 0, 683, 121, 1, 0, 0, 0, 684, 682, 1, 0, 0, 0,
		685, 689, 3, 142, 71, 0, 686, 689, 3, 124, 62, 0, 687, 689, 3, 128, 64,
		0, 688, 685, 1, 0, 0, 0, 688, 686, 1, 0, 0, 0, 688, 687, 1, 0, 0, 0, 689,
		123, 1, 0, 0, 0, 690, 691, 3, 128, 64, 0, 691, 692, 3, 148, 74, 0, 692,
		125, 1, 0, 0, 0, 693, 694, 6, 63, -1, 0, 694, 695, 5, 111, 0, 0, 695, 704,
		3, 126, 63, 13, 696, 697, 5, 114, 0, 0, 697, 704, 3, 126, 63, 12, 698,
		699, 5, 110, 0, 0, 699, 700, 3, 126, 63, 0, 700, 701, 5, 120, 0, 0, 701,
		704, 1, 0, 0, 0, 702, 704, 3, 128, 64, 0, 703, 693, 1, 0, 0, 0, 703, 696,
		1, 0, 0, 0, 703, 698, 1, 0, 0, 0, 703, 702, 1, 0, 0, 0, 704, 734, 1, 0,
		0, 0, 705, 706, 10, 10, 0, 0, 706, 707, 5, 118, 0, 0, 707, 733, 3, 126,
		63, 11, 708, 709, 10, 9, 0, 0, 709, 710, 7, 14, 0, 0, 710, 733, 3, 126,
		63, 9, 711, 712, 10, 8, 0, 0, 712, 713, 5, 113, 0, 0, 713, 733, 3, 126,
		63, 9, 714, 715, 10, 7, 0, 0, 715, 716, 7, 15, 0, 0, 716, 733, 3, 126,
		63, 8, 717, 718, 10, 6, 0, 0, 718, 719, 7, 16, 0, 0, 719, 733, 3, 126,
		63, 7, 720, 721, 10, 5, 0, 0, 721, 722, 7, 17, 0, 0, 722, 733, 3, 126,
		63, 6, 723, 724, 10, 4, 0, 0, 724, 725, 7, 18, 0, 0, 725, 733, 3, 126,
		63, 5, 726, 727, 10, 3, 0, 0, 727, 728, 5, 116, 0, 0, 728, 733, 3, 126,
		63, 4, 729, 730, 10, 2, 0, 0, 730, 731, 5, 121, 0, 0, 731, 733, 3, 126,
		63, 3, 732, 705, 1, 0, 0, 0, 732, 708, 1, 0, 0, 0, 732, 711, 1, 0, 0, 0,
		732, 714, 1, 0, 0, 0, 732, 717, 1, 0, 0, 0, 732, 720, 1, 0, 0, 0, 732,
		723, 1, 0, 0, 0, 732, 726, 1, 0, 0, 0, 732, 729, 1, 0, 0, 0, 733, 736,
		1, 0, 0, 0, 734, 732, 1, 0, 0, 0, 734, 735, 1, 0, 0, 0, 735, 127, 1, 0,
		0, 0, 736, 734, 1, 0, 0, 0, 737, 741, 3, 12, 6, 0, 738, 741, 3, 148, 74,
		0, 739, 741, 3, 130, 65, 0, 740, 737, 1, 0, 0, 0, 740, 738, 1, 0, 0, 0,
		740, 739, 1, 0, 0, 0, 741, 129, 1, 0, 0, 0, 742, 743, 3, 152, 76, 0, 743,
		758, 5, 110, 0, 0, 744, 747, 3, 126, 63, 0, 745, 747, 3, 160, 80, 0, 746,
		744, 1, 0, 0, 0, 746, 745, 1, 0, 0, 0, 747, 755, 1, 0, 0, 0, 748, 751,
		5, 102, 0, 0, 749, 752, 3, 126, 63, 0, 750, 752, 3, 160, 80, 0, 751, 749,
		1, 0, 0, 0, 751, 750, 1, 0, 0, 0, 752, 754, 1, 0, 0, 0, 753, 748, 1, 0,
		0, 0, 754, 757, 1, 0, 0, 0, 755, 753, 1, 0, 0, 0, 755, 756, 1, 0, 0, 0,
		756, 759, 1, 0, 0, 0, 757, 755, 1, 0, 0, 0, 758, 746, 1, 0, 0, 0, 758,
		759, 1, 0, 0, 0, 759, 760, 1, 0, 0, 0, 760, 761, 5, 120, 0, 0, 761, 131,
		1, 0, 0, 0, 762, 764, 3, 134, 67, 0, 763, 762, 1, 0, 0, 0, 764, 767, 1,
		0, 0, 0, 765, 763, 1, 0, 0, 0, 765, 766, 1, 0, 0, 0, 766, 133, 1, 0, 0,
		0, 767, 765, 1, 0, 0, 0, 768, 769, 3, 142, 71, 0, 769, 770, 5, 130, 0,
		0, 770, 814, 1, 0, 0, 0, 771, 772, 3, 144, 72, 0, 772, 773, 5, 130, 0,
		0, 773, 814, 1, 0, 0, 0, 774, 775, 3, 146, 73, 0, 775, 776, 5, 130, 0,
		0, 776, 814, 1, 0, 0, 0, 777, 778, 3, 158, 79, 0, 778, 779, 5, 130, 0,
		0, 779, 814, 1, 0, 0, 0, 780, 781, 3, 138, 69, 0, 781, 782, 5, 130, 0,
		0, 782, 814, 1, 0, 0, 0, 783, 784, 3, 140, 70, 0, 784, 785, 5, 130, 0,
		0, 785, 814, 1, 0, 0, 0, 786, 788, 3, 162, 81, 0, 787, 789, 5, 130, 0,
		0, 788, 787, 1, 0, 0, 0, 788, 789, 1, 0, 0, 0, 789, 814, 1, 0, 0, 0, 790,
		792, 3, 164, 82, 0, 791, 793, 5, 130, 0, 0, 792, 791, 1, 0, 0, 0, 792,
		793, 1, 0, 0, 0, 793, 814, 1, 0, 0, 0, 794, 796, 3, 170, 85, 0, 795, 797,
		5, 130, 0, 0, 796, 795, 1, 0, 0, 0, 796, 797, 1, 0, 0, 0, 797, 814, 1,
		0, 0, 0, 798, 800, 3, 172, 86, 0, 799, 801, 5, 130, 0, 0, 800, 799, 1,
		0, 0, 0, 800, 801, 1, 0, 0, 0, 801, 814, 1, 0, 0, 0, 802, 804, 3, 174,
		87, 0, 803, 805, 5, 130, 0, 0, 804, 803, 1, 0, 0, 0, 804, 805, 1, 0, 0,
		0, 805, 814, 1, 0, 0, 0, 806, 807, 3, 176, 88, 0, 807, 808, 5, 130, 0,
		0, 808, 814, 1, 0, 0, 0, 809, 810, 3, 178, 89, 0, 810, 811, 5, 130, 0,
		0, 811, 814, 1, 0, 0, 0, 812, 814, 3, 136, 68, 0, 813, 768, 1, 0, 0, 0,
		813, 771, 1, 0, 0, 0, 813, 774, 1, 0, 0, 0, 813, 777, 1, 0, 0, 0, 813,
		780, 1, 0, 0, 0, 813, 783, 1, 0, 0, 0, 813, 786, 1, 0, 0, 0, 813, 790,
		1, 0, 0, 0, 813, 794, 1, 0, 0, 0, 813, 798, 1, 0, 0, 0, 813, 802, 1, 0,
		0, 0, 813, 806, 1, 0, 0, 0, 813, 809, 1, 0, 0, 0, 813, 812, 1, 0, 0, 0,
		814, 135, 1, 0, 0, 0, 815, 816, 5, 130, 0, 0, 816, 137, 1, 0, 0, 0, 817,
		818, 5, 67, 0, 0, 818, 819, 5, 177, 0, 0, 819, 139, 1, 0, 0, 0, 820, 821,
		5, 177, 0, 0, 821, 822, 5, 159, 0, 0, 822, 141, 1, 0, 0, 0, 823, 824, 3,
		148, 74, 0, 824, 825, 7, 19, 0, 0, 825, 826, 3, 126, 63, 0, 826, 143, 1,
		0, 0, 0, 827, 830, 3, 148, 74, 0, 828, 829, 5, 99, 0, 0, 829, 831, 3, 148,
		74, 0, 830, 828, 1, 0, 0, 0, 831, 832, 1, 0, 0, 0, 832, 830, 1, 0, 0, 0,
		832, 833, 1, 0, 0, 0, 833, 834, 1, 0, 0, 0, 834, 835, 5, 99, 0, 0, 835,
		836, 3, 126, 63, 0, 836, 145, 1, 0, 0, 0, 837, 838, 3, 130, 65, 0, 838,
		147, 1, 0, 0, 0, 839, 842, 3, 156, 78, 0, 840, 842, 3, 152, 76, 0, 841,
		839, 1, 0, 0, 0, 841, 840, 1, 0, 0, 0, 842, 149, 1, 0, 0, 0, 843, 844,
		7, 20, 0, 0, 844, 151, 1, 0, 0, 0, 845, 851, 3, 150, 75, 0, 846, 848, 5,
		133, 0, 0, 847, 846, 1, 0, 0, 0, 848, 849, 1, 0, 0, 0, 849, 847, 1, 0,
		0, 0, 849, 850, 1, 0, 0, 0, 850, 852, 1, 0, 0, 0, 851, 847, 1, 0, 0, 0,
		851, 852, 1, 0, 0, 0, 852, 857, 1, 0, 0, 0, 853, 855, 3, 154, 77, 0, 854,
		856, 5, 133, 0, 0, 855, 854, 1, 0, 0, 0, 855, 856, 1, 0, 0, 0, 856, 858,
		1, 0, 0, 0, 857, 853, 1, 0, 0, 0, 857, 858, 1, 0, 0, 0, 858, 861, 1, 0,
		0, 0, 859, 860, 5, 132, 0, 0, 860, 862, 3, 152, 76, 0, 861, 859, 1, 0,
		0, 0, 861, 862, 1, 0, 0, 0, 862, 153, 1, 0, 0, 0, 863, 864, 5, 107, 0,
		0, 864, 869, 3, 126, 63, 0, 865, 866, 5, 102, 0, 0, 866, 868, 3, 126, 63,
		0, 867, 865, 1, 0, 0, 0, 868, 871, 1, 0, 0, 0, 869, 867, 1, 0, 0, 0, 869,
		870, 1, 0, 0, 0, 870, 872, 1, 0, 0, 0, 871, 869, 1, 0, 0, 0, 872, 873,
		5, 119, 0, 0, 873, 155, 1, 0, 0, 0, 874, 875, 5, 181, 0, 0, 875, 157, 1,
		0, 0, 0, 876, 877, 5, 78, 0, 0, 877, 159, 1, 0, 0, 0, 878, 879, 5, 177,
		0, 0, 879, 880, 5, 98, 0, 0, 880, 887, 3, 148, 74, 0, 881, 882, 5, 177,
		0, 0, 882, 884, 5, 99, 0, 0, 883, 881, 1, 0, 0, 0, 883, 884, 1, 0, 0, 0,
		884, 885, 1, 0, 0, 0, 885, 887, 3, 126, 63, 0, 886, 878, 1, 0, 0, 0, 886,
		883, 1, 0, 0, 0, 887, 161, 1, 0, 0, 0, 888, 889, 5, 65, 0, 0, 889, 890,
		3, 126, 63, 0, 890, 891, 5, 83, 0, 0, 891, 899, 3, 132, 66, 0, 892, 893,
		5, 45, 0, 0, 893, 894, 3, 126, 63, 0, 894, 895, 5, 83, 0, 0, 895, 896,
		3, 132, 66, 0, 896, 898, 1, 0, 0, 0, 897, 892, 1, 0, 0, 0, 898, 901, 1,
		0, 0, 0, 899, 897, 1, 0, 0, 0, 899, 900, 1, 0, 0, 0, 900, 904, 1, 0, 0,
		0, 901, 899, 1, 0, 0, 0, 902, 903, 5, 44, 0, 0, 903, 905, 3, 132, 66, 0,
		904, 902, 1, 0, 0, 0, 904, 905, 1, 0, 0, 0, 905, 906, 1, 0, 0, 0, 906,
		908, 5, 52, 0, 0, 907, 909, 5, 130, 0, 0, 908, 907, 1, 0, 0, 0, 908, 909,
		1, 0, 0, 0, 909, 163, 1, 0, 0, 0, 910, 911, 5, 37, 0, 0, 911, 912, 3, 126,
		63, 0, 912, 914, 5, 70, 0, 0, 913, 915, 3, 166, 83, 0, 914, 913, 1, 0,
		0, 0, 915, 916, 1, 0, 0, 0, 916, 914, 1, 0, 0, 0, 916, 917, 1, 0, 0, 0,
		917, 923, 1, 0, 0, 0, 918, 920, 5, 44, 0, 0, 919, 921, 5, 159, 0, 0, 920,
		919, 1, 0, 0, 0, 920, 921, 1, 0, 0, 0, 921, 922, 1, 0, 0, 0, 922, 924,
		3, 132, 66, 0, 923, 918, 1, 0, 0, 0, 923, 924, 1, 0, 0, 0, 924, 925, 1,
		0, 0, 0, 925, 926, 5, 47, 0, 0, 926, 165, 1, 0, 0, 0, 927, 932, 3, 168,
		84, 0, 928, 929, 5, 102, 0, 0, 929, 931, 3, 168, 84, 0, 930, 928, 1, 0,
		0, 0, 931, 934, 1, 0, 0, 0, 932, 930, 1, 0, 0, 0, 932, 933, 1, 0, 0, 0,
		933, 935, 1, 0, 0, 0, 934, 932, 1, 0, 0, 0, 935, 936, 5, 159, 0, 0, 936,
		937, 3, 132, 66, 0, 937, 167, 1, 0, 0, 0, 938, 943, 3, 64, 32, 0, 939,
		943, 3, 16, 8, 0, 940, 943, 3, 14, 7, 0, 941, 943, 5, 177, 0, 0, 942, 938,
		1, 0, 0, 0, 942, 939, 1, 0, 0, 0, 942, 940, 1, 0, 0, 0, 942, 941, 1, 0,
		0, 0, 943, 169, 1, 0, 0, 0, 944, 945, 5, 61, 0, 0, 945, 946, 5, 177, 0,
		0, 946, 947, 5, 99, 0, 0, 947, 948, 3, 126, 63, 0, 948, 949, 5, 84, 0,
		0, 949, 952, 3, 126, 63, 0, 950, 951, 5, 36, 0, 0, 951, 953, 3, 126, 63,
		0, 952, 950, 1, 0, 0, 0, 952, 953, 1, 0, 0, 0, 953, 954, 1, 0, 0, 0, 954,
		955, 5, 42, 0, 0, 955, 956, 3, 132, 66, 0, 956, 957, 5, 49, 0, 0, 957,
		171, 1, 0, 0, 0, 958, 959, 5, 95, 0, 0, 959, 960, 3, 126, 63, 0, 960, 961,
		5, 42, 0, 0, 961, 962, 3, 132, 66, 0, 962, 963, 5, 59, 0, 0, 963, 173,
		1, 0, 0, 0, 964, 965, 5, 75, 0, 0, 965, 966, 3, 132, 66, 0, 966, 967, 5,
		86, 0, 0, 967, 968, 3, 126, 63, 0, 968, 969, 5, 54, 0, 0, 969, 175, 1,
		0, 0, 0, 970, 971, 5, 60, 0, 0, 971, 177, 1, 0, 0, 0, 972, 973, 5, 40,
		0, 0, 973, 179, 1, 0, 0, 0, 974, 976, 3, 182, 91, 0, 975, 974, 1, 0, 0,
		0, 976, 977, 1, 0, 0, 0, 977, 975, 1, 0, 0, 0, 977, 978, 1, 0, 0, 0, 978,
		181, 1, 0, 0, 0, 979, 984, 3, 184, 92, 0, 980, 983, 3, 186, 93, 0, 981,
		983, 3, 192, 96, 0, 982, 980, 1, 0, 0, 0, 982, 981, 1, 0, 0, 0, 983, 986,
		1, 0, 0, 0, 984, 982, 1, 0, 0, 0, 984, 985, 1, 0, 0, 0, 985, 183, 1, 0,
		0, 0, 986, 984, 1, 0, 0, 0, 987, 988, 5, 158, 0, 0, 988, 989, 5, 177, 0,
		0, 989, 995, 5, 159, 0, 0, 990, 991, 3, 188, 94, 0, 991, 992, 5, 130, 0,
		0, 992, 994, 1, 0, 0, 0, 993, 990, 1, 0, 0, 0, 994, 997, 1, 0, 0, 0, 995,
		993, 1, 0, 0, 0, 995, 996, 1, 0, 0, 0, 996, 998, 1, 0, 0, 0, 997, 995,
		1, 0, 0, 0, 998, 999, 5, 157, 0, 0, 999, 185, 1, 0, 0, 0, 1000, 1001, 5,
		156, 0, 0, 1001, 1003, 5, 177, 0, 0, 1002, 1004, 5, 159, 0, 0, 1003, 1002,
		1, 0, 0, 0, 1003, 1004, 1, 0, 0, 0, 1004, 1010, 1, 0, 0, 0, 1005, 1006,
		3, 188, 94, 0, 1006, 1007, 5, 130, 0, 0, 1007, 1009, 1, 0, 0, 0, 1008,
		1005, 1, 0, 0, 0, 1009, 1012, 1, 0, 0, 0, 1010, 1008, 1, 0, 0, 0, 1010,
		1011, 1, 0, 0, 0, 1011, 1013, 1, 0, 0, 0, 1012, 1010, 1, 0, 0, 0, 1013,
		1014, 5, 157, 0, 0, 1014, 187, 1, 0, 0, 0, 1015, 1016, 3, 152, 76, 0, 1016,
		1018, 5, 110, 0, 0, 1017, 1019, 3, 190, 95, 0, 1018, 1017, 1, 0, 0, 0,
		1018, 1019, 1, 0, 0, 0, 1019, 1024, 1, 0, 0, 0, 1020, 1021, 5, 102, 0,
		0, 1021, 1023, 5, 177, 0, 0, 1022, 1020, 1, 0, 0, 0, 1023, 1026, 1, 0,
		0, 0, 1024, 1022, 1, 0, 0, 0, 1024, 1025, 1, 0, 0, 0, 1025, 1027, 1, 0,
		0, 0, 1026, 1024, 1, 0, 0, 0, 1027, 1028, 5, 120, 0, 0, 1028, 189, 1, 0,
		0, 0, 1029, 1032, 5, 177, 0, 0, 1030, 1031, 5, 102, 0, 0, 1031, 1033, 3,
		126, 63, 0, 1032, 1030, 1, 0, 0, 0, 1032, 1033, 1, 0, 0, 0, 1033, 191,
		1, 0, 0, 0, 1034, 1036, 5, 164, 0, 0, 1035, 1037, 5, 177, 0, 0, 1036, 1035,
		1, 0, 0, 0, 1036, 1037, 1, 0, 0, 0, 1037, 1043, 1, 0, 0, 0, 1038, 1039,
		5, 110, 0, 0, 1039, 1040, 5, 71, 0, 0, 1040, 1041, 5, 99, 0, 0, 1041, 1042,
		5, 167, 0, 0, 1042, 1044, 5, 120, 0, 0, 1043, 1038, 1, 0, 0, 0, 1043, 1044,
		1, 0, 0, 0, 1044, 1045, 1, 0, 0, 0, 1045, 1046, 5, 162, 0, 0, 1046, 1047,
		3, 194, 97, 0, 1047, 1048, 5, 84, 0, 0, 1048, 1049, 3, 194, 97, 0, 1049,
		1050, 3, 196, 98, 0, 1050, 1051, 5, 163, 0, 0, 1051, 193, 1, 0, 0, 0, 1052,
		1064, 5, 177, 0, 0, 1053, 1054, 5, 110, 0, 0, 1054, 1059, 5, 177, 0, 0,
		1055, 1056, 5, 102, 0, 0, 1056, 1058, 5, 177, 0, 0, 1057, 1055, 1, 0, 0,
		0, 1058, 1061, 1, 0, 0, 0, 1059, 1057, 1, 0, 0, 0, 1059, 1060, 1, 0, 0,
		0, 1060, 1062, 1, 0, 0, 0, 1061, 1059, 1, 0, 0, 0, 1062, 1064, 5, 120,
		0, 0, 1063, 1052, 1, 0, 0, 0, 1063, 1053, 1, 0, 0, 0, 1064, 195, 1, 0,
		0, 0, 1065, 1066, 5, 99, 0, 0, 1066, 1067, 3, 126, 63, 0, 1067, 1068, 5,
		130, 0, 0, 1068, 197, 1, 0, 0, 0, 1069, 1070, 5, 160, 0, 0, 1070, 1072,
		5, 177, 0, 0, 1071, 1073, 5, 159, 0, 0, 1072, 1071, 1, 0, 0, 0, 1072, 1073,
		1, 0, 0, 0, 1073, 1074, 1, 0, 0, 0, 1074, 1075, 3, 104, 52, 0, 1075, 1076,
		5, 161, 0, 0, 1076, 199, 1, 0, 0, 0, 1077, 1079, 5, 222, 0, 0, 1078, 1077,
		1, 0, 0, 0, 1078, 1079, 1, 0, 0, 0, 1079, 1081, 1, 0, 0, 0, 1080, 1082,
		3, 202, 101, 0, 1081, 1080, 1, 0, 0, 0, 1082, 1083, 1, 0, 0, 0, 1083, 1081,
		1, 0, 0, 0, 1083, 1084, 1, 0, 0, 0, 1084, 1086, 1, 0, 0, 0, 1085, 1087,
		5, 222, 0, 0, 1086, 1085, 1, 0, 0, 0, 1086, 1087, 1, 0, 0, 0, 1087, 201,
		1, 0, 0, 0, 1088, 1089, 5, 177, 0, 0, 1089, 1091, 5, 159, 0, 0, 1090, 1088,
		1, 0, 0, 0, 1090, 1091, 1, 0, 0, 0, 1091, 1093, 1, 0, 0, 0, 1092, 1094,
		5, 222, 0, 0, 1093, 1092, 1, 0, 0, 0, 1093, 1094, 1, 0, 0, 0, 1094, 1095,
		1, 0, 0, 0, 1095, 1096, 3, 206, 103, 0, 1096, 1097, 7, 21, 0, 0, 1097,
		203, 1, 0, 0, 0, 1098, 1103, 3, 210, 105, 0, 1099, 1103, 3, 212, 106, 0,
		1100, 1103, 3, 214, 107, 0, 1101, 1103, 3, 216, 108, 0, 1102, 1098, 1,
		0, 0, 0, 1102, 1099, 1, 0, 0, 0, 1102, 1100, 1, 0, 0, 0, 1102, 1101, 1,
		0, 0, 0, 1103, 205, 1, 0, 0, 0, 1104, 1111, 3, 210, 105, 0, 1105, 1111,
		3, 212, 106, 0, 1106, 1111, 3, 218, 109, 0, 1107, 1111, 3, 220, 110, 0,
		1108, 1111, 3, 214, 107, 0, 1109, 1111, 3, 216, 108, 0, 1110, 1104, 1,
		0, 0, 0, 1110, 1105, 1, 0, 0, 0, 1110, 1106, 1, 0, 0, 0, 1110, 1107, 1,
		0, 0, 0, 1110, 1108, 1, 0, 0, 0, 1110, 1109, 1, 0, 0, 0, 1111, 207, 1,
		0, 0, 0, 1112, 1113, 3, 204, 102, 0, 1113, 1114, 5, 222, 0, 0, 1114, 1116,
		1, 0, 0, 0, 1115, 1112, 1, 0, 0, 0, 1116, 1117, 1, 0, 0, 0, 1117, 1115,
		1, 0, 0, 0, 1117, 1118, 1, 0, 0, 0, 1118, 209, 1, 0, 0, 0, 1119, 1121,
		3, 228, 114, 0, 1120, 1122, 3, 222, 111, 0, 1121, 1120, 1, 0, 0, 0, 1121,
		1122, 1, 0, 0, 0, 1122, 211, 1, 0, 0, 0, 1123, 1135, 3, 230, 115, 0, 1124,
		1126, 5, 110, 0, 0, 1125, 1127, 3, 222, 111, 0, 1126, 1125, 1, 0, 0, 0,
		1126, 1127, 1, 0, 0, 0, 1127, 1128, 1, 0, 0, 0, 1128, 1129, 5, 222, 0,
		0, 1129, 1130, 3, 208, 104, 0, 1130, 1131, 5, 120, 0, 0, 1131, 1136, 1,
		0, 0, 0, 1132, 1134, 3, 222, 111, 0, 1133, 1132, 1, 0, 0, 0, 1133, 1134,
		1, 0, 0, 0, 1134, 1136, 1, 0, 0, 0, 1135, 1124, 1, 0, 0, 0, 1135, 1133,
		1, 0, 0, 0, 1136, 213, 1, 0, 0, 0, 1137, 1143, 3, 152, 76, 0, 1138, 1141,
		3, 222, 111, 0, 1139, 1140, 5, 102, 0, 0, 1140, 1142, 3, 222, 111, 0, 1141,
		1139, 1, 0, 0, 0, 1141, 1142, 1, 0, 0, 0, 1142, 1144, 1, 0, 0, 0, 1143,
		1138, 1, 0, 0, 0, 1143, 1144, 1, 0, 0, 0, 1144, 215, 1, 0, 0, 0, 1145,
		1146, 3, 152, 76, 0, 1146, 1147, 5, 110, 0, 0, 1147, 1156, 5, 222, 0, 0,
		1148, 1153, 3, 232, 116, 0, 1149, 1150, 5, 102, 0, 0, 1150, 1152, 3, 232,
		116, 0, 1151, 1149, 1, 0, 0, 0, 1152, 1155, 1, 0, 0, 0, 1153, 1151, 1,
		0, 0, 0, 1153, 1154, 1, 0, 0, 0, 1154, 1157, 1, 0, 0, 0, 1155, 1153, 1,
		0, 0, 0, 1156, 1148, 1, 0, 0, 0, 1156, 1157, 1, 0, 0, 0, 1157, 1158, 1,
		0, 0, 0, 1158, 1159, 5, 120, 0, 0, 1159, 217, 1, 0, 0, 0, 1160, 1161, 3,
		224, 112, 0, 1161, 1162, 5, 177, 0, 0, 1162, 219, 1, 0, 0, 0, 1163, 1164,
		3, 226, 113, 0, 1164, 1188, 3, 152, 76, 0, 1165, 1166, 5, 110, 0, 0, 1166,
		1175, 5, 222, 0, 0, 1167, 1172, 3, 232, 116, 0, 1168, 1169, 5, 102, 0,
		0, 1169, 1171, 3, 232, 116, 0, 1170, 1168, 1, 0, 0, 0, 1171, 1174, 1, 0,
		0, 0, 1172, 1170, 1, 0, 0, 0, 1172, 1173, 1, 0, 0, 0, 1173, 1176, 1, 0,
		0, 0, 1174, 1172, 1, 0, 0, 0, 1175, 1167, 1, 0, 0, 0, 1175, 1176, 1, 0,
		0, 0, 1176, 1177, 1, 0, 0, 0, 1177, 1189, 5, 120, 0, 0, 1178, 1183, 3,
		222, 111, 0, 1179, 1180, 5, 102, 0, 0, 1180, 1182, 3, 222, 111, 0, 1181,
		1179, 1, 0, 0, 0, 1182, 1185, 1, 0, 0, 0, 1183, 1181, 1, 0, 0, 0, 1183,
		1184, 1, 0, 0, 0, 1184, 1187, 1, 0, 0, 0, 1185, 1183, 1, 0, 0, 0, 1186,
		1178, 1, 0, 0, 0, 1186, 1187, 1, 0, 0, 0, 1187, 1189, 1, 0, 0, 0, 1188,
		1165, 1, 0, 0, 0, 1188, 1186, 1, 0, 0, 0, 1189, 221, 1, 0, 0, 0, 1190,
		1193, 3, 12, 6, 0, 1191, 1193, 3, 152, 76, 0, 1192, 1190, 1, 0, 0, 0, 1192,
		1191, 1, 0, 0, 0, 1193, 223, 1, 0, 0, 0, 1194, 1195, 7, 22, 0, 0, 1195,
		225, 1, 0, 0, 0, 1196, 1197, 7, 23, 0, 0, 1197, 227, 1, 0, 0, 0, 1198,
		1199, 7, 24, 0, 0, 1199, 229, 1, 0, 0, 0, 1200, 1201, 7, 25, 0, 0, 1201,
		231, 1, 0, 0, 0, 1202, 1204, 5, 114, 0, 0, 1203, 1202, 1, 0, 0, 0, 1203,
		1204, 1, 0, 0, 0, 1204, 1205, 1, 0, 0, 0, 1205, 1206, 5, 177, 0, 0, 1206,
		1207, 5, 98, 0, 0, 1207, 1214, 3, 222, 111, 0, 1208, 1209, 5, 177, 0, 0,
		1209, 1211, 5, 99, 0, 0, 1210, 1208, 1, 0, 0, 0, 1210, 1211, 1, 0, 0, 0,
		1211, 1212, 1, 0, 0, 0, 1212, 1214, 5, 177, 0, 0, 1213, 1203, 1, 0, 0,
		0, 1213, 1210, 1, 0, 0, 0, 1214, 233, 1, 0, 0, 0, 131, 237, 242, 248, 259,
		266, 275, 288, 301, 306, 328, 332, 343, 347, 351, 373, 385, 388, 392, 398,
		413, 419, 423, 436, 443, 445, 453, 457, 465, 469, 474, 484, 502, 512, 527,
		535, 544, 558, 563, 566, 572, 577, 581, 588, 598, 606, 614, 619, 623, 632,
		637, 640, 643, 649, 651, 663, 673, 682, 688, 703, 732, 734, 740, 746, 751,
		755, 758, 765, 788, 792, 796, 800, 804, 813, 832, 841, 849, 851, 855, 857,
		861, 869, 883, 886, 899, 904, 908, 916, 920, 923, 932, 942, 952, 977, 982,
		984, 995, 1003, 1010, 1018, 1024, 1032, 1036, 1043, 1059, 1063, 1072, 1078,
		1083, 1086, 1090, 1093, 1102, 1110, 1117, 1121, 1126, 1133, 1135, 1141,
		1143, 1153, 1156, 1172, 1175, 1183, 1186, 1188, 1192, 1203, 1210, 1213,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// stParserInit initializes any static state used to implement stParser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewstParser(). You can call this function if you wish to initialize the static state ahead
// of time.
func StParserInit() {
	staticData := &StParserParserStaticData
	staticData.once.Do(stparserParserInit)
}

// NewstParser produces a new parser instance for the optional input antlr.TokenStream.
func NewstParser(input antlr.TokenStream) *stParser {
	StParserInit()
	this := new(stParser)
	this.BaseParser = antlr.NewBaseParser(input)
	staticData := &StParserParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	this.RuleNames = staticData.RuleNames
	this.LiteralNames = staticData.LiteralNames
	this.SymbolicNames = staticData.SymbolicNames
	this.GrammarFileName = "stParser.g4"

	return this
}

// stParser tokens.
const (
	stParserEOF                      = antlr.TokenEOF
	stParserIL_CODE                  = 1
	stParserANY                      = 2
	stParserANY_BIT                  = 3
	stParserANY_DATE                 = 4
	stParserANY_DERIVED              = 5
	stParserANY_ELEMENTARY           = 6
	stParserANY_INT                  = 7
	stParserANY_MAGNITUDE            = 8
	stParserANY_NUM                  = 9
	stParserANY_REAL                 = 10
	stParserANY_STRING               = 11
	stParserARRAY                    = 12
	stParserBOOL                     = 13
	stParserBYTE                     = 14
	stParserDATE_AND_TIME            = 15
	stParserDINT                     = 16
	stParserDWORD                    = 17
	stParserINT                      = 18
	stParserLINT                     = 19
	stParserLREAL                    = 20
	stParserLWORD                    = 21
	stParserREAL                     = 22
	stParserSINT                     = 23
	stParserSTRING                   = 24
	stParserTIME                     = 25
	stParserTIME_OF_DAY              = 26
	stParserUDINT                    = 27
	stParserUINT                     = 28
	stParserULINT                    = 29
	stParserUSINT                    = 30
	stParserWORD                     = 31
	stParserWSTRING                  = 32
	stParserPOINTER                  = 33
	stParserVAR_OUTPUT               = 34
	stParserAT                       = 35
	stParserBY                       = 36
	stParserCASE                     = 37
	stParserCONFIGURATION            = 38
	stParserCONSTANT                 = 39
	stParserCONTINUE                 = 40
	stParserDATE                     = 41
	stParserDO                       = 42
	stParserDT                       = 43
	stParserELSE                     = 44
	stParserELSEIF                   = 45
	stParserUNDERSCORE               = 46
	stParserEND_CASE                 = 47
	stParserEND_CONFIGURATION        = 48
	stParserEND_FOR                  = 49
	stParserEND_FUNCTION             = 50
	stParserEND_FUNCTION_BLOCK       = 51
	stParserEND_IF                   = 52
	stParserEND_PROGRAM              = 53
	stParserEND_REPEAT               = 54
	stParserEND_RESOURCE             = 55
	stParserEND_STRUCT               = 56
	stParserEND_TYPE                 = 57
	stParserEND_VAR                  = 58
	stParserEND_WHILE                = 59
	stParserEXIT                     = 60
	stParserFOR                      = 61
	stParserFUNCTION                 = 62
	stParserFUNCTION_BLOCK           = 63
	stParserF_EDGE                   = 64
	stParserIF                       = 65
	stParserINTERVAL                 = 66
	stParserJMP                      = 67
	stParserNIL                      = 68
	stParserNON_RETAIN               = 69
	stParserOF                       = 70
	stParserPRIORITY                 = 71
	stParserPROGRAM                  = 72
	stParserREAD_ONLY                = 73
	stParserREAD_WRITE               = 74
	stParserREPEAT                   = 75
	stParserRESOURCE                 = 76
	stParserRETAIN                   = 77
	stParserRETURN                   = 78
	stParserR_EDGE                   = 79
	stParserSINGLE                   = 80
	stParserSTRUCT                   = 81
	stParserTASK                     = 82
	stParserTHEN                     = 83
	stParserTO                       = 84
	stParserTYPE                     = 85
	stParserUNTIL                    = 86
	stParserVAR                      = 87
	stParserVAR_ACCESS               = 88
	stParserVAR_CONFIG               = 89
	stParserVAR_EXTERNAL             = 90
	stParserVAR_GLOBAL               = 91
	stParserVAR_INPUT                = 92
	stParserVAR_IN_OUT               = 93
	stParserVAR_TEMP                 = 94
	stParserWHILE                    = 95
	stParserWITH                     = 96
	stParserAND                      = 97
	stParserARROW_RIGHT              = 98
	stParserASSIGN                   = 99
	stParserRASSIGN                  = 100
	stParserASSIGN_ATTEMPT           = 101
	stParserCOMMA                    = 102
	stParserDIV                      = 103
	stParserEQUALS                   = 104
	stParserGREATER_EQUALS           = 105
	stParserGREATER_THAN             = 106
	stParserLBRACKET                 = 107
	stParserLESS_EQUALS              = 108
	stParserLESS_THAN                = 109
	stParserLPAREN                   = 110
	stParserMINUS                    = 111
	stParserMOD                      = 112
	stParserMULT                     = 113
	stParserNOT                      = 114
	stParserNOT_EQUALS               = 115
	stParserOR                       = 116
	stParserPLUS                     = 117
	stParserPOWER                    = 118
	stParserRBRACKET                 = 119
	stParserRPAREN                   = 120
	stParserXOR                      = 121
	stParserINCREAE                  = 122
	stParserDECREASE                 = 123
	stParserNAMESPACE                = 124
	stParserEND_NAMESPACE            = 125
	stParserUSING                    = 126
	stParserPERSISTENT               = 127
	stParserAMPERSAND                = 128
	stParserNULL                     = 129
	stParserSEMICOLON                = 130
	stParserSQUOTE                   = 131
	stParserDOT                      = 132
	stParserCARET                    = 133
	stParserREF                      = 134
	stParserRANGE                    = 135
	stParserCAST_LITERAL             = 136
	stParserINTERFACE                = 137
	stParserEND_INTERFACE            = 138
	stParserMETHOD                   = 139
	stParserEND_METHOD               = 140
	stParserCLASS                    = 141
	stParserEND_CLASS                = 142
	stParserOVERRIDE                 = 143
	stParserFINAL                    = 144
	stParserABSTRACT                 = 145
	stParserIMPLEMENTS               = 146
	stParserPUBLIC                   = 147
	stParserINTERNAL                 = 148
	stParserPROTECTED                = 149
	stParserPRIVATE                  = 150
	stParserSUPER                    = 151
	stParserTHIS                     = 152
	stParserEXTENDS                  = 153
	stParserREF_TO                   = 154
	stParserON                       = 155
	stParserSTEP                     = 156
	stParserEND_STEP                 = 157
	stParserINITIAL_STEP             = 158
	stParserCOLON                    = 159
	stParserACTION                   = 160
	stParserEND_ACTION               = 161
	stParserFROM                     = 162
	stParserEND_TRANSITION           = 163
	stParserTRANSITION               = 164
	stParserDCOLON                   = 165
	stParserRIGHTARROW               = 166
	stParserINTEGER_LITERAL          = 167
	stParserBITS_LITERAL             = 168
	stParserREAL_LITERAL             = 169
	stParserTIME_LITERAL             = 170
	stParserDATE_LITERAL             = 171
	stParserTOD_LITERAL              = 172
	stParserDATETIME                 = 173
	stParserINCOMPL_LOCATION_LITERAL = 174
	stParserSTRING_LITERAL           = 175
	stParserWSTRING_LITERAL          = 176
	stParserIDENTIFIER               = 177
	stParserWS                       = 178
	stParserCOMMENT                  = 179
	stParserLINE_COMMENT             = 180
	stParserDIRECT_VARIABLE_LITERAL  = 181
	stParserERROR_CHAR               = 182
	stParserIL_ADD                   = 183
	stParserIL_ANDN                  = 184
	stParserIL_CAL                   = 185
	stParserIL_CALC                  = 186
	stParserIL_CALCN                 = 187
	stParserIL_CD                    = 188
	stParserIL_CLK                   = 189
	stParserIL_CU                    = 190
	stParserIL_DIV                   = 191
	stParserIL_EQ                    = 192
	stParserIL_GE                    = 193
	stParserIL_GT                    = 194
	stParserIL_IN                    = 195
	stParserIL_JMP                   = 196
	stParserIL_JMPC                  = 197
	stParserIL_JMPCN                 = 198
	stParserIL_LD                    = 199
	stParserIL_LDN                   = 200
	stParserIL_LE                    = 201
	stParserIL_LT                    = 202
	stParserIL_MOD                   = 203
	stParserIL_MUL                   = 204
	stParserIL_NE                    = 205
	stParserIL_NOT                   = 206
	stParserIL_ORN                   = 207
	stParserIL_PT                    = 208
	stParserIL_PV                    = 209
	stParserIL_R1                    = 210
	stParserIL_R                     = 211
	stParserIL_RET                   = 212
	stParserIL_RETC                  = 213
	stParserIL_RETCN                 = 214
	stParserIL_S1                    = 215
	stParserIL_S                     = 216
	stParserIL_ST                    = 217
	stParserIL_STN                   = 218
	stParserIL_STQ                   = 219
	stParserIL_SUB                   = 220
	stParserIL_XORN                  = 221
	stParserEOL                      = 222
	stParserIL_OR                    = 223
)

// stParser rules.
const (
	stParserRULE_start                            = 0
	stParserRULE_namespace_declaration            = 1
	stParserRULE_namespace_elements               = 2
	stParserRULE_full_qualified_identifier        = 3
	stParserRULE_using_directive                  = 4
	stParserRULE_library_element_declaration      = 5
	stParserRULE_constant                         = 6
	stParserRULE_cast                             = 7
	stParserRULE_integer                          = 8
	stParserRULE_bits                             = 9
	stParserRULE_real                             = 10
	stParserRULE_string                           = 11
	stParserRULE_time                             = 12
	stParserRULE_timeofday                        = 13
	stParserRULE_date                             = 14
	stParserRULE_datetime                         = 15
	stParserRULE_ref_null                         = 16
	stParserRULE_data_type_name                   = 17
	stParserRULE_non_generic_type_name            = 18
	stParserRULE_elementary_type_name             = 19
	stParserRULE_numeric_type_name                = 20
	stParserRULE_integer_type_name                = 21
	stParserRULE_signed_integer_type_name         = 22
	stParserRULE_unsigned_integer_type_name       = 23
	stParserRULE_real_type_name                   = 24
	stParserRULE_date_type_name                   = 25
	stParserRULE_bit_string_type_name             = 26
	stParserRULE_generic_type_name                = 27
	stParserRULE_data_type_declaration            = 28
	stParserRULE_type_declaration                 = 29
	stParserRULE_initializations                  = 30
	stParserRULE_subrange_spec_init               = 31
	stParserRULE_subrange                         = 32
	stParserRULE_enumerated_specification         = 33
	stParserRULE_array_specification              = 34
	stParserRULE_array_initialization             = 35
	stParserRULE_array_initial_elements           = 36
	stParserRULE_array_initial_element            = 37
	stParserRULE_structure_declaration            = 38
	stParserRULE_name                             = 39
	stParserRULE_structure_initialization         = 40
	stParserRULE_string_type_declaration          = 41
	stParserRULE_reference_specification          = 42
	stParserRULE_reference_value                  = 43
	stParserRULE_identifier_list                  = 44
	stParserRULE_function_declaration             = 45
	stParserRULE_var_decls                        = 46
	stParserRULE_var_decl                         = 47
	stParserRULE_var_decl_inner                   = 48
	stParserRULE_variable_keyword                 = 49
	stParserRULE_access_specifier                 = 50
	stParserRULE_function_block_declaration       = 51
	stParserRULE_body                             = 52
	stParserRULE_funcBody                         = 53
	stParserRULE_interface_declaration            = 54
	stParserRULE_class_declaration                = 55
	stParserRULE_methods                          = 56
	stParserRULE_method                           = 57
	stParserRULE_program_declaration              = 58
	stParserRULE_global_variable_list_declaration = 59
	stParserRULE_stl_list                         = 60
	stParserRULE_stl_expression                   = 61
	stParserRULE_stl_call                         = 62
	stParserRULE_expression                       = 63
	stParserRULE_primary_expression               = 64
	stParserRULE_invocation                       = 65
	stParserRULE_statement_list                   = 66
	stParserRULE_statement                        = 67
	stParserRULE_empty_statement                  = 68
	stParserRULE_jump_statement                   = 69
	stParserRULE_label_statement                  = 70
	stParserRULE_assignment_statement             = 71
	stParserRULE_mult_assignment_statement        = 72
	stParserRULE_invocation_statement             = 73
	stParserRULE_variable                         = 74
	stParserRULE_variable_names                   = 75
	stParserRULE_symbolic_variable                = 76
	stParserRULE_subscript_list                   = 77
	stParserRULE_direct_variable                  = 78
	stParserRULE_return_statement                 = 79
	stParserRULE_param_assignment                 = 80
	stParserRULE_if_statement                     = 81
	stParserRULE_case_statement                   = 82
	stParserRULE_case_entry                       = 83
	stParserRULE_case_condition                   = 84
	stParserRULE_for_statement                    = 85
	stParserRULE_while_statement                  = 86
	stParserRULE_repeat_statement                 = 87
	stParserRULE_exit_statement                   = 88
	stParserRULE_continue_statement               = 89
	stParserRULE_sfc                              = 90
	stParserRULE_sfc_network                      = 91
	stParserRULE_init_step                        = 92
	stParserRULE_step                             = 93
	stParserRULE_action_association               = 94
	stParserRULE_actionQualifier                  = 95
	stParserRULE_transition                       = 96
	stParserRULE_steps                            = 97
	stParserRULE_transitionCond                   = 98
	stParserRULE_action                           = 99
	stParserRULE_ilBody                           = 100
	stParserRULE_ilInstruction                    = 101
	stParserRULE_ilSInstr                         = 102
	stParserRULE_ilInstr                          = 103
	stParserRULE_ilSInstrList                     = 104
	stParserRULE_ilSimple                         = 105
	stParserRULE_ilExpr                           = 106
	stParserRULE_ilFunctionCall                   = 107
	stParserRULE_ilFormalFunctionCall             = 108
	stParserRULE_ilJump                           = 109
	stParserRULE_ilCall                           = 110
	stParserRULE_ilOperand                        = 111
	stParserRULE_jump_op                          = 112
	stParserRULE_call_op                          = 113
	stParserRULE_simple_op                        = 114
	stParserRULE_exprOperator                     = 115
	stParserRULE_il_param_assignment              = 116
)

// IStartContext is an interface to support dynamic dispatch.
type IStartContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllLibrary_element_declaration() []ILibrary_element_declarationContext
	Library_element_declaration(i int) ILibrary_element_declarationContext

	// IsStartContext differentiates from other interfaces.
	IsStartContext()
}

type StartContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStartContext() *StartContext {
	var p = new(StartContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_start
	return p
}

func InitEmptyStartContext(p *StartContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_start
}

func (*StartContext) IsStartContext() {}

func NewStartContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StartContext {
	var p = new(StartContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_start

	return p
}

func (s *StartContext) GetParser() antlr.Parser { return s.parser }

func (s *StartContext) AllLibrary_element_declaration() []ILibrary_element_declarationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ILibrary_element_declarationContext); ok {
			len++
		}
	}

	tst := make([]ILibrary_element_declarationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ILibrary_element_declarationContext); ok {
			tst[i] = t.(ILibrary_element_declarationContext)
			i++
		}
	}

	return tst
}

func (s *StartContext) Library_element_declaration(i int) ILibrary_element_declarationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILibrary_element_declarationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILibrary_element_declarationContext)
}

func (s *StartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StartContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterStart(s)
	}
}

func (s *StartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitStart(s)
	}
}

func (p *stParser) Start_() (localctx IStartContext) {
	localctx = NewStartContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, stParserRULE_start)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(237)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64((_la-62)) & ^0x3f) == 0 && ((int64(1)<<(_la-62))&4611686018972648451) != 0) || _la == stParserINTERFACE || _la == stParserCLASS {
		{
			p.SetState(234)
			p.Library_element_declaration()
		}

		p.SetState(239)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INamespace_declarationContext is an interface to support dynamic dispatch.
type INamespace_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NAMESPACE() antlr.TerminalNode
	Full_qualified_identifier() IFull_qualified_identifierContext
	Namespace_elements() INamespace_elementsContext
	INTERNAL() antlr.TerminalNode
	AllUsing_directive() []IUsing_directiveContext
	Using_directive(i int) IUsing_directiveContext

	// IsNamespace_declarationContext differentiates from other interfaces.
	IsNamespace_declarationContext()
}

type Namespace_declarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespace_declarationContext() *Namespace_declarationContext {
	var p = new(Namespace_declarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_namespace_declaration
	return p
}

func InitEmptyNamespace_declarationContext(p *Namespace_declarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_namespace_declaration
}

func (*Namespace_declarationContext) IsNamespace_declarationContext() {}

func NewNamespace_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Namespace_declarationContext {
	var p = new(Namespace_declarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_namespace_declaration

	return p
}

func (s *Namespace_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Namespace_declarationContext) NAMESPACE() antlr.TerminalNode {
	return s.GetToken(stParserNAMESPACE, 0)
}

func (s *Namespace_declarationContext) Full_qualified_identifier() IFull_qualified_identifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFull_qualified_identifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFull_qualified_identifierContext)
}

func (s *Namespace_declarationContext) Namespace_elements() INamespace_elementsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamespace_elementsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamespace_elementsContext)
}

func (s *Namespace_declarationContext) INTERNAL() antlr.TerminalNode {
	return s.GetToken(stParserINTERNAL, 0)
}

func (s *Namespace_declarationContext) AllUsing_directive() []IUsing_directiveContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IUsing_directiveContext); ok {
			len++
		}
	}

	tst := make([]IUsing_directiveContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IUsing_directiveContext); ok {
			tst[i] = t.(IUsing_directiveContext)
			i++
		}
	}

	return tst
}

func (s *Namespace_declarationContext) Using_directive(i int) IUsing_directiveContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUsing_directiveContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUsing_directiveContext)
}

func (s *Namespace_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Namespace_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Namespace_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterNamespace_declaration(s)
	}
}

func (s *Namespace_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitNamespace_declaration(s)
	}
}

func (p *stParser) Namespace_declaration() (localctx INamespace_declarationContext) {
	localctx = NewNamespace_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, stParserRULE_namespace_declaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(240)
		p.Match(stParserNAMESPACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(242)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == stParserINTERNAL {
		{
			p.SetState(241)
			p.Match(stParserINTERNAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(244)
		p.Full_qualified_identifier()
	}
	p.SetState(248)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == stParserUSING {
		{
			p.SetState(245)
			p.Using_directive()
		}

		p.SetState(250)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(251)
		p.Namespace_elements()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INamespace_elementsContext is an interface to support dynamic dispatch.
type INamespace_elementsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Data_type_declaration() IData_type_declarationContext
	Function_declaration() IFunction_declarationContext
	Class_declaration() IClass_declarationContext
	Interface_declaration() IInterface_declarationContext
	Function_block_declaration() IFunction_block_declarationContext
	Namespace_declaration() INamespace_declarationContext

	// IsNamespace_elementsContext differentiates from other interfaces.
	IsNamespace_elementsContext()
}

type Namespace_elementsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespace_elementsContext() *Namespace_elementsContext {
	var p = new(Namespace_elementsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_namespace_elements
	return p
}

func InitEmptyNamespace_elementsContext(p *Namespace_elementsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_namespace_elements
}

func (*Namespace_elementsContext) IsNamespace_elementsContext() {}

func NewNamespace_elementsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Namespace_elementsContext {
	var p = new(Namespace_elementsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_namespace_elements

	return p
}

func (s *Namespace_elementsContext) GetParser() antlr.Parser { return s.parser }

func (s *Namespace_elementsContext) Data_type_declaration() IData_type_declarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IData_type_declarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IData_type_declarationContext)
}

func (s *Namespace_elementsContext) Function_declaration() IFunction_declarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunction_declarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunction_declarationContext)
}

func (s *Namespace_elementsContext) Class_declaration() IClass_declarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClass_declarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClass_declarationContext)
}

func (s *Namespace_elementsContext) Interface_declaration() IInterface_declarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterface_declarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterface_declarationContext)
}

func (s *Namespace_elementsContext) Function_block_declaration() IFunction_block_declarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunction_block_declarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunction_block_declarationContext)
}

func (s *Namespace_elementsContext) Namespace_declaration() INamespace_declarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamespace_declarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamespace_declarationContext)
}

func (s *Namespace_elementsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Namespace_elementsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Namespace_elementsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterNamespace_elements(s)
	}
}

func (s *Namespace_elementsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitNamespace_elements(s)
	}
}

func (p *stParser) Namespace_elements() (localctx INamespace_elementsContext) {
	localctx = NewNamespace_elementsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, stParserRULE_namespace_elements)
	p.SetState(259)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case stParserTYPE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(253)
			p.Data_type_declaration()
		}

	case stParserFUNCTION:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(254)
			p.Function_declaration()
		}

	case stParserCLASS:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(255)
			p.Class_declaration()
		}

	case stParserINTERFACE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(256)
			p.Interface_declaration()
		}

	case stParserFUNCTION_BLOCK:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(257)
			p.Function_block_declaration()
		}

	case stParserNAMESPACE:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(258)
			p.Namespace_declaration()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFull_qualified_identifierContext is an interface to support dynamic dispatch.
type IFull_qualified_identifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIDENTIFIER() []antlr.TerminalNode
	IDENTIFIER(i int) antlr.TerminalNode
	AllDOT() []antlr.TerminalNode
	DOT(i int) antlr.TerminalNode

	// IsFull_qualified_identifierContext differentiates from other interfaces.
	IsFull_qualified_identifierContext()
}

type Full_qualified_identifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFull_qualified_identifierContext() *Full_qualified_identifierContext {
	var p = new(Full_qualified_identifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_full_qualified_identifier
	return p
}

func InitEmptyFull_qualified_identifierContext(p *Full_qualified_identifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_full_qualified_identifier
}

func (*Full_qualified_identifierContext) IsFull_qualified_identifierContext() {}

func NewFull_qualified_identifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Full_qualified_identifierContext {
	var p = new(Full_qualified_identifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_full_qualified_identifier

	return p
}

func (s *Full_qualified_identifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Full_qualified_identifierContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(stParserIDENTIFIER)
}

func (s *Full_qualified_identifierContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(stParserIDENTIFIER, i)
}

func (s *Full_qualified_identifierContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(stParserDOT)
}

func (s *Full_qualified_identifierContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(stParserDOT, i)
}

func (s *Full_qualified_identifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Full_qualified_identifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Full_qualified_identifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterFull_qualified_identifier(s)
	}
}

func (s *Full_qualified_identifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitFull_qualified_identifier(s)
	}
}

func (p *stParser) Full_qualified_identifier() (localctx IFull_qualified_identifierContext) {
	localctx = NewFull_qualified_identifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, stParserRULE_full_qualified_identifier)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(261)
		p.Match(stParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(266)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == stParserDOT {
		{
			p.SetState(262)
			p.Match(stParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(263)
			p.Match(stParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(268)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUsing_directiveContext is an interface to support dynamic dispatch.
type IUsing_directiveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	USING() antlr.TerminalNode
	AllFull_qualified_identifier() []IFull_qualified_identifierContext
	Full_qualified_identifier(i int) IFull_qualified_identifierContext
	SEMICOLON() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsUsing_directiveContext differentiates from other interfaces.
	IsUsing_directiveContext()
}

type Using_directiveContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUsing_directiveContext() *Using_directiveContext {
	var p = new(Using_directiveContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_using_directive
	return p
}

func InitEmptyUsing_directiveContext(p *Using_directiveContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_using_directive
}

func (*Using_directiveContext) IsUsing_directiveContext() {}

func NewUsing_directiveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Using_directiveContext {
	var p = new(Using_directiveContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_using_directive

	return p
}

func (s *Using_directiveContext) GetParser() antlr.Parser { return s.parser }

func (s *Using_directiveContext) USING() antlr.TerminalNode {
	return s.GetToken(stParserUSING, 0)
}

func (s *Using_directiveContext) AllFull_qualified_identifier() []IFull_qualified_identifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFull_qualified_identifierContext); ok {
			len++
		}
	}

	tst := make([]IFull_qualified_identifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFull_qualified_identifierContext); ok {
			tst[i] = t.(IFull_qualified_identifierContext)
			i++
		}
	}

	return tst
}

func (s *Using_directiveContext) Full_qualified_identifier(i int) IFull_qualified_identifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFull_qualified_identifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFull_qualified_identifierContext)
}

func (s *Using_directiveContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(stParserSEMICOLON, 0)
}

func (s *Using_directiveContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(stParserCOMMA)
}

func (s *Using_directiveContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(stParserCOMMA, i)
}

func (s *Using_directiveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Using_directiveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Using_directiveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterUsing_directive(s)
	}
}

func (s *Using_directiveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitUsing_directive(s)
	}
}

func (p *stParser) Using_directive() (localctx IUsing_directiveContext) {
	localctx = NewUsing_directiveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, stParserRULE_using_directive)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(269)
		p.Match(stParserUSING)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(270)
		p.Full_qualified_identifier()
	}
	p.SetState(275)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == stParserCOMMA {
		{
			p.SetState(271)
			p.Match(stParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(272)
			p.Full_qualified_identifier()
		}

		p.SetState(277)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(278)
		p.Match(stParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILibrary_element_declarationContext is an interface to support dynamic dispatch.
type ILibrary_element_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Data_type_declaration() IData_type_declarationContext
	Function_declaration() IFunction_declarationContext
	Class_declaration() IClass_declarationContext
	Interface_declaration() IInterface_declarationContext
	Function_block_declaration() IFunction_block_declarationContext
	Program_declaration() IProgram_declarationContext
	Global_variable_list_declaration() IGlobal_variable_list_declarationContext
	Namespace_declaration() INamespace_declarationContext

	// IsLibrary_element_declarationContext differentiates from other interfaces.
	IsLibrary_element_declarationContext()
}

type Library_element_declarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLibrary_element_declarationContext() *Library_element_declarationContext {
	var p = new(Library_element_declarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_library_element_declaration
	return p
}

func InitEmptyLibrary_element_declarationContext(p *Library_element_declarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_library_element_declaration
}

func (*Library_element_declarationContext) IsLibrary_element_declarationContext() {}

func NewLibrary_element_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Library_element_declarationContext {
	var p = new(Library_element_declarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_library_element_declaration

	return p
}

func (s *Library_element_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Library_element_declarationContext) Data_type_declaration() IData_type_declarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IData_type_declarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IData_type_declarationContext)
}

func (s *Library_element_declarationContext) Function_declaration() IFunction_declarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunction_declarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunction_declarationContext)
}

func (s *Library_element_declarationContext) Class_declaration() IClass_declarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClass_declarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClass_declarationContext)
}

func (s *Library_element_declarationContext) Interface_declaration() IInterface_declarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterface_declarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterface_declarationContext)
}

func (s *Library_element_declarationContext) Function_block_declaration() IFunction_block_declarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunction_block_declarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunction_block_declarationContext)
}

func (s *Library_element_declarationContext) Program_declaration() IProgram_declarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProgram_declarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProgram_declarationContext)
}

func (s *Library_element_declarationContext) Global_variable_list_declaration() IGlobal_variable_list_declarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGlobal_variable_list_declarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGlobal_variable_list_declarationContext)
}

func (s *Library_element_declarationContext) Namespace_declaration() INamespace_declarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamespace_declarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamespace_declarationContext)
}

func (s *Library_element_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Library_element_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Library_element_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterLibrary_element_declaration(s)
	}
}

func (s *Library_element_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitLibrary_element_declaration(s)
	}
}

func (p *stParser) Library_element_declaration() (localctx ILibrary_element_declarationContext) {
	localctx = NewLibrary_element_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, stParserRULE_library_element_declaration)
	p.SetState(288)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case stParserTYPE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(280)
			p.Data_type_declaration()
		}

	case stParserFUNCTION:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(281)
			p.Function_declaration()
		}

	case stParserCLASS:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(282)
			p.Class_declaration()
		}

	case stParserINTERFACE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(283)
			p.Interface_declaration()
		}

	case stParserFUNCTION_BLOCK:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(284)
			p.Function_block_declaration()
		}

	case stParserPROGRAM:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(285)
			p.Program_declaration()
		}

	case stParserVAR_GLOBAL:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(286)
			p.Global_variable_list_declaration()
		}

	case stParserNAMESPACE:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(287)
			p.Namespace_declaration()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConstantContext is an interface to support dynamic dispatch.
type IConstantContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Integer() IIntegerContext
	Real_() IRealContext
	String_() IStringContext
	Time() ITimeContext
	Timeofday() ITimeofdayContext
	Date() IDateContext
	Datetime() IDatetimeContext
	Cast() ICastContext
	Bits() IBitsContext
	Ref_null() IRef_nullContext
	Reference_value() IReference_valueContext

	// IsConstantContext differentiates from other interfaces.
	IsConstantContext()
}

type ConstantContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstantContext() *ConstantContext {
	var p = new(ConstantContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_constant
	return p
}

func InitEmptyConstantContext(p *ConstantContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_constant
}

func (*ConstantContext) IsConstantContext() {}

func NewConstantContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstantContext {
	var p = new(ConstantContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_constant

	return p
}

func (s *ConstantContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstantContext) Integer() IIntegerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerContext)
}

func (s *ConstantContext) Real_() IRealContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRealContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRealContext)
}

func (s *ConstantContext) String_() IStringContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *ConstantContext) Time() ITimeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITimeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITimeContext)
}

func (s *ConstantContext) Timeofday() ITimeofdayContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITimeofdayContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITimeofdayContext)
}

func (s *ConstantContext) Date() IDateContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDateContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDateContext)
}

func (s *ConstantContext) Datetime() IDatetimeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatetimeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatetimeContext)
}

func (s *ConstantContext) Cast() ICastContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICastContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICastContext)
}

func (s *ConstantContext) Bits() IBitsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBitsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBitsContext)
}

func (s *ConstantContext) Ref_null() IRef_nullContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRef_nullContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRef_nullContext)
}

func (s *ConstantContext) Reference_value() IReference_valueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReference_valueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReference_valueContext)
}

func (s *ConstantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstantContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterConstant(s)
	}
}

func (s *ConstantContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitConstant(s)
	}
}

func (p *stParser) Constant() (localctx IConstantContext) {
	localctx = NewConstantContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, stParserRULE_constant)
	p.SetState(301)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case stParserMINUS, stParserINTEGER_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(290)
			p.Integer()
		}

	case stParserREAL_LITERAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(291)
			p.Real_()
		}

	case stParserSTRING_LITERAL, stParserWSTRING_LITERAL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(292)
			p.String_()
		}

	case stParserTIME_LITERAL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(293)
			p.Time()
		}

	case stParserTOD_LITERAL:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(294)
			p.Timeofday()
		}

	case stParserDATE_LITERAL:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(295)
			p.Date()
		}

	case stParserDATETIME:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(296)
			p.Datetime()
		}

	case stParserCAST_LITERAL:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(297)
			p.Cast()
		}

	case stParserBITS_LITERAL:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(298)
			p.Bits()
		}

	case stParserNULL:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(299)
			p.Ref_null()
		}

	case stParserREF:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(300)
			p.Reference_value()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICastContext is an interface to support dynamic dispatch.
type ICastContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CAST_LITERAL() antlr.TerminalNode

	// IsCastContext differentiates from other interfaces.
	IsCastContext()
}

type CastContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCastContext() *CastContext {
	var p = new(CastContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_cast
	return p
}

func InitEmptyCastContext(p *CastContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_cast
}

func (*CastContext) IsCastContext() {}

func NewCastContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CastContext {
	var p = new(CastContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_cast

	return p
}

func (s *CastContext) GetParser() antlr.Parser { return s.parser }

func (s *CastContext) CAST_LITERAL() antlr.TerminalNode {
	return s.GetToken(stParserCAST_LITERAL, 0)
}

func (s *CastContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CastContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CastContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterCast(s)
	}
}

func (s *CastContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitCast(s)
	}
}

func (p *stParser) Cast() (localctx ICastContext) {
	localctx = NewCastContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, stParserRULE_cast)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(303)
		p.Match(stParserCAST_LITERAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIntegerContext is an interface to support dynamic dispatch.
type IIntegerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	INTEGER_LITERAL() antlr.TerminalNode
	MINUS() antlr.TerminalNode

	// IsIntegerContext differentiates from other interfaces.
	IsIntegerContext()
}

type IntegerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntegerContext() *IntegerContext {
	var p = new(IntegerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_integer
	return p
}

func InitEmptyIntegerContext(p *IntegerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_integer
}

func (*IntegerContext) IsIntegerContext() {}

func NewIntegerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntegerContext {
	var p = new(IntegerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_integer

	return p
}

func (s *IntegerContext) GetParser() antlr.Parser { return s.parser }

func (s *IntegerContext) INTEGER_LITERAL() antlr.TerminalNode {
	return s.GetToken(stParserINTEGER_LITERAL, 0)
}

func (s *IntegerContext) MINUS() antlr.TerminalNode {
	return s.GetToken(stParserMINUS, 0)
}

func (s *IntegerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntegerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntegerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterInteger(s)
	}
}

func (s *IntegerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitInteger(s)
	}
}

func (p *stParser) Integer() (localctx IIntegerContext) {
	localctx = NewIntegerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, stParserRULE_integer)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(306)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == stParserMINUS {
		{
			p.SetState(305)
			p.Match(stParserMINUS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(308)
		p.Match(stParserINTEGER_LITERAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBitsContext is an interface to support dynamic dispatch.
type IBitsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BITS_LITERAL() antlr.TerminalNode

	// IsBitsContext differentiates from other interfaces.
	IsBitsContext()
}

type BitsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitsContext() *BitsContext {
	var p = new(BitsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_bits
	return p
}

func InitEmptyBitsContext(p *BitsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_bits
}

func (*BitsContext) IsBitsContext() {}

func NewBitsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitsContext {
	var p = new(BitsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_bits

	return p
}

func (s *BitsContext) GetParser() antlr.Parser { return s.parser }

func (s *BitsContext) BITS_LITERAL() antlr.TerminalNode {
	return s.GetToken(stParserBITS_LITERAL, 0)
}

func (s *BitsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterBits(s)
	}
}

func (s *BitsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitBits(s)
	}
}

func (p *stParser) Bits() (localctx IBitsContext) {
	localctx = NewBitsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, stParserRULE_bits)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(310)
		p.Match(stParserBITS_LITERAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRealContext is an interface to support dynamic dispatch.
type IRealContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	REAL_LITERAL() antlr.TerminalNode

	// IsRealContext differentiates from other interfaces.
	IsRealContext()
}

type RealContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRealContext() *RealContext {
	var p = new(RealContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_real
	return p
}

func InitEmptyRealContext(p *RealContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_real
}

func (*RealContext) IsRealContext() {}

func NewRealContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RealContext {
	var p = new(RealContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_real

	return p
}

func (s *RealContext) GetParser() antlr.Parser { return s.parser }

func (s *RealContext) REAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(stParserREAL_LITERAL, 0)
}

func (s *RealContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RealContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RealContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterReal(s)
	}
}

func (s *RealContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitReal(s)
	}
}

func (p *stParser) Real_() (localctx IRealContext) {
	localctx = NewRealContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, stParserRULE_real)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(312)
		p.Match(stParserREAL_LITERAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStringContext is an interface to support dynamic dispatch.
type IStringContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTok returns the tok token.
	GetTok() antlr.Token

	// SetTok sets the tok token.
	SetTok(antlr.Token)

	// Getter signatures
	WSTRING_LITERAL() antlr.TerminalNode
	STRING_LITERAL() antlr.TerminalNode

	// IsStringContext differentiates from other interfaces.
	IsStringContext()
}

type StringContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	tok    antlr.Token
}

func NewEmptyStringContext() *StringContext {
	var p = new(StringContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_string
	return p
}

func InitEmptyStringContext(p *StringContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_string
}

func (*StringContext) IsStringContext() {}

func NewStringContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringContext {
	var p = new(StringContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_string

	return p
}

func (s *StringContext) GetParser() antlr.Parser { return s.parser }

func (s *StringContext) GetTok() antlr.Token { return s.tok }

func (s *StringContext) SetTok(v antlr.Token) { s.tok = v }

func (s *StringContext) WSTRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(stParserWSTRING_LITERAL, 0)
}

func (s *StringContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(stParserSTRING_LITERAL, 0)
}

func (s *StringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StringContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterString(s)
	}
}

func (s *StringContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitString(s)
	}
}

func (p *stParser) String_() (localctx IStringContext) {
	localctx = NewStringContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, stParserRULE_string)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(314)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*StringContext).tok = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == stParserSTRING_LITERAL || _la == stParserWSTRING_LITERAL) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*StringContext).tok = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITimeContext is an interface to support dynamic dispatch.
type ITimeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TIME_LITERAL() antlr.TerminalNode

	// IsTimeContext differentiates from other interfaces.
	IsTimeContext()
}

type TimeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTimeContext() *TimeContext {
	var p = new(TimeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_time
	return p
}

func InitEmptyTimeContext(p *TimeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_time
}

func (*TimeContext) IsTimeContext() {}

func NewTimeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TimeContext {
	var p = new(TimeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_time

	return p
}

func (s *TimeContext) GetParser() antlr.Parser { return s.parser }

func (s *TimeContext) TIME_LITERAL() antlr.TerminalNode {
	return s.GetToken(stParserTIME_LITERAL, 0)
}

func (s *TimeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TimeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TimeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterTime(s)
	}
}

func (s *TimeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitTime(s)
	}
}

func (p *stParser) Time() (localctx ITimeContext) {
	localctx = NewTimeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, stParserRULE_time)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(316)
		p.Match(stParserTIME_LITERAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITimeofdayContext is an interface to support dynamic dispatch.
type ITimeofdayContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TOD_LITERAL() antlr.TerminalNode

	// IsTimeofdayContext differentiates from other interfaces.
	IsTimeofdayContext()
}

type TimeofdayContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTimeofdayContext() *TimeofdayContext {
	var p = new(TimeofdayContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_timeofday
	return p
}

func InitEmptyTimeofdayContext(p *TimeofdayContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_timeofday
}

func (*TimeofdayContext) IsTimeofdayContext() {}

func NewTimeofdayContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TimeofdayContext {
	var p = new(TimeofdayContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_timeofday

	return p
}

func (s *TimeofdayContext) GetParser() antlr.Parser { return s.parser }

func (s *TimeofdayContext) TOD_LITERAL() antlr.TerminalNode {
	return s.GetToken(stParserTOD_LITERAL, 0)
}

func (s *TimeofdayContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TimeofdayContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TimeofdayContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterTimeofday(s)
	}
}

func (s *TimeofdayContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitTimeofday(s)
	}
}

func (p *stParser) Timeofday() (localctx ITimeofdayContext) {
	localctx = NewTimeofdayContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, stParserRULE_timeofday)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(318)
		p.Match(stParserTOD_LITERAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDateContext is an interface to support dynamic dispatch.
type IDateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DATE_LITERAL() antlr.TerminalNode

	// IsDateContext differentiates from other interfaces.
	IsDateContext()
}

type DateContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDateContext() *DateContext {
	var p = new(DateContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_date
	return p
}

func InitEmptyDateContext(p *DateContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_date
}

func (*DateContext) IsDateContext() {}

func NewDateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DateContext {
	var p = new(DateContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_date

	return p
}

func (s *DateContext) GetParser() antlr.Parser { return s.parser }

func (s *DateContext) DATE_LITERAL() antlr.TerminalNode {
	return s.GetToken(stParserDATE_LITERAL, 0)
}

func (s *DateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterDate(s)
	}
}

func (s *DateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitDate(s)
	}
}

func (p *stParser) Date() (localctx IDateContext) {
	localctx = NewDateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, stParserRULE_date)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(320)
		p.Match(stParserDATE_LITERAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDatetimeContext is an interface to support dynamic dispatch.
type IDatetimeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DATETIME() antlr.TerminalNode

	// IsDatetimeContext differentiates from other interfaces.
	IsDatetimeContext()
}

type DatetimeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDatetimeContext() *DatetimeContext {
	var p = new(DatetimeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_datetime
	return p
}

func InitEmptyDatetimeContext(p *DatetimeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_datetime
}

func (*DatetimeContext) IsDatetimeContext() {}

func NewDatetimeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DatetimeContext {
	var p = new(DatetimeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_datetime

	return p
}

func (s *DatetimeContext) GetParser() antlr.Parser { return s.parser }

func (s *DatetimeContext) DATETIME() antlr.TerminalNode {
	return s.GetToken(stParserDATETIME, 0)
}

func (s *DatetimeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DatetimeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DatetimeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterDatetime(s)
	}
}

func (s *DatetimeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitDatetime(s)
	}
}

func (p *stParser) Datetime() (localctx IDatetimeContext) {
	localctx = NewDatetimeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, stParserRULE_datetime)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(322)
		p.Match(stParserDATETIME)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRef_nullContext is an interface to support dynamic dispatch.
type IRef_nullContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NULL() antlr.TerminalNode

	// IsRef_nullContext differentiates from other interfaces.
	IsRef_nullContext()
}

type Ref_nullContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRef_nullContext() *Ref_nullContext {
	var p = new(Ref_nullContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_ref_null
	return p
}

func InitEmptyRef_nullContext(p *Ref_nullContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_ref_null
}

func (*Ref_nullContext) IsRef_nullContext() {}

func NewRef_nullContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ref_nullContext {
	var p = new(Ref_nullContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_ref_null

	return p
}

func (s *Ref_nullContext) GetParser() antlr.Parser { return s.parser }

func (s *Ref_nullContext) NULL() antlr.TerminalNode {
	return s.GetToken(stParserNULL, 0)
}

func (s *Ref_nullContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ref_nullContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ref_nullContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterRef_null(s)
	}
}

func (s *Ref_nullContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitRef_null(s)
	}
}

func (p *stParser) Ref_null() (localctx IRef_nullContext) {
	localctx = NewRef_nullContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, stParserRULE_ref_null)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(324)
		p.Match(stParserNULL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IData_type_nameContext is an interface to support dynamic dispatch.
type IData_type_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Non_generic_type_name() INon_generic_type_nameContext
	Generic_type_name() IGeneric_type_nameContext

	// IsData_type_nameContext differentiates from other interfaces.
	IsData_type_nameContext()
}

type Data_type_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyData_type_nameContext() *Data_type_nameContext {
	var p = new(Data_type_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_data_type_name
	return p
}

func InitEmptyData_type_nameContext(p *Data_type_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_data_type_name
}

func (*Data_type_nameContext) IsData_type_nameContext() {}

func NewData_type_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Data_type_nameContext {
	var p = new(Data_type_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_data_type_name

	return p
}

func (s *Data_type_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Data_type_nameContext) Non_generic_type_name() INon_generic_type_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INon_generic_type_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INon_generic_type_nameContext)
}

func (s *Data_type_nameContext) Generic_type_name() IGeneric_type_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGeneric_type_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGeneric_type_nameContext)
}

func (s *Data_type_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Data_type_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Data_type_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterData_type_name(s)
	}
}

func (s *Data_type_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitData_type_name(s)
	}
}

func (p *stParser) Data_type_name() (localctx IData_type_nameContext) {
	localctx = NewData_type_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, stParserRULE_data_type_name)
	p.SetState(328)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 9, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(326)
			p.Non_generic_type_name()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(327)
			p.Generic_type_name()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INon_generic_type_nameContext is an interface to support dynamic dispatch.
type INon_generic_type_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Elementary_type_name() IElementary_type_nameContext
	IDENTIFIER() antlr.TerminalNode

	// IsNon_generic_type_nameContext differentiates from other interfaces.
	IsNon_generic_type_nameContext()
}

type Non_generic_type_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNon_generic_type_nameContext() *Non_generic_type_nameContext {
	var p = new(Non_generic_type_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_non_generic_type_name
	return p
}

func InitEmptyNon_generic_type_nameContext(p *Non_generic_type_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_non_generic_type_name
}

func (*Non_generic_type_nameContext) IsNon_generic_type_nameContext() {}

func NewNon_generic_type_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Non_generic_type_nameContext {
	var p = new(Non_generic_type_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_non_generic_type_name

	return p
}

func (s *Non_generic_type_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Non_generic_type_nameContext) Elementary_type_name() IElementary_type_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElementary_type_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElementary_type_nameContext)
}

func (s *Non_generic_type_nameContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(stParserIDENTIFIER, 0)
}

func (s *Non_generic_type_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Non_generic_type_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Non_generic_type_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterNon_generic_type_name(s)
	}
}

func (s *Non_generic_type_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitNon_generic_type_name(s)
	}
}

func (p *stParser) Non_generic_type_name() (localctx INon_generic_type_nameContext) {
	localctx = NewNon_generic_type_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, stParserRULE_non_generic_type_name)
	p.SetState(332)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case stParserANY, stParserANY_BIT, stParserANY_INT, stParserBOOL, stParserBYTE, stParserDATE_AND_TIME, stParserDINT, stParserDWORD, stParserINT, stParserLINT, stParserLREAL, stParserLWORD, stParserREAL, stParserSINT, stParserSTRING, stParserTIME, stParserTIME_OF_DAY, stParserUDINT, stParserUINT, stParserULINT, stParserUSINT, stParserWORD, stParserWSTRING, stParserDATE, stParserDT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(330)
			p.Elementary_type_name()
		}

	case stParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(331)
			p.Match(stParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IElementary_type_nameContext is an interface to support dynamic dispatch.
type IElementary_type_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Numeric_type_name() INumeric_type_nameContext
	Date_type_name() IDate_type_nameContext
	Bit_string_type_name() IBit_string_type_nameContext
	STRING() antlr.TerminalNode
	WSTRING() antlr.TerminalNode
	TIME() antlr.TerminalNode
	ANY() antlr.TerminalNode
	ANY_BIT() antlr.TerminalNode
	ANY_INT() antlr.TerminalNode

	// IsElementary_type_nameContext differentiates from other interfaces.
	IsElementary_type_nameContext()
}

type Elementary_type_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElementary_type_nameContext() *Elementary_type_nameContext {
	var p = new(Elementary_type_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_elementary_type_name
	return p
}

func InitEmptyElementary_type_nameContext(p *Elementary_type_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_elementary_type_name
}

func (*Elementary_type_nameContext) IsElementary_type_nameContext() {}

func NewElementary_type_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Elementary_type_nameContext {
	var p = new(Elementary_type_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_elementary_type_name

	return p
}

func (s *Elementary_type_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Elementary_type_nameContext) Numeric_type_name() INumeric_type_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumeric_type_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumeric_type_nameContext)
}

func (s *Elementary_type_nameContext) Date_type_name() IDate_type_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDate_type_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDate_type_nameContext)
}

func (s *Elementary_type_nameContext) Bit_string_type_name() IBit_string_type_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBit_string_type_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBit_string_type_nameContext)
}

func (s *Elementary_type_nameContext) STRING() antlr.TerminalNode {
	return s.GetToken(stParserSTRING, 0)
}

func (s *Elementary_type_nameContext) WSTRING() antlr.TerminalNode {
	return s.GetToken(stParserWSTRING, 0)
}

func (s *Elementary_type_nameContext) TIME() antlr.TerminalNode {
	return s.GetToken(stParserTIME, 0)
}

func (s *Elementary_type_nameContext) ANY() antlr.TerminalNode {
	return s.GetToken(stParserANY, 0)
}

func (s *Elementary_type_nameContext) ANY_BIT() antlr.TerminalNode {
	return s.GetToken(stParserANY_BIT, 0)
}

func (s *Elementary_type_nameContext) ANY_INT() antlr.TerminalNode {
	return s.GetToken(stParserANY_INT, 0)
}

func (s *Elementary_type_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Elementary_type_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Elementary_type_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterElementary_type_name(s)
	}
}

func (s *Elementary_type_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitElementary_type_name(s)
	}
}

func (p *stParser) Elementary_type_name() (localctx IElementary_type_nameContext) {
	localctx = NewElementary_type_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, stParserRULE_elementary_type_name)
	p.SetState(343)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case stParserDINT, stParserINT, stParserLINT, stParserLREAL, stParserREAL, stParserSINT, stParserUDINT, stParserUINT, stParserULINT, stParserUSINT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(334)
			p.Numeric_type_name()
		}

	case stParserDATE_AND_TIME, stParserTIME_OF_DAY, stParserDATE, stParserDT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(335)
			p.Date_type_name()
		}

	case stParserBOOL, stParserBYTE, stParserDWORD, stParserLWORD, stParserWORD:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(336)
			p.Bit_string_type_name()
		}

	case stParserSTRING:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(337)
			p.Match(stParserSTRING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case stParserWSTRING:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(338)
			p.Match(stParserWSTRING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case stParserTIME:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(339)
			p.Match(stParserTIME)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case stParserANY:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(340)
			p.Match(stParserANY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case stParserANY_BIT:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(341)
			p.Match(stParserANY_BIT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case stParserANY_INT:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(342)
			p.Match(stParserANY_INT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INumeric_type_nameContext is an interface to support dynamic dispatch.
type INumeric_type_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Integer_type_name() IInteger_type_nameContext
	Real_type_name() IReal_type_nameContext

	// IsNumeric_type_nameContext differentiates from other interfaces.
	IsNumeric_type_nameContext()
}

type Numeric_type_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumeric_type_nameContext() *Numeric_type_nameContext {
	var p = new(Numeric_type_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_numeric_type_name
	return p
}

func InitEmptyNumeric_type_nameContext(p *Numeric_type_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_numeric_type_name
}

func (*Numeric_type_nameContext) IsNumeric_type_nameContext() {}

func NewNumeric_type_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Numeric_type_nameContext {
	var p = new(Numeric_type_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_numeric_type_name

	return p
}

func (s *Numeric_type_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Numeric_type_nameContext) Integer_type_name() IInteger_type_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInteger_type_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInteger_type_nameContext)
}

func (s *Numeric_type_nameContext) Real_type_name() IReal_type_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReal_type_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReal_type_nameContext)
}

func (s *Numeric_type_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Numeric_type_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Numeric_type_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterNumeric_type_name(s)
	}
}

func (s *Numeric_type_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitNumeric_type_name(s)
	}
}

func (p *stParser) Numeric_type_name() (localctx INumeric_type_nameContext) {
	localctx = NewNumeric_type_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, stParserRULE_numeric_type_name)
	p.SetState(347)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case stParserDINT, stParserINT, stParserLINT, stParserSINT, stParserUDINT, stParserUINT, stParserULINT, stParserUSINT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(345)
			p.Integer_type_name()
		}

	case stParserLREAL, stParserREAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(346)
			p.Real_type_name()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInteger_type_nameContext is an interface to support dynamic dispatch.
type IInteger_type_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Signed_integer_type_name() ISigned_integer_type_nameContext
	Unsigned_integer_type_name() IUnsigned_integer_type_nameContext

	// IsInteger_type_nameContext differentiates from other interfaces.
	IsInteger_type_nameContext()
}

type Integer_type_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInteger_type_nameContext() *Integer_type_nameContext {
	var p = new(Integer_type_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_integer_type_name
	return p
}

func InitEmptyInteger_type_nameContext(p *Integer_type_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_integer_type_name
}

func (*Integer_type_nameContext) IsInteger_type_nameContext() {}

func NewInteger_type_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Integer_type_nameContext {
	var p = new(Integer_type_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_integer_type_name

	return p
}

func (s *Integer_type_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Integer_type_nameContext) Signed_integer_type_name() ISigned_integer_type_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISigned_integer_type_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISigned_integer_type_nameContext)
}

func (s *Integer_type_nameContext) Unsigned_integer_type_name() IUnsigned_integer_type_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnsigned_integer_type_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnsigned_integer_type_nameContext)
}

func (s *Integer_type_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Integer_type_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Integer_type_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterInteger_type_name(s)
	}
}

func (s *Integer_type_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitInteger_type_name(s)
	}
}

func (p *stParser) Integer_type_name() (localctx IInteger_type_nameContext) {
	localctx = NewInteger_type_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, stParserRULE_integer_type_name)
	p.SetState(351)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case stParserDINT, stParserINT, stParserLINT, stParserSINT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(349)
			p.Signed_integer_type_name()
		}

	case stParserUDINT, stParserUINT, stParserULINT, stParserUSINT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(350)
			p.Unsigned_integer_type_name()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISigned_integer_type_nameContext is an interface to support dynamic dispatch.
type ISigned_integer_type_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SINT() antlr.TerminalNode
	INT() antlr.TerminalNode
	DINT() antlr.TerminalNode
	LINT() antlr.TerminalNode

	// IsSigned_integer_type_nameContext differentiates from other interfaces.
	IsSigned_integer_type_nameContext()
}

type Signed_integer_type_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySigned_integer_type_nameContext() *Signed_integer_type_nameContext {
	var p = new(Signed_integer_type_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_signed_integer_type_name
	return p
}

func InitEmptySigned_integer_type_nameContext(p *Signed_integer_type_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_signed_integer_type_name
}

func (*Signed_integer_type_nameContext) IsSigned_integer_type_nameContext() {}

func NewSigned_integer_type_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Signed_integer_type_nameContext {
	var p = new(Signed_integer_type_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_signed_integer_type_name

	return p
}

func (s *Signed_integer_type_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Signed_integer_type_nameContext) SINT() antlr.TerminalNode {
	return s.GetToken(stParserSINT, 0)
}

func (s *Signed_integer_type_nameContext) INT() antlr.TerminalNode {
	return s.GetToken(stParserINT, 0)
}

func (s *Signed_integer_type_nameContext) DINT() antlr.TerminalNode {
	return s.GetToken(stParserDINT, 0)
}

func (s *Signed_integer_type_nameContext) LINT() antlr.TerminalNode {
	return s.GetToken(stParserLINT, 0)
}

func (s *Signed_integer_type_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Signed_integer_type_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Signed_integer_type_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterSigned_integer_type_name(s)
	}
}

func (s *Signed_integer_type_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitSigned_integer_type_name(s)
	}
}

func (p *stParser) Signed_integer_type_name() (localctx ISigned_integer_type_nameContext) {
	localctx = NewSigned_integer_type_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, stParserRULE_signed_integer_type_name)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(353)
		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&9240576) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnsigned_integer_type_nameContext is an interface to support dynamic dispatch.
type IUnsigned_integer_type_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	USINT() antlr.TerminalNode
	UINT() antlr.TerminalNode
	UDINT() antlr.TerminalNode
	ULINT() antlr.TerminalNode

	// IsUnsigned_integer_type_nameContext differentiates from other interfaces.
	IsUnsigned_integer_type_nameContext()
}

type Unsigned_integer_type_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnsigned_integer_type_nameContext() *Unsigned_integer_type_nameContext {
	var p = new(Unsigned_integer_type_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_unsigned_integer_type_name
	return p
}

func InitEmptyUnsigned_integer_type_nameContext(p *Unsigned_integer_type_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_unsigned_integer_type_name
}

func (*Unsigned_integer_type_nameContext) IsUnsigned_integer_type_nameContext() {}

func NewUnsigned_integer_type_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unsigned_integer_type_nameContext {
	var p = new(Unsigned_integer_type_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_unsigned_integer_type_name

	return p
}

func (s *Unsigned_integer_type_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Unsigned_integer_type_nameContext) USINT() antlr.TerminalNode {
	return s.GetToken(stParserUSINT, 0)
}

func (s *Unsigned_integer_type_nameContext) UINT() antlr.TerminalNode {
	return s.GetToken(stParserUINT, 0)
}

func (s *Unsigned_integer_type_nameContext) UDINT() antlr.TerminalNode {
	return s.GetToken(stParserUDINT, 0)
}

func (s *Unsigned_integer_type_nameContext) ULINT() antlr.TerminalNode {
	return s.GetToken(stParserULINT, 0)
}

func (s *Unsigned_integer_type_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unsigned_integer_type_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unsigned_integer_type_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterUnsigned_integer_type_name(s)
	}
}

func (s *Unsigned_integer_type_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitUnsigned_integer_type_name(s)
	}
}

func (p *stParser) Unsigned_integer_type_name() (localctx IUnsigned_integer_type_nameContext) {
	localctx = NewUnsigned_integer_type_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, stParserRULE_unsigned_integer_type_name)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(355)
		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&2013265920) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IReal_type_nameContext is an interface to support dynamic dispatch.
type IReal_type_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	REAL() antlr.TerminalNode
	LREAL() antlr.TerminalNode

	// IsReal_type_nameContext differentiates from other interfaces.
	IsReal_type_nameContext()
}

type Real_type_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReal_type_nameContext() *Real_type_nameContext {
	var p = new(Real_type_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_real_type_name
	return p
}

func InitEmptyReal_type_nameContext(p *Real_type_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_real_type_name
}

func (*Real_type_nameContext) IsReal_type_nameContext() {}

func NewReal_type_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Real_type_nameContext {
	var p = new(Real_type_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_real_type_name

	return p
}

func (s *Real_type_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Real_type_nameContext) REAL() antlr.TerminalNode {
	return s.GetToken(stParserREAL, 0)
}

func (s *Real_type_nameContext) LREAL() antlr.TerminalNode {
	return s.GetToken(stParserLREAL, 0)
}

func (s *Real_type_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Real_type_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Real_type_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterReal_type_name(s)
	}
}

func (s *Real_type_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitReal_type_name(s)
	}
}

func (p *stParser) Real_type_name() (localctx IReal_type_nameContext) {
	localctx = NewReal_type_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, stParserRULE_real_type_name)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(357)
		_la = p.GetTokenStream().LA(1)

		if !(_la == stParserLREAL || _la == stParserREAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDate_type_nameContext is an interface to support dynamic dispatch.
type IDate_type_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DATE() antlr.TerminalNode
	TIME_OF_DAY() antlr.TerminalNode
	DATE_AND_TIME() antlr.TerminalNode
	DT() antlr.TerminalNode

	// IsDate_type_nameContext differentiates from other interfaces.
	IsDate_type_nameContext()
}

type Date_type_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDate_type_nameContext() *Date_type_nameContext {
	var p = new(Date_type_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_date_type_name
	return p
}

func InitEmptyDate_type_nameContext(p *Date_type_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_date_type_name
}

func (*Date_type_nameContext) IsDate_type_nameContext() {}

func NewDate_type_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Date_type_nameContext {
	var p = new(Date_type_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_date_type_name

	return p
}

func (s *Date_type_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Date_type_nameContext) DATE() antlr.TerminalNode {
	return s.GetToken(stParserDATE, 0)
}

func (s *Date_type_nameContext) TIME_OF_DAY() antlr.TerminalNode {
	return s.GetToken(stParserTIME_OF_DAY, 0)
}

func (s *Date_type_nameContext) DATE_AND_TIME() antlr.TerminalNode {
	return s.GetToken(stParserDATE_AND_TIME, 0)
}

func (s *Date_type_nameContext) DT() antlr.TerminalNode {
	return s.GetToken(stParserDT, 0)
}

func (s *Date_type_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Date_type_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Date_type_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterDate_type_name(s)
	}
}

func (s *Date_type_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitDate_type_name(s)
	}
}

func (p *stParser) Date_type_name() (localctx IDate_type_nameContext) {
	localctx = NewDate_type_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, stParserRULE_date_type_name)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(359)
		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&10995183419392) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBit_string_type_nameContext is an interface to support dynamic dispatch.
type IBit_string_type_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BOOL() antlr.TerminalNode
	BYTE() antlr.TerminalNode
	WORD() antlr.TerminalNode
	DWORD() antlr.TerminalNode
	LWORD() antlr.TerminalNode

	// IsBit_string_type_nameContext differentiates from other interfaces.
	IsBit_string_type_nameContext()
}

type Bit_string_type_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBit_string_type_nameContext() *Bit_string_type_nameContext {
	var p = new(Bit_string_type_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_bit_string_type_name
	return p
}

func InitEmptyBit_string_type_nameContext(p *Bit_string_type_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_bit_string_type_name
}

func (*Bit_string_type_nameContext) IsBit_string_type_nameContext() {}

func NewBit_string_type_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bit_string_type_nameContext {
	var p = new(Bit_string_type_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_bit_string_type_name

	return p
}

func (s *Bit_string_type_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Bit_string_type_nameContext) BOOL() antlr.TerminalNode {
	return s.GetToken(stParserBOOL, 0)
}

func (s *Bit_string_type_nameContext) BYTE() antlr.TerminalNode {
	return s.GetToken(stParserBYTE, 0)
}

func (s *Bit_string_type_nameContext) WORD() antlr.TerminalNode {
	return s.GetToken(stParserWORD, 0)
}

func (s *Bit_string_type_nameContext) DWORD() antlr.TerminalNode {
	return s.GetToken(stParserDWORD, 0)
}

func (s *Bit_string_type_nameContext) LWORD() antlr.TerminalNode {
	return s.GetToken(stParserLWORD, 0)
}

func (s *Bit_string_type_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bit_string_type_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bit_string_type_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterBit_string_type_name(s)
	}
}

func (s *Bit_string_type_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitBit_string_type_name(s)
	}
}

func (p *stParser) Bit_string_type_name() (localctx IBit_string_type_nameContext) {
	localctx = NewBit_string_type_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, stParserRULE_bit_string_type_name)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(361)
		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&2149736448) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGeneric_type_nameContext is an interface to support dynamic dispatch.
type IGeneric_type_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ANY() antlr.TerminalNode
	ANY_DERIVED() antlr.TerminalNode
	ANY_ELEMENTARY() antlr.TerminalNode
	ANY_MAGNITUDE() antlr.TerminalNode
	ANY_NUM() antlr.TerminalNode
	ANY_REAL() antlr.TerminalNode
	ANY_INT() antlr.TerminalNode
	ANY_BIT() antlr.TerminalNode
	ANY_STRING() antlr.TerminalNode
	ANY_DATE() antlr.TerminalNode

	// IsGeneric_type_nameContext differentiates from other interfaces.
	IsGeneric_type_nameContext()
}

type Generic_type_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGeneric_type_nameContext() *Generic_type_nameContext {
	var p = new(Generic_type_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_generic_type_name
	return p
}

func InitEmptyGeneric_type_nameContext(p *Generic_type_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_generic_type_name
}

func (*Generic_type_nameContext) IsGeneric_type_nameContext() {}

func NewGeneric_type_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Generic_type_nameContext {
	var p = new(Generic_type_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_generic_type_name

	return p
}

func (s *Generic_type_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Generic_type_nameContext) ANY() antlr.TerminalNode {
	return s.GetToken(stParserANY, 0)
}

func (s *Generic_type_nameContext) ANY_DERIVED() antlr.TerminalNode {
	return s.GetToken(stParserANY_DERIVED, 0)
}

func (s *Generic_type_nameContext) ANY_ELEMENTARY() antlr.TerminalNode {
	return s.GetToken(stParserANY_ELEMENTARY, 0)
}

func (s *Generic_type_nameContext) ANY_MAGNITUDE() antlr.TerminalNode {
	return s.GetToken(stParserANY_MAGNITUDE, 0)
}

func (s *Generic_type_nameContext) ANY_NUM() antlr.TerminalNode {
	return s.GetToken(stParserANY_NUM, 0)
}

func (s *Generic_type_nameContext) ANY_REAL() antlr.TerminalNode {
	return s.GetToken(stParserANY_REAL, 0)
}

func (s *Generic_type_nameContext) ANY_INT() antlr.TerminalNode {
	return s.GetToken(stParserANY_INT, 0)
}

func (s *Generic_type_nameContext) ANY_BIT() antlr.TerminalNode {
	return s.GetToken(stParserANY_BIT, 0)
}

func (s *Generic_type_nameContext) ANY_STRING() antlr.TerminalNode {
	return s.GetToken(stParserANY_STRING, 0)
}

func (s *Generic_type_nameContext) ANY_DATE() antlr.TerminalNode {
	return s.GetToken(stParserANY_DATE, 0)
}

func (s *Generic_type_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Generic_type_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Generic_type_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterGeneric_type_name(s)
	}
}

func (s *Generic_type_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitGeneric_type_name(s)
	}
}

func (p *stParser) Generic_type_name() (localctx IGeneric_type_nameContext) {
	localctx = NewGeneric_type_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, stParserRULE_generic_type_name)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(363)
		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4092) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IData_type_declarationContext is an interface to support dynamic dispatch.
type IData_type_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TYPE() antlr.TerminalNode
	END_TYPE() antlr.TerminalNode
	AllIDENTIFIER() []antlr.TerminalNode
	IDENTIFIER(i int) antlr.TerminalNode
	AllCOLON() []antlr.TerminalNode
	COLON(i int) antlr.TerminalNode
	AllType_declaration() []IType_declarationContext
	Type_declaration(i int) IType_declarationContext
	AllSEMICOLON() []antlr.TerminalNode
	SEMICOLON(i int) antlr.TerminalNode

	// IsData_type_declarationContext differentiates from other interfaces.
	IsData_type_declarationContext()
}

type Data_type_declarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyData_type_declarationContext() *Data_type_declarationContext {
	var p = new(Data_type_declarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_data_type_declaration
	return p
}

func InitEmptyData_type_declarationContext(p *Data_type_declarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_data_type_declaration
}

func (*Data_type_declarationContext) IsData_type_declarationContext() {}

func NewData_type_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Data_type_declarationContext {
	var p = new(Data_type_declarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_data_type_declaration

	return p
}

func (s *Data_type_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Data_type_declarationContext) TYPE() antlr.TerminalNode {
	return s.GetToken(stParserTYPE, 0)
}

func (s *Data_type_declarationContext) END_TYPE() antlr.TerminalNode {
	return s.GetToken(stParserEND_TYPE, 0)
}

func (s *Data_type_declarationContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(stParserIDENTIFIER)
}

func (s *Data_type_declarationContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(stParserIDENTIFIER, i)
}

func (s *Data_type_declarationContext) AllCOLON() []antlr.TerminalNode {
	return s.GetTokens(stParserCOLON)
}

func (s *Data_type_declarationContext) COLON(i int) antlr.TerminalNode {
	return s.GetToken(stParserCOLON, i)
}

func (s *Data_type_declarationContext) AllType_declaration() []IType_declarationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IType_declarationContext); ok {
			len++
		}
	}

	tst := make([]IType_declarationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IType_declarationContext); ok {
			tst[i] = t.(IType_declarationContext)
			i++
		}
	}

	return tst
}

func (s *Data_type_declarationContext) Type_declaration(i int) IType_declarationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_declarationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_declarationContext)
}

func (s *Data_type_declarationContext) AllSEMICOLON() []antlr.TerminalNode {
	return s.GetTokens(stParserSEMICOLON)
}

func (s *Data_type_declarationContext) SEMICOLON(i int) antlr.TerminalNode {
	return s.GetToken(stParserSEMICOLON, i)
}

func (s *Data_type_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Data_type_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Data_type_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterData_type_declaration(s)
	}
}

func (s *Data_type_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitData_type_declaration(s)
	}
}

func (p *stParser) Data_type_declaration() (localctx IData_type_declarationContext) {
	localctx = NewData_type_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, stParserRULE_data_type_declaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(365)
		p.Match(stParserTYPE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(371)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == stParserIDENTIFIER {
		{
			p.SetState(366)
			p.Match(stParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(367)
			p.Match(stParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(368)
			p.Type_declaration()
		}
		{
			p.SetState(369)
			p.Match(stParserSEMICOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(373)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(375)
		p.Match(stParserEND_TYPE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IType_declarationContext is an interface to support dynamic dispatch.
type IType_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetI returns the i rule contexts.
	GetI() IInitializationsContext

	// SetI sets the i rule contexts.
	SetI(IInitializationsContext)

	// Getter signatures
	Array_specification() IArray_specificationContext
	String_type_declaration() IString_type_declarationContext
	Subrange_spec_init() ISubrange_spec_initContext
	Structure_declaration() IStructure_declarationContext
	Enumerated_specification() IEnumerated_specificationContext
	Reference_specification() IReference_specificationContext
	Data_type_name() IData_type_nameContext
	ASSIGN() antlr.TerminalNode
	Initializations() IInitializationsContext
	R_EDGE() antlr.TerminalNode
	F_EDGE() antlr.TerminalNode

	// IsType_declarationContext differentiates from other interfaces.
	IsType_declarationContext()
}

type Type_declarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	i      IInitializationsContext
}

func NewEmptyType_declarationContext() *Type_declarationContext {
	var p = new(Type_declarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_type_declaration
	return p
}

func InitEmptyType_declarationContext(p *Type_declarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_type_declaration
}

func (*Type_declarationContext) IsType_declarationContext() {}

func NewType_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_declarationContext {
	var p = new(Type_declarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_type_declaration

	return p
}

func (s *Type_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_declarationContext) GetI() IInitializationsContext { return s.i }

func (s *Type_declarationContext) SetI(v IInitializationsContext) { s.i = v }

func (s *Type_declarationContext) Array_specification() IArray_specificationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArray_specificationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArray_specificationContext)
}

func (s *Type_declarationContext) String_type_declaration() IString_type_declarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_type_declarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_type_declarationContext)
}

func (s *Type_declarationContext) Subrange_spec_init() ISubrange_spec_initContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISubrange_spec_initContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISubrange_spec_initContext)
}

func (s *Type_declarationContext) Structure_declaration() IStructure_declarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructure_declarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructure_declarationContext)
}

func (s *Type_declarationContext) Enumerated_specification() IEnumerated_specificationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumerated_specificationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumerated_specificationContext)
}

func (s *Type_declarationContext) Reference_specification() IReference_specificationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReference_specificationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReference_specificationContext)
}

func (s *Type_declarationContext) Data_type_name() IData_type_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IData_type_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IData_type_nameContext)
}

func (s *Type_declarationContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(stParserASSIGN, 0)
}

func (s *Type_declarationContext) Initializations() IInitializationsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInitializationsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInitializationsContext)
}

func (s *Type_declarationContext) R_EDGE() antlr.TerminalNode {
	return s.GetToken(stParserR_EDGE, 0)
}

func (s *Type_declarationContext) F_EDGE() antlr.TerminalNode {
	return s.GetToken(stParserF_EDGE, 0)
}

func (s *Type_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterType_declaration(s)
	}
}

func (s *Type_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitType_declaration(s)
	}
}

func (p *stParser) Type_declaration() (localctx IType_declarationContext) {
	localctx = NewType_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, stParserRULE_type_declaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(388)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 16, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(377)
			p.Array_specification()
		}

	case 2:
		{
			p.SetState(378)
			p.String_type_declaration()
		}

	case 3:
		{
			p.SetState(379)
			p.Subrange_spec_init()
		}

	case 4:
		{
			p.SetState(380)
			p.Structure_declaration()
		}

	case 5:
		{
			p.SetState(381)
			p.Enumerated_specification()
		}

	case 6:
		{
			p.SetState(382)
			p.Reference_specification()
		}

	case 7:
		{
			p.SetState(383)
			p.Data_type_name()
		}
		p.SetState(385)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == stParserF_EDGE || _la == stParserR_EDGE {
			{
				p.SetState(384)
				_la = p.GetTokenStream().LA(1)

				if !(_la == stParserF_EDGE || _la == stParserR_EDGE) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}

	case 8:
		{
			p.SetState(387)
			p.Enumerated_specification()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.SetState(392)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == stParserASSIGN {
		{
			p.SetState(390)
			p.Match(stParserASSIGN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(391)

			var _x = p.Initializations()

			localctx.(*Type_declarationContext).i = _x
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInitializationsContext is an interface to support dynamic dispatch.
type IInitializationsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsInitializationsContext differentiates from other interfaces.
	IsInitializationsContext()
}

type InitializationsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitializationsContext() *InitializationsContext {
	var p = new(InitializationsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_initializations
	return p
}

func InitEmptyInitializationsContext(p *InitializationsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_initializations
}

func (*InitializationsContext) IsInitializationsContext() {}

func NewInitializationsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitializationsContext {
	var p = new(InitializationsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_initializations

	return p
}

func (s *InitializationsContext) GetParser() antlr.Parser { return s.parser }

func (s *InitializationsContext) CopyAll(ctx *InitializationsContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *InitializationsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitializationsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Initializations_array_initializationContext struct {
	InitializationsContext
}

func NewInitializations_array_initializationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Initializations_array_initializationContext {
	var p = new(Initializations_array_initializationContext)

	InitEmptyInitializationsContext(&p.InitializationsContext)
	p.parser = parser
	p.CopyAll(ctx.(*InitializationsContext))

	return p
}

func (s *Initializations_array_initializationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Initializations_array_initializationContext) Array_initialization() IArray_initializationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArray_initializationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArray_initializationContext)
}

func (s *Initializations_array_initializationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterInitializations_array_initialization(s)
	}
}

func (s *Initializations_array_initializationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitInitializations_array_initialization(s)
	}
}

type Initializations_structure_initializationContext struct {
	InitializationsContext
}

func NewInitializations_structure_initializationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Initializations_structure_initializationContext {
	var p = new(Initializations_structure_initializationContext)

	InitEmptyInitializationsContext(&p.InitializationsContext)
	p.parser = parser
	p.CopyAll(ctx.(*InitializationsContext))

	return p
}

func (s *Initializations_structure_initializationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Initializations_structure_initializationContext) Structure_initialization() IStructure_initializationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructure_initializationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructure_initializationContext)
}

func (s *Initializations_structure_initializationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterInitializations_structure_initialization(s)
	}
}

func (s *Initializations_structure_initializationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitInitializations_structure_initialization(s)
	}
}

type Initializations_identifierContext struct {
	InitializationsContext
}

func NewInitializations_identifierContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Initializations_identifierContext {
	var p = new(Initializations_identifierContext)

	InitEmptyInitializationsContext(&p.InitializationsContext)
	p.parser = parser
	p.CopyAll(ctx.(*InitializationsContext))

	return p
}

func (s *Initializations_identifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Initializations_identifierContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(stParserIDENTIFIER, 0)
}

func (s *Initializations_identifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterInitializations_identifier(s)
	}
}

func (s *Initializations_identifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitInitializations_identifier(s)
	}
}

type Initializations_constantContext struct {
	InitializationsContext
}

func NewInitializations_constantContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Initializations_constantContext {
	var p = new(Initializations_constantContext)

	InitEmptyInitializationsContext(&p.InitializationsContext)
	p.parser = parser
	p.CopyAll(ctx.(*InitializationsContext))

	return p
}

func (s *Initializations_constantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Initializations_constantContext) Constant() IConstantContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstantContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *Initializations_constantContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterInitializations_constant(s)
	}
}

func (s *Initializations_constantContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitInitializations_constant(s)
	}
}

func (p *stParser) Initializations() (localctx IInitializationsContext) {
	localctx = NewInitializationsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, stParserRULE_initializations)
	p.SetState(398)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case stParserMINUS, stParserNULL, stParserREF, stParserCAST_LITERAL, stParserINTEGER_LITERAL, stParserBITS_LITERAL, stParserREAL_LITERAL, stParserTIME_LITERAL, stParserDATE_LITERAL, stParserTOD_LITERAL, stParserDATETIME, stParserSTRING_LITERAL, stParserWSTRING_LITERAL:
		localctx = NewInitializations_constantContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(394)
			p.Constant()
		}

	case stParserIDENTIFIER:
		localctx = NewInitializations_identifierContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(395)
			p.Match(stParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case stParserLBRACKET:
		localctx = NewInitializations_array_initializationContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(396)
			p.Array_initialization()
		}

	case stParserLPAREN:
		localctx = NewInitializations_structure_initializationContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(397)
			p.Structure_initialization()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISubrange_spec_initContext is an interface to support dynamic dispatch.
type ISubrange_spec_initContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Integer_type_name() IInteger_type_nameContext
	LPAREN() antlr.TerminalNode
	Subrange() ISubrangeContext
	RPAREN() antlr.TerminalNode

	// IsSubrange_spec_initContext differentiates from other interfaces.
	IsSubrange_spec_initContext()
}

type Subrange_spec_initContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubrange_spec_initContext() *Subrange_spec_initContext {
	var p = new(Subrange_spec_initContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_subrange_spec_init
	return p
}

func InitEmptySubrange_spec_initContext(p *Subrange_spec_initContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_subrange_spec_init
}

func (*Subrange_spec_initContext) IsSubrange_spec_initContext() {}

func NewSubrange_spec_initContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Subrange_spec_initContext {
	var p = new(Subrange_spec_initContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_subrange_spec_init

	return p
}

func (s *Subrange_spec_initContext) GetParser() antlr.Parser { return s.parser }

func (s *Subrange_spec_initContext) Integer_type_name() IInteger_type_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInteger_type_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInteger_type_nameContext)
}

func (s *Subrange_spec_initContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(stParserLPAREN, 0)
}

func (s *Subrange_spec_initContext) Subrange() ISubrangeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISubrangeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISubrangeContext)
}

func (s *Subrange_spec_initContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(stParserRPAREN, 0)
}

func (s *Subrange_spec_initContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Subrange_spec_initContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Subrange_spec_initContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterSubrange_spec_init(s)
	}
}

func (s *Subrange_spec_initContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitSubrange_spec_init(s)
	}
}

func (p *stParser) Subrange_spec_init() (localctx ISubrange_spec_initContext) {
	localctx = NewSubrange_spec_initContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, stParserRULE_subrange_spec_init)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(400)
		p.Integer_type_name()
	}
	{
		p.SetState(401)
		p.Match(stParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(402)
		p.Subrange()
	}
	{
		p.SetState(403)
		p.Match(stParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISubrangeContext is an interface to support dynamic dispatch.
type ISubrangeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetC returns the c rule contexts.
	GetC() IIntegerContext

	// GetD returns the d rule contexts.
	GetD() IIntegerContext

	// SetC sets the c rule contexts.
	SetC(IIntegerContext)

	// SetD sets the d rule contexts.
	SetD(IIntegerContext)

	// Getter signatures
	RANGE() antlr.TerminalNode
	AllInteger() []IIntegerContext
	Integer(i int) IIntegerContext

	// IsSubrangeContext differentiates from other interfaces.
	IsSubrangeContext()
}

type SubrangeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	c      IIntegerContext
	d      IIntegerContext
}

func NewEmptySubrangeContext() *SubrangeContext {
	var p = new(SubrangeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_subrange
	return p
}

func InitEmptySubrangeContext(p *SubrangeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_subrange
}

func (*SubrangeContext) IsSubrangeContext() {}

func NewSubrangeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubrangeContext {
	var p = new(SubrangeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_subrange

	return p
}

func (s *SubrangeContext) GetParser() antlr.Parser { return s.parser }

func (s *SubrangeContext) GetC() IIntegerContext { return s.c }

func (s *SubrangeContext) GetD() IIntegerContext { return s.d }

func (s *SubrangeContext) SetC(v IIntegerContext) { s.c = v }

func (s *SubrangeContext) SetD(v IIntegerContext) { s.d = v }

func (s *SubrangeContext) RANGE() antlr.TerminalNode {
	return s.GetToken(stParserRANGE, 0)
}

func (s *SubrangeContext) AllInteger() []IIntegerContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIntegerContext); ok {
			len++
		}
	}

	tst := make([]IIntegerContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIntegerContext); ok {
			tst[i] = t.(IIntegerContext)
			i++
		}
	}

	return tst
}

func (s *SubrangeContext) Integer(i int) IIntegerContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerContext)
}

func (s *SubrangeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubrangeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SubrangeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterSubrange(s)
	}
}

func (s *SubrangeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitSubrange(s)
	}
}

func (p *stParser) Subrange() (localctx ISubrangeContext) {
	localctx = NewSubrangeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, stParserRULE_subrange)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(405)

		var _x = p.Integer()

		localctx.(*SubrangeContext).c = _x
	}
	{
		p.SetState(406)
		p.Match(stParserRANGE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(407)

		var _x = p.Integer()

		localctx.(*SubrangeContext).d = _x
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEnumerated_specificationContext is an interface to support dynamic dispatch.
type IEnumerated_specificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_IDENTIFIER returns the _IDENTIFIER token.
	Get_IDENTIFIER() antlr.Token

	// Set_IDENTIFIER sets the _IDENTIFIER token.
	Set_IDENTIFIER(antlr.Token)

	// GetValue returns the value token list.
	GetValue() []antlr.Token

	// SetValue sets the value token list.
	SetValue([]antlr.Token)

	// Getter signatures
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	AllIDENTIFIER() []antlr.TerminalNode
	IDENTIFIER(i int) antlr.TerminalNode
	AllASSIGN() []antlr.TerminalNode
	ASSIGN(i int) antlr.TerminalNode
	AllInteger() []IIntegerContext
	Integer(i int) IIntegerContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsEnumerated_specificationContext differentiates from other interfaces.
	IsEnumerated_specificationContext()
}

type Enumerated_specificationContext struct {
	antlr.BaseParserRuleContext
	parser      antlr.Parser
	_IDENTIFIER antlr.Token
	value       []antlr.Token
}

func NewEmptyEnumerated_specificationContext() *Enumerated_specificationContext {
	var p = new(Enumerated_specificationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_enumerated_specification
	return p
}

func InitEmptyEnumerated_specificationContext(p *Enumerated_specificationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_enumerated_specification
}

func (*Enumerated_specificationContext) IsEnumerated_specificationContext() {}

func NewEnumerated_specificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Enumerated_specificationContext {
	var p = new(Enumerated_specificationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_enumerated_specification

	return p
}

func (s *Enumerated_specificationContext) GetParser() antlr.Parser { return s.parser }

func (s *Enumerated_specificationContext) Get_IDENTIFIER() antlr.Token { return s._IDENTIFIER }

func (s *Enumerated_specificationContext) Set_IDENTIFIER(v antlr.Token) { s._IDENTIFIER = v }

func (s *Enumerated_specificationContext) GetValue() []antlr.Token { return s.value }

func (s *Enumerated_specificationContext) SetValue(v []antlr.Token) { s.value = v }

func (s *Enumerated_specificationContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(stParserLPAREN, 0)
}

func (s *Enumerated_specificationContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(stParserRPAREN, 0)
}

func (s *Enumerated_specificationContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(stParserIDENTIFIER)
}

func (s *Enumerated_specificationContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(stParserIDENTIFIER, i)
}

func (s *Enumerated_specificationContext) AllASSIGN() []antlr.TerminalNode {
	return s.GetTokens(stParserASSIGN)
}

func (s *Enumerated_specificationContext) ASSIGN(i int) antlr.TerminalNode {
	return s.GetToken(stParserASSIGN, i)
}

func (s *Enumerated_specificationContext) AllInteger() []IIntegerContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIntegerContext); ok {
			len++
		}
	}

	tst := make([]IIntegerContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIntegerContext); ok {
			tst[i] = t.(IIntegerContext)
			i++
		}
	}

	return tst
}

func (s *Enumerated_specificationContext) Integer(i int) IIntegerContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerContext)
}

func (s *Enumerated_specificationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(stParserCOMMA)
}

func (s *Enumerated_specificationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(stParserCOMMA, i)
}

func (s *Enumerated_specificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Enumerated_specificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Enumerated_specificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterEnumerated_specification(s)
	}
}

func (s *Enumerated_specificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitEnumerated_specification(s)
	}
}

func (p *stParser) Enumerated_specification() (localctx IEnumerated_specificationContext) {
	localctx = NewEnumerated_specificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, stParserRULE_enumerated_specification)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(409)
		p.Match(stParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(410)

		var _m = p.Match(stParserIDENTIFIER)

		localctx.(*Enumerated_specificationContext)._IDENTIFIER = _m
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	localctx.(*Enumerated_specificationContext).value = append(localctx.(*Enumerated_specificationContext).value, localctx.(*Enumerated_specificationContext)._IDENTIFIER)
	p.SetState(413)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == stParserASSIGN {
		{
			p.SetState(411)
			p.Match(stParserASSIGN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(412)
			p.Integer()
		}

	}
	p.SetState(423)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == stParserCOMMA {
		{
			p.SetState(415)
			p.Match(stParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(416)

			var _m = p.Match(stParserIDENTIFIER)

			localctx.(*Enumerated_specificationContext)._IDENTIFIER = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*Enumerated_specificationContext).value = append(localctx.(*Enumerated_specificationContext).value, localctx.(*Enumerated_specificationContext)._IDENTIFIER)
		p.SetState(419)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == stParserASSIGN {
			{
				p.SetState(417)
				p.Match(stParserASSIGN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(418)
				p.Integer()
			}

		}

		p.SetState(425)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(426)
		p.Match(stParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArray_specificationContext is an interface to support dynamic dispatch.
type IArray_specificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_subrange returns the _subrange rule contexts.
	Get_subrange() ISubrangeContext

	// Set_subrange sets the _subrange rule contexts.
	Set_subrange(ISubrangeContext)

	// GetRanges returns the ranges rule context list.
	GetRanges() []ISubrangeContext

	// SetRanges sets the ranges rule context list.
	SetRanges([]ISubrangeContext)

	// Getter signatures
	ARRAY() antlr.TerminalNode
	LBRACKET() antlr.TerminalNode
	RBRACKET() antlr.TerminalNode
	OF() antlr.TerminalNode
	AllSubrange() []ISubrangeContext
	Subrange(i int) ISubrangeContext
	String_type_declaration() IString_type_declarationContext
	Non_generic_type_name() INon_generic_type_nameContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsArray_specificationContext differentiates from other interfaces.
	IsArray_specificationContext()
}

type Array_specificationContext struct {
	antlr.BaseParserRuleContext
	parser    antlr.Parser
	_subrange ISubrangeContext
	ranges    []ISubrangeContext
}

func NewEmptyArray_specificationContext() *Array_specificationContext {
	var p = new(Array_specificationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_array_specification
	return p
}

func InitEmptyArray_specificationContext(p *Array_specificationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_array_specification
}

func (*Array_specificationContext) IsArray_specificationContext() {}

func NewArray_specificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_specificationContext {
	var p = new(Array_specificationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_array_specification

	return p
}

func (s *Array_specificationContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_specificationContext) Get_subrange() ISubrangeContext { return s._subrange }

func (s *Array_specificationContext) Set_subrange(v ISubrangeContext) { s._subrange = v }

func (s *Array_specificationContext) GetRanges() []ISubrangeContext { return s.ranges }

func (s *Array_specificationContext) SetRanges(v []ISubrangeContext) { s.ranges = v }

func (s *Array_specificationContext) ARRAY() antlr.TerminalNode {
	return s.GetToken(stParserARRAY, 0)
}

func (s *Array_specificationContext) LBRACKET() antlr.TerminalNode {
	return s.GetToken(stParserLBRACKET, 0)
}

func (s *Array_specificationContext) RBRACKET() antlr.TerminalNode {
	return s.GetToken(stParserRBRACKET, 0)
}

func (s *Array_specificationContext) OF() antlr.TerminalNode {
	return s.GetToken(stParserOF, 0)
}

func (s *Array_specificationContext) AllSubrange() []ISubrangeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISubrangeContext); ok {
			len++
		}
	}

	tst := make([]ISubrangeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISubrangeContext); ok {
			tst[i] = t.(ISubrangeContext)
			i++
		}
	}

	return tst
}

func (s *Array_specificationContext) Subrange(i int) ISubrangeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISubrangeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISubrangeContext)
}

func (s *Array_specificationContext) String_type_declaration() IString_type_declarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_type_declarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_type_declarationContext)
}

func (s *Array_specificationContext) Non_generic_type_name() INon_generic_type_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INon_generic_type_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INon_generic_type_nameContext)
}

func (s *Array_specificationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(stParserCOMMA)
}

func (s *Array_specificationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(stParserCOMMA, i)
}

func (s *Array_specificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_specificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Array_specificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterArray_specification(s)
	}
}

func (s *Array_specificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitArray_specification(s)
	}
}

func (p *stParser) Array_specification() (localctx IArray_specificationContext) {
	localctx = NewArray_specificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, stParserRULE_array_specification)
	var _la int

	p.SetState(445)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case stParserASSIGN, stParserSEMICOLON:
		p.EnterOuterAlt(localctx, 1)

	case stParserARRAY:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(429)
			p.Match(stParserARRAY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(430)
			p.Match(stParserLBRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(431)

			var _x = p.Subrange()

			localctx.(*Array_specificationContext)._subrange = _x
		}
		localctx.(*Array_specificationContext).ranges = append(localctx.(*Array_specificationContext).ranges, localctx.(*Array_specificationContext)._subrange)
		p.SetState(436)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == stParserCOMMA {
			{
				p.SetState(432)
				p.Match(stParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(433)

				var _x = p.Subrange()

				localctx.(*Array_specificationContext)._subrange = _x
			}
			localctx.(*Array_specificationContext).ranges = append(localctx.(*Array_specificationContext).ranges, localctx.(*Array_specificationContext)._subrange)

			p.SetState(438)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(439)
			p.Match(stParserRBRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(440)
			p.Match(stParserOF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(443)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 23, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(441)
				p.String_type_declaration()
			}

		case 2:
			{
				p.SetState(442)
				p.Non_generic_type_name()
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArray_initializationContext is an interface to support dynamic dispatch.
type IArray_initializationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LBRACKET() antlr.TerminalNode
	AllArray_initial_elements() []IArray_initial_elementsContext
	Array_initial_elements(i int) IArray_initial_elementsContext
	RBRACKET() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsArray_initializationContext differentiates from other interfaces.
	IsArray_initializationContext()
}

type Array_initializationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArray_initializationContext() *Array_initializationContext {
	var p = new(Array_initializationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_array_initialization
	return p
}

func InitEmptyArray_initializationContext(p *Array_initializationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_array_initialization
}

func (*Array_initializationContext) IsArray_initializationContext() {}

func NewArray_initializationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_initializationContext {
	var p = new(Array_initializationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_array_initialization

	return p
}

func (s *Array_initializationContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_initializationContext) LBRACKET() antlr.TerminalNode {
	return s.GetToken(stParserLBRACKET, 0)
}

func (s *Array_initializationContext) AllArray_initial_elements() []IArray_initial_elementsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IArray_initial_elementsContext); ok {
			len++
		}
	}

	tst := make([]IArray_initial_elementsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IArray_initial_elementsContext); ok {
			tst[i] = t.(IArray_initial_elementsContext)
			i++
		}
	}

	return tst
}

func (s *Array_initializationContext) Array_initial_elements(i int) IArray_initial_elementsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArray_initial_elementsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArray_initial_elementsContext)
}

func (s *Array_initializationContext) RBRACKET() antlr.TerminalNode {
	return s.GetToken(stParserRBRACKET, 0)
}

func (s *Array_initializationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(stParserCOMMA)
}

func (s *Array_initializationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(stParserCOMMA, i)
}

func (s *Array_initializationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_initializationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Array_initializationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterArray_initialization(s)
	}
}

func (s *Array_initializationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitArray_initialization(s)
	}
}

func (p *stParser) Array_initialization() (localctx IArray_initializationContext) {
	localctx = NewArray_initializationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, stParserRULE_array_initialization)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(447)
		p.Match(stParserLBRACKET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(448)
		p.Array_initial_elements()
	}
	p.SetState(453)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 25, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(449)
				p.Match(stParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(450)
				p.Array_initial_elements()
			}

		}
		p.SetState(455)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 25, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(457)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == stParserCOMMA {
		{
			p.SetState(456)
			p.Match(stParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(459)
		p.Match(stParserRBRACKET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArray_initial_elementsContext is an interface to support dynamic dispatch.
type IArray_initial_elementsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Array_initial_element() IArray_initial_elementContext
	Integer() IIntegerContext
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode

	// IsArray_initial_elementsContext differentiates from other interfaces.
	IsArray_initial_elementsContext()
}

type Array_initial_elementsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArray_initial_elementsContext() *Array_initial_elementsContext {
	var p = new(Array_initial_elementsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_array_initial_elements
	return p
}

func InitEmptyArray_initial_elementsContext(p *Array_initial_elementsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_array_initial_elements
}

func (*Array_initial_elementsContext) IsArray_initial_elementsContext() {}

func NewArray_initial_elementsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_initial_elementsContext {
	var p = new(Array_initial_elementsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_array_initial_elements

	return p
}

func (s *Array_initial_elementsContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_initial_elementsContext) Array_initial_element() IArray_initial_elementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArray_initial_elementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArray_initial_elementContext)
}

func (s *Array_initial_elementsContext) Integer() IIntegerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerContext)
}

func (s *Array_initial_elementsContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(stParserLPAREN, 0)
}

func (s *Array_initial_elementsContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(stParserRPAREN, 0)
}

func (s *Array_initial_elementsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_initial_elementsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Array_initial_elementsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterArray_initial_elements(s)
	}
}

func (s *Array_initial_elementsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitArray_initial_elements(s)
	}
}

func (p *stParser) Array_initial_elements() (localctx IArray_initial_elementsContext) {
	localctx = NewArray_initial_elementsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, stParserRULE_array_initial_elements)
	var _la int

	p.SetState(469)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 28, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(461)
			p.Array_initial_element()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(462)
			p.Integer()
		}
		{
			p.SetState(463)
			p.Match(stParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(465)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64((_la-107)) & ^0x3f) == 0 && ((int64(1)<<(_la-107))&-1152921503931564007) != 0) || ((int64((_la-171)) & ^0x3f) == 0 && ((int64(1)<<(_la-171))&55) != 0) {
			{
				p.SetState(464)
				p.Array_initial_element()
			}

		}
		{
			p.SetState(467)
			p.Match(stParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArray_initial_elementContext is an interface to support dynamic dispatch.
type IArray_initial_elementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Constant() IConstantContext
	Structure_initialization() IStructure_initializationContext
	Array_initialization() IArray_initializationContext

	// IsArray_initial_elementContext differentiates from other interfaces.
	IsArray_initial_elementContext()
}

type Array_initial_elementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArray_initial_elementContext() *Array_initial_elementContext {
	var p = new(Array_initial_elementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_array_initial_element
	return p
}

func InitEmptyArray_initial_elementContext(p *Array_initial_elementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_array_initial_element
}

func (*Array_initial_elementContext) IsArray_initial_elementContext() {}

func NewArray_initial_elementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_initial_elementContext {
	var p = new(Array_initial_elementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_array_initial_element

	return p
}

func (s *Array_initial_elementContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_initial_elementContext) Constant() IConstantContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstantContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *Array_initial_elementContext) Structure_initialization() IStructure_initializationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructure_initializationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructure_initializationContext)
}

func (s *Array_initial_elementContext) Array_initialization() IArray_initializationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArray_initializationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArray_initializationContext)
}

func (s *Array_initial_elementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_initial_elementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Array_initial_elementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterArray_initial_element(s)
	}
}

func (s *Array_initial_elementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitArray_initial_element(s)
	}
}

func (p *stParser) Array_initial_element() (localctx IArray_initial_elementContext) {
	localctx = NewArray_initial_elementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, stParserRULE_array_initial_element)
	p.SetState(474)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case stParserMINUS, stParserNULL, stParserREF, stParserCAST_LITERAL, stParserINTEGER_LITERAL, stParserBITS_LITERAL, stParserREAL_LITERAL, stParserTIME_LITERAL, stParserDATE_LITERAL, stParserTOD_LITERAL, stParserDATETIME, stParserSTRING_LITERAL, stParserWSTRING_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(471)
			p.Constant()
		}

	case stParserLPAREN:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(472)
			p.Structure_initialization()
		}

	case stParserLBRACKET:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(473)
			p.Array_initialization()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStructure_declarationContext is an interface to support dynamic dispatch.
type IStructure_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_name returns the _name rule contexts.
	Get_name() INameContext

	// Get_type_declaration returns the _type_declaration rule contexts.
	Get_type_declaration() IType_declarationContext

	// Set_name sets the _name rule contexts.
	Set_name(INameContext)

	// Set_type_declaration sets the _type_declaration rule contexts.
	Set_type_declaration(IType_declarationContext)

	// GetIds returns the ids rule context list.
	GetIds() []INameContext

	// GetTds returns the tds rule context list.
	GetTds() []IType_declarationContext

	// SetIds sets the ids rule context list.
	SetIds([]INameContext)

	// SetTds sets the tds rule context list.
	SetTds([]IType_declarationContext)

	// Getter signatures
	STRUCT() antlr.TerminalNode
	END_STRUCT() antlr.TerminalNode
	AllCOLON() []antlr.TerminalNode
	COLON(i int) antlr.TerminalNode
	AllSEMICOLON() []antlr.TerminalNode
	SEMICOLON(i int) antlr.TerminalNode
	AllName() []INameContext
	Name(i int) INameContext
	AllType_declaration() []IType_declarationContext
	Type_declaration(i int) IType_declarationContext

	// IsStructure_declarationContext differentiates from other interfaces.
	IsStructure_declarationContext()
}

type Structure_declarationContext struct {
	antlr.BaseParserRuleContext
	parser            antlr.Parser
	_name             INameContext
	ids               []INameContext
	_type_declaration IType_declarationContext
	tds               []IType_declarationContext
}

func NewEmptyStructure_declarationContext() *Structure_declarationContext {
	var p = new(Structure_declarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_structure_declaration
	return p
}

func InitEmptyStructure_declarationContext(p *Structure_declarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_structure_declaration
}

func (*Structure_declarationContext) IsStructure_declarationContext() {}

func NewStructure_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Structure_declarationContext {
	var p = new(Structure_declarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_structure_declaration

	return p
}

func (s *Structure_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Structure_declarationContext) Get_name() INameContext { return s._name }

func (s *Structure_declarationContext) Get_type_declaration() IType_declarationContext {
	return s._type_declaration
}

func (s *Structure_declarationContext) Set_name(v INameContext) { s._name = v }

func (s *Structure_declarationContext) Set_type_declaration(v IType_declarationContext) {
	s._type_declaration = v
}

func (s *Structure_declarationContext) GetIds() []INameContext { return s.ids }

func (s *Structure_declarationContext) GetTds() []IType_declarationContext { return s.tds }

func (s *Structure_declarationContext) SetIds(v []INameContext) { s.ids = v }

func (s *Structure_declarationContext) SetTds(v []IType_declarationContext) { s.tds = v }

func (s *Structure_declarationContext) STRUCT() antlr.TerminalNode {
	return s.GetToken(stParserSTRUCT, 0)
}

func (s *Structure_declarationContext) END_STRUCT() antlr.TerminalNode {
	return s.GetToken(stParserEND_STRUCT, 0)
}

func (s *Structure_declarationContext) AllCOLON() []antlr.TerminalNode {
	return s.GetTokens(stParserCOLON)
}

func (s *Structure_declarationContext) COLON(i int) antlr.TerminalNode {
	return s.GetToken(stParserCOLON, i)
}

func (s *Structure_declarationContext) AllSEMICOLON() []antlr.TerminalNode {
	return s.GetTokens(stParserSEMICOLON)
}

func (s *Structure_declarationContext) SEMICOLON(i int) antlr.TerminalNode {
	return s.GetToken(stParserSEMICOLON, i)
}

func (s *Structure_declarationContext) AllName() []INameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INameContext); ok {
			len++
		}
	}

	tst := make([]INameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INameContext); ok {
			tst[i] = t.(INameContext)
			i++
		}
	}

	return tst
}

func (s *Structure_declarationContext) Name(i int) INameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Structure_declarationContext) AllType_declaration() []IType_declarationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IType_declarationContext); ok {
			len++
		}
	}

	tst := make([]IType_declarationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IType_declarationContext); ok {
			tst[i] = t.(IType_declarationContext)
			i++
		}
	}

	return tst
}

func (s *Structure_declarationContext) Type_declaration(i int) IType_declarationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_declarationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_declarationContext)
}

func (s *Structure_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Structure_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Structure_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterStructure_declaration(s)
	}
}

func (s *Structure_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitStructure_declaration(s)
	}
}

func (p *stParser) Structure_declaration() (localctx IStructure_declarationContext) {
	localctx = NewStructure_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, stParserRULE_structure_declaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(476)
		p.Match(stParserSTRUCT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(484)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == stParserIDENTIFIER {
		{
			p.SetState(477)

			var _x = p.Name()

			localctx.(*Structure_declarationContext)._name = _x
		}
		localctx.(*Structure_declarationContext).ids = append(localctx.(*Structure_declarationContext).ids, localctx.(*Structure_declarationContext)._name)
		{
			p.SetState(478)
			p.Match(stParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(479)

			var _x = p.Type_declaration()

			localctx.(*Structure_declarationContext)._type_declaration = _x
		}
		localctx.(*Structure_declarationContext).tds = append(localctx.(*Structure_declarationContext).tds, localctx.(*Structure_declarationContext)._type_declaration)
		{
			p.SetState(480)
			p.Match(stParserSEMICOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(486)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(487)
		p.Match(stParserEND_STRUCT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INameContext is an interface to support dynamic dispatch.
type INameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode

	// IsNameContext differentiates from other interfaces.
	IsNameContext()
}

type NameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameContext() *NameContext {
	var p = new(NameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_name
	return p
}

func InitEmptyNameContext(p *NameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_name
}

func (*NameContext) IsNameContext() {}

func NewNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameContext {
	var p = new(NameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_name

	return p
}

func (s *NameContext) GetParser() antlr.Parser { return s.parser }

func (s *NameContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(stParserIDENTIFIER, 0)
}

func (s *NameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterName(s)
	}
}

func (s *NameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitName(s)
	}
}

func (p *stParser) Name() (localctx INameContext) {
	localctx = NewNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, stParserRULE_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(489)
		p.Match(stParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStructure_initializationContext is an interface to support dynamic dispatch.
type IStructure_initializationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_name returns the _name rule contexts.
	Get_name() INameContext

	// Get_initializations returns the _initializations rule contexts.
	Get_initializations() IInitializationsContext

	// Set_name sets the _name rule contexts.
	Set_name(INameContext)

	// Set_initializations sets the _initializations rule contexts.
	Set_initializations(IInitializationsContext)

	// GetIDENT returns the IDENT rule context list.
	GetIDENT() []INameContext

	// GetInit returns the init rule context list.
	GetInit() []IInitializationsContext

	// SetIDENT sets the IDENT rule context list.
	SetIDENT([]INameContext)

	// SetInit sets the init rule context list.
	SetInit([]IInitializationsContext)

	// Getter signatures
	LPAREN() antlr.TerminalNode
	AllASSIGN() []antlr.TerminalNode
	ASSIGN(i int) antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	AllName() []INameContext
	Name(i int) INameContext
	AllInitializations() []IInitializationsContext
	Initializations(i int) IInitializationsContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsStructure_initializationContext differentiates from other interfaces.
	IsStructure_initializationContext()
}

type Structure_initializationContext struct {
	antlr.BaseParserRuleContext
	parser           antlr.Parser
	_name            INameContext
	IDENT            []INameContext
	_initializations IInitializationsContext
	init             []IInitializationsContext
}

func NewEmptyStructure_initializationContext() *Structure_initializationContext {
	var p = new(Structure_initializationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_structure_initialization
	return p
}

func InitEmptyStructure_initializationContext(p *Structure_initializationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_structure_initialization
}

func (*Structure_initializationContext) IsStructure_initializationContext() {}

func NewStructure_initializationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Structure_initializationContext {
	var p = new(Structure_initializationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_structure_initialization

	return p
}

func (s *Structure_initializationContext) GetParser() antlr.Parser { return s.parser }

func (s *Structure_initializationContext) Get_name() INameContext { return s._name }

func (s *Structure_initializationContext) Get_initializations() IInitializationsContext {
	return s._initializations
}

func (s *Structure_initializationContext) Set_name(v INameContext) { s._name = v }

func (s *Structure_initializationContext) Set_initializations(v IInitializationsContext) {
	s._initializations = v
}

func (s *Structure_initializationContext) GetIDENT() []INameContext { return s.IDENT }

func (s *Structure_initializationContext) GetInit() []IInitializationsContext { return s.init }

func (s *Structure_initializationContext) SetIDENT(v []INameContext) { s.IDENT = v }

func (s *Structure_initializationContext) SetInit(v []IInitializationsContext) { s.init = v }

func (s *Structure_initializationContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(stParserLPAREN, 0)
}

func (s *Structure_initializationContext) AllASSIGN() []antlr.TerminalNode {
	return s.GetTokens(stParserASSIGN)
}

func (s *Structure_initializationContext) ASSIGN(i int) antlr.TerminalNode {
	return s.GetToken(stParserASSIGN, i)
}

func (s *Structure_initializationContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(stParserRPAREN, 0)
}

func (s *Structure_initializationContext) AllName() []INameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INameContext); ok {
			len++
		}
	}

	tst := make([]INameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INameContext); ok {
			tst[i] = t.(INameContext)
			i++
		}
	}

	return tst
}

func (s *Structure_initializationContext) Name(i int) INameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Structure_initializationContext) AllInitializations() []IInitializationsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IInitializationsContext); ok {
			len++
		}
	}

	tst := make([]IInitializationsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IInitializationsContext); ok {
			tst[i] = t.(IInitializationsContext)
			i++
		}
	}

	return tst
}

func (s *Structure_initializationContext) Initializations(i int) IInitializationsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInitializationsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInitializationsContext)
}

func (s *Structure_initializationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(stParserCOMMA)
}

func (s *Structure_initializationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(stParserCOMMA, i)
}

func (s *Structure_initializationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Structure_initializationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Structure_initializationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterStructure_initialization(s)
	}
}

func (s *Structure_initializationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitStructure_initialization(s)
	}
}

func (p *stParser) Structure_initialization() (localctx IStructure_initializationContext) {
	localctx = NewStructure_initializationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, stParserRULE_structure_initialization)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(491)
		p.Match(stParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

	{
		p.SetState(492)

		var _x = p.Name()

		localctx.(*Structure_initializationContext)._name = _x
	}
	localctx.(*Structure_initializationContext).IDENT = append(localctx.(*Structure_initializationContext).IDENT, localctx.(*Structure_initializationContext)._name)

	{
		p.SetState(493)
		p.Match(stParserASSIGN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

	{
		p.SetState(494)

		var _x = p.Initializations()

		localctx.(*Structure_initializationContext)._initializations = _x
	}
	localctx.(*Structure_initializationContext).init = append(localctx.(*Structure_initializationContext).init, localctx.(*Structure_initializationContext)._initializations)

	p.SetState(502)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == stParserCOMMA {
		{
			p.SetState(495)
			p.Match(stParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		{
			p.SetState(496)

			var _x = p.Name()

			localctx.(*Structure_initializationContext)._name = _x
		}
		localctx.(*Structure_initializationContext).IDENT = append(localctx.(*Structure_initializationContext).IDENT, localctx.(*Structure_initializationContext)._name)

		{
			p.SetState(497)
			p.Match(stParserASSIGN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		{
			p.SetState(498)

			var _x = p.Initializations()

			localctx.(*Structure_initializationContext)._initializations = _x
		}
		localctx.(*Structure_initializationContext).init = append(localctx.(*Structure_initializationContext).init, localctx.(*Structure_initializationContext)._initializations)

		p.SetState(504)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(505)
		p.Match(stParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IString_type_declarationContext is an interface to support dynamic dispatch.
type IString_type_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetBaseType returns the baseType token.
	GetBaseType() antlr.Token

	// SetBaseType sets the baseType token.
	SetBaseType(antlr.Token)

	// Getter signatures
	STRING() antlr.TerminalNode
	WSTRING() antlr.TerminalNode
	LBRACKET() antlr.TerminalNode
	Integer() IIntegerContext
	RBRACKET() antlr.TerminalNode

	// IsString_type_declarationContext differentiates from other interfaces.
	IsString_type_declarationContext()
}

type String_type_declarationContext struct {
	antlr.BaseParserRuleContext
	parser   antlr.Parser
	baseType antlr.Token
}

func NewEmptyString_type_declarationContext() *String_type_declarationContext {
	var p = new(String_type_declarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_string_type_declaration
	return p
}

func InitEmptyString_type_declarationContext(p *String_type_declarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_string_type_declaration
}

func (*String_type_declarationContext) IsString_type_declarationContext() {}

func NewString_type_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *String_type_declarationContext {
	var p = new(String_type_declarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_string_type_declaration

	return p
}

func (s *String_type_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *String_type_declarationContext) GetBaseType() antlr.Token { return s.baseType }

func (s *String_type_declarationContext) SetBaseType(v antlr.Token) { s.baseType = v }

func (s *String_type_declarationContext) STRING() antlr.TerminalNode {
	return s.GetToken(stParserSTRING, 0)
}

func (s *String_type_declarationContext) WSTRING() antlr.TerminalNode {
	return s.GetToken(stParserWSTRING, 0)
}

func (s *String_type_declarationContext) LBRACKET() antlr.TerminalNode {
	return s.GetToken(stParserLBRACKET, 0)
}

func (s *String_type_declarationContext) Integer() IIntegerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerContext)
}

func (s *String_type_declarationContext) RBRACKET() antlr.TerminalNode {
	return s.GetToken(stParserRBRACKET, 0)
}

func (s *String_type_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *String_type_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *String_type_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterString_type_declaration(s)
	}
}

func (s *String_type_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitString_type_declaration(s)
	}
}

func (p *stParser) String_type_declaration() (localctx IString_type_declarationContext) {
	localctx = NewString_type_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, stParserRULE_string_type_declaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(507)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*String_type_declarationContext).baseType = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == stParserSTRING || _la == stParserWSTRING) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*String_type_declarationContext).baseType = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(512)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == stParserLBRACKET {
		{
			p.SetState(508)
			p.Match(stParserLBRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(509)
			p.Integer()
		}
		{
			p.SetState(510)
			p.Match(stParserRBRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IReference_specificationContext is an interface to support dynamic dispatch.
type IReference_specificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	REF_TO() antlr.TerminalNode
	Data_type_name() IData_type_nameContext

	// IsReference_specificationContext differentiates from other interfaces.
	IsReference_specificationContext()
}

type Reference_specificationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReference_specificationContext() *Reference_specificationContext {
	var p = new(Reference_specificationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_reference_specification
	return p
}

func InitEmptyReference_specificationContext(p *Reference_specificationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_reference_specification
}

func (*Reference_specificationContext) IsReference_specificationContext() {}

func NewReference_specificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Reference_specificationContext {
	var p = new(Reference_specificationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_reference_specification

	return p
}

func (s *Reference_specificationContext) GetParser() antlr.Parser { return s.parser }

func (s *Reference_specificationContext) REF_TO() antlr.TerminalNode {
	return s.GetToken(stParserREF_TO, 0)
}

func (s *Reference_specificationContext) Data_type_name() IData_type_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IData_type_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IData_type_nameContext)
}

func (s *Reference_specificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Reference_specificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Reference_specificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterReference_specification(s)
	}
}

func (s *Reference_specificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitReference_specification(s)
	}
}

func (p *stParser) Reference_specification() (localctx IReference_specificationContext) {
	localctx = NewReference_specificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, stParserRULE_reference_specification)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(514)
		p.Match(stParserREF_TO)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(515)
		p.Data_type_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IReference_valueContext is an interface to support dynamic dispatch.
type IReference_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetRef_to returns the ref_to rule contexts.
	GetRef_to() ISymbolic_variableContext

	// SetRef_to sets the ref_to rule contexts.
	SetRef_to(ISymbolic_variableContext)

	// Getter signatures
	REF() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	Symbolic_variable() ISymbolic_variableContext

	// IsReference_valueContext differentiates from other interfaces.
	IsReference_valueContext()
}

type Reference_valueContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	ref_to ISymbolic_variableContext
}

func NewEmptyReference_valueContext() *Reference_valueContext {
	var p = new(Reference_valueContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_reference_value
	return p
}

func InitEmptyReference_valueContext(p *Reference_valueContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_reference_value
}

func (*Reference_valueContext) IsReference_valueContext() {}

func NewReference_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Reference_valueContext {
	var p = new(Reference_valueContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_reference_value

	return p
}

func (s *Reference_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Reference_valueContext) GetRef_to() ISymbolic_variableContext { return s.ref_to }

func (s *Reference_valueContext) SetRef_to(v ISymbolic_variableContext) { s.ref_to = v }

func (s *Reference_valueContext) REF() antlr.TerminalNode {
	return s.GetToken(stParserREF, 0)
}

func (s *Reference_valueContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(stParserLPAREN, 0)
}

func (s *Reference_valueContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(stParserRPAREN, 0)
}

func (s *Reference_valueContext) Symbolic_variable() ISymbolic_variableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolic_variableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolic_variableContext)
}

func (s *Reference_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Reference_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Reference_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterReference_value(s)
	}
}

func (s *Reference_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitReference_value(s)
	}
}

func (p *stParser) Reference_value() (localctx IReference_valueContext) {
	localctx = NewReference_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, stParserRULE_reference_value)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(517)
		p.Match(stParserREF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(518)
		p.Match(stParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(519)

		var _x = p.Symbolic_variable()

		localctx.(*Reference_valueContext).ref_to = _x
	}
	{
		p.SetState(520)
		p.Match(stParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIdentifier_listContext is an interface to support dynamic dispatch.
type IIdentifier_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_variable_names returns the _variable_names rule contexts.
	Get_variable_names() IVariable_namesContext

	// Set_variable_names sets the _variable_names rule contexts.
	Set_variable_names(IVariable_namesContext)

	// GetNames returns the names rule context list.
	GetNames() []IVariable_namesContext

	// SetNames sets the names rule context list.
	SetNames([]IVariable_namesContext)

	// Getter signatures
	AllVariable_names() []IVariable_namesContext
	Variable_names(i int) IVariable_namesContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsIdentifier_listContext differentiates from other interfaces.
	IsIdentifier_listContext()
}

type Identifier_listContext struct {
	antlr.BaseParserRuleContext
	parser          antlr.Parser
	_variable_names IVariable_namesContext
	names           []IVariable_namesContext
}

func NewEmptyIdentifier_listContext() *Identifier_listContext {
	var p = new(Identifier_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_identifier_list
	return p
}

func InitEmptyIdentifier_listContext(p *Identifier_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_identifier_list
}

func (*Identifier_listContext) IsIdentifier_listContext() {}

func NewIdentifier_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Identifier_listContext {
	var p = new(Identifier_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_identifier_list

	return p
}

func (s *Identifier_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Identifier_listContext) Get_variable_names() IVariable_namesContext {
	return s._variable_names
}

func (s *Identifier_listContext) Set_variable_names(v IVariable_namesContext) { s._variable_names = v }

func (s *Identifier_listContext) GetNames() []IVariable_namesContext { return s.names }

func (s *Identifier_listContext) SetNames(v []IVariable_namesContext) { s.names = v }

func (s *Identifier_listContext) AllVariable_names() []IVariable_namesContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVariable_namesContext); ok {
			len++
		}
	}

	tst := make([]IVariable_namesContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVariable_namesContext); ok {
			tst[i] = t.(IVariable_namesContext)
			i++
		}
	}

	return tst
}

func (s *Identifier_listContext) Variable_names(i int) IVariable_namesContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariable_namesContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariable_namesContext)
}

func (s *Identifier_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(stParserCOMMA)
}

func (s *Identifier_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(stParserCOMMA, i)
}

func (s *Identifier_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Identifier_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Identifier_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterIdentifier_list(s)
	}
}

func (s *Identifier_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitIdentifier_list(s)
	}
}

func (p *stParser) Identifier_list() (localctx IIdentifier_listContext) {
	localctx = NewIdentifier_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, stParserRULE_identifier_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(522)

		var _x = p.Variable_names()

		localctx.(*Identifier_listContext)._variable_names = _x
	}
	localctx.(*Identifier_listContext).names = append(localctx.(*Identifier_listContext).names, localctx.(*Identifier_listContext)._variable_names)
	p.SetState(527)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == stParserCOMMA {
		{
			p.SetState(523)
			p.Match(stParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(524)

			var _x = p.Variable_names()

			localctx.(*Identifier_listContext)._variable_names = _x
		}
		localctx.(*Identifier_listContext).names = append(localctx.(*Identifier_listContext).names, localctx.(*Identifier_listContext)._variable_names)

		p.SetState(529)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunction_declarationContext is an interface to support dynamic dispatch.
type IFunction_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetReturnID returns the returnID token.
	GetReturnID() antlr.Token

	// SetReturnID sets the returnID token.
	SetReturnID(antlr.Token)

	// GetIdentifier returns the identifier rule contexts.
	GetIdentifier() INameContext

	// GetReturnET returns the returnET rule contexts.
	GetReturnET() IElementary_type_nameContext

	// SetIdentifier sets the identifier rule contexts.
	SetIdentifier(INameContext)

	// SetReturnET sets the returnET rule contexts.
	SetReturnET(IElementary_type_nameContext)

	// Getter signatures
	FUNCTION() antlr.TerminalNode
	COLON() antlr.TerminalNode
	Var_decls() IVar_declsContext
	FuncBody() IFuncBodyContext
	END_FUNCTION() antlr.TerminalNode
	Name() INameContext
	Elementary_type_name() IElementary_type_nameContext
	IDENTIFIER() antlr.TerminalNode

	// IsFunction_declarationContext differentiates from other interfaces.
	IsFunction_declarationContext()
}

type Function_declarationContext struct {
	antlr.BaseParserRuleContext
	parser     antlr.Parser
	identifier INameContext
	returnET   IElementary_type_nameContext
	returnID   antlr.Token
}

func NewEmptyFunction_declarationContext() *Function_declarationContext {
	var p = new(Function_declarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_function_declaration
	return p
}

func InitEmptyFunction_declarationContext(p *Function_declarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_function_declaration
}

func (*Function_declarationContext) IsFunction_declarationContext() {}

func NewFunction_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_declarationContext {
	var p = new(Function_declarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_function_declaration

	return p
}

func (s *Function_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_declarationContext) GetReturnID() antlr.Token { return s.returnID }

func (s *Function_declarationContext) SetReturnID(v antlr.Token) { s.returnID = v }

func (s *Function_declarationContext) GetIdentifier() INameContext { return s.identifier }

func (s *Function_declarationContext) GetReturnET() IElementary_type_nameContext { return s.returnET }

func (s *Function_declarationContext) SetIdentifier(v INameContext) { s.identifier = v }

func (s *Function_declarationContext) SetReturnET(v IElementary_type_nameContext) { s.returnET = v }

func (s *Function_declarationContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(stParserFUNCTION, 0)
}

func (s *Function_declarationContext) COLON() antlr.TerminalNode {
	return s.GetToken(stParserCOLON, 0)
}

func (s *Function_declarationContext) Var_decls() IVar_declsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVar_declsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVar_declsContext)
}

func (s *Function_declarationContext) FuncBody() IFuncBodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFuncBodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFuncBodyContext)
}

func (s *Function_declarationContext) END_FUNCTION() antlr.TerminalNode {
	return s.GetToken(stParserEND_FUNCTION, 0)
}

func (s *Function_declarationContext) Name() INameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Function_declarationContext) Elementary_type_name() IElementary_type_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElementary_type_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElementary_type_nameContext)
}

func (s *Function_declarationContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(stParserIDENTIFIER, 0)
}

func (s *Function_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterFunction_declaration(s)
	}
}

func (s *Function_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitFunction_declaration(s)
	}
}

func (p *stParser) Function_declaration() (localctx IFunction_declarationContext) {
	localctx = NewFunction_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, stParserRULE_function_declaration)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(530)
		p.Match(stParserFUNCTION)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(531)

		var _x = p.Name()

		localctx.(*Function_declarationContext).identifier = _x
	}
	{
		p.SetState(532)
		p.Match(stParserCOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(535)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case stParserANY, stParserANY_BIT, stParserANY_INT, stParserBOOL, stParserBYTE, stParserDATE_AND_TIME, stParserDINT, stParserDWORD, stParserINT, stParserLINT, stParserLREAL, stParserLWORD, stParserREAL, stParserSINT, stParserSTRING, stParserTIME, stParserTIME_OF_DAY, stParserUDINT, stParserUINT, stParserULINT, stParserUSINT, stParserWORD, stParserWSTRING, stParserDATE, stParserDT:
		{
			p.SetState(533)

			var _x = p.Elementary_type_name()

			localctx.(*Function_declarationContext).returnET = _x
		}

	case stParserIDENTIFIER:
		{
			p.SetState(534)

			var _m = p.Match(stParserIDENTIFIER)

			localctx.(*Function_declarationContext).returnID = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	{
		p.SetState(537)
		p.Var_decls()
	}
	{
		p.SetState(538)
		p.FuncBody()
	}
	{
		p.SetState(539)
		p.Match(stParserEND_FUNCTION)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVar_declsContext is an interface to support dynamic dispatch.
type IVar_declsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllVar_decl() []IVar_declContext
	Var_decl(i int) IVar_declContext

	// IsVar_declsContext differentiates from other interfaces.
	IsVar_declsContext()
}

type Var_declsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVar_declsContext() *Var_declsContext {
	var p = new(Var_declsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_var_decls
	return p
}

func InitEmptyVar_declsContext(p *Var_declsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_var_decls
}

func (*Var_declsContext) IsVar_declsContext() {}

func NewVar_declsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Var_declsContext {
	var p = new(Var_declsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_var_decls

	return p
}

func (s *Var_declsContext) GetParser() antlr.Parser { return s.parser }

func (s *Var_declsContext) AllVar_decl() []IVar_declContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVar_declContext); ok {
			len++
		}
	}

	tst := make([]IVar_declContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVar_declContext); ok {
			tst[i] = t.(IVar_declContext)
			i++
		}
	}

	return tst
}

func (s *Var_declsContext) Var_decl(i int) IVar_declContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVar_declContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVar_declContext)
}

func (s *Var_declsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Var_declsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Var_declsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterVar_decls(s)
	}
}

func (s *Var_declsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitVar_decls(s)
	}
}

func (p *stParser) Var_decls() (localctx IVar_declsContext) {
	localctx = NewVar_declsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, stParserRULE_var_decls)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(544)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-34)) & ^0x3f) == 0 && ((int64(1)<<(_la-34))&1089871109823660033) != 0 {
		{
			p.SetState(541)
			p.Var_decl()
		}

		p.SetState(546)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVar_declContext is an interface to support dynamic dispatch.
type IVar_declContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Variable_keyword() IVariable_keywordContext
	Var_decl_inner() IVar_decl_innerContext
	END_VAR() antlr.TerminalNode

	// IsVar_declContext differentiates from other interfaces.
	IsVar_declContext()
}

type Var_declContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVar_declContext() *Var_declContext {
	var p = new(Var_declContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_var_decl
	return p
}

func InitEmptyVar_declContext(p *Var_declContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_var_decl
}

func (*Var_declContext) IsVar_declContext() {}

func NewVar_declContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Var_declContext {
	var p = new(Var_declContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_var_decl

	return p
}

func (s *Var_declContext) GetParser() antlr.Parser { return s.parser }

func (s *Var_declContext) Variable_keyword() IVariable_keywordContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariable_keywordContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariable_keywordContext)
}

func (s *Var_declContext) Var_decl_inner() IVar_decl_innerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVar_decl_innerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVar_decl_innerContext)
}

func (s *Var_declContext) END_VAR() antlr.TerminalNode {
	return s.GetToken(stParserEND_VAR, 0)
}

func (s *Var_declContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Var_declContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Var_declContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterVar_decl(s)
	}
}

func (s *Var_declContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitVar_decl(s)
	}
}

func (p *stParser) Var_decl() (localctx IVar_declContext) {
	localctx = NewVar_declContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, stParserRULE_var_decl)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(547)
		p.Variable_keyword()
	}
	{
		p.SetState(548)
		p.Var_decl_inner()
	}
	{
		p.SetState(549)
		p.Match(stParserEND_VAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVar_decl_innerContext is an interface to support dynamic dispatch.
type IVar_decl_innerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTd returns the td rule contexts.
	GetTd() IType_declarationContext

	// SetTd sets the td rule contexts.
	SetTd(IType_declarationContext)

	// Getter signatures
	AllIdentifier_list() []IIdentifier_listContext
	Identifier_list(i int) IIdentifier_listContext
	AllCOLON() []antlr.TerminalNode
	COLON(i int) antlr.TerminalNode
	AllSEMICOLON() []antlr.TerminalNode
	SEMICOLON(i int) antlr.TerminalNode
	AllType_declaration() []IType_declarationContext
	Type_declaration(i int) IType_declarationContext

	// IsVar_decl_innerContext differentiates from other interfaces.
	IsVar_decl_innerContext()
}

type Var_decl_innerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	td     IType_declarationContext
}

func NewEmptyVar_decl_innerContext() *Var_decl_innerContext {
	var p = new(Var_decl_innerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_var_decl_inner
	return p
}

func InitEmptyVar_decl_innerContext(p *Var_decl_innerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_var_decl_inner
}

func (*Var_decl_innerContext) IsVar_decl_innerContext() {}

func NewVar_decl_innerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Var_decl_innerContext {
	var p = new(Var_decl_innerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_var_decl_inner

	return p
}

func (s *Var_decl_innerContext) GetParser() antlr.Parser { return s.parser }

func (s *Var_decl_innerContext) GetTd() IType_declarationContext { return s.td }

func (s *Var_decl_innerContext) SetTd(v IType_declarationContext) { s.td = v }

func (s *Var_decl_innerContext) AllIdentifier_list() []IIdentifier_listContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifier_listContext); ok {
			len++
		}
	}

	tst := make([]IIdentifier_listContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifier_listContext); ok {
			tst[i] = t.(IIdentifier_listContext)
			i++
		}
	}

	return tst
}

func (s *Var_decl_innerContext) Identifier_list(i int) IIdentifier_listContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifier_listContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Var_decl_innerContext) AllCOLON() []antlr.TerminalNode {
	return s.GetTokens(stParserCOLON)
}

func (s *Var_decl_innerContext) COLON(i int) antlr.TerminalNode {
	return s.GetToken(stParserCOLON, i)
}

func (s *Var_decl_innerContext) AllSEMICOLON() []antlr.TerminalNode {
	return s.GetTokens(stParserSEMICOLON)
}

func (s *Var_decl_innerContext) SEMICOLON(i int) antlr.TerminalNode {
	return s.GetToken(stParserSEMICOLON, i)
}

func (s *Var_decl_innerContext) AllType_declaration() []IType_declarationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IType_declarationContext); ok {
			len++
		}
	}

	tst := make([]IType_declarationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IType_declarationContext); ok {
			tst[i] = t.(IType_declarationContext)
			i++
		}
	}

	return tst
}

func (s *Var_decl_innerContext) Type_declaration(i int) IType_declarationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_declarationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_declarationContext)
}

func (s *Var_decl_innerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Var_decl_innerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Var_decl_innerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterVar_decl_inner(s)
	}
}

func (s *Var_decl_innerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitVar_decl_inner(s)
	}
}

func (p *stParser) Var_decl_inner() (localctx IVar_decl_innerContext) {
	localctx = NewVar_decl_innerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, stParserRULE_var_decl_inner)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(558)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-151)) & ^0x3f) == 0 && ((int64(1)<<(_la-151))&67124451) != 0 {
		{
			p.SetState(551)
			p.Identifier_list()
		}
		{
			p.SetState(552)
			p.Match(stParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(553)

			var _x = p.Type_declaration()

			localctx.(*Var_decl_innerContext).td = _x
		}
		{
			p.SetState(554)
			p.Match(stParserSEMICOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(560)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVariable_keywordContext is an interface to support dynamic dispatch.
type IVariable_keywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	VAR() antlr.TerminalNode
	VAR_INPUT() antlr.TerminalNode
	VAR_OUTPUT() antlr.TerminalNode
	VAR_IN_OUT() antlr.TerminalNode
	VAR_EXTERNAL() antlr.TerminalNode
	VAR_GLOBAL() antlr.TerminalNode
	Access_specifier() IAccess_specifierContext
	CONSTANT() antlr.TerminalNode
	RETAIN() antlr.TerminalNode
	NON_RETAIN() antlr.TerminalNode

	// IsVariable_keywordContext differentiates from other interfaces.
	IsVariable_keywordContext()
}

type Variable_keywordContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariable_keywordContext() *Variable_keywordContext {
	var p = new(Variable_keywordContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_variable_keyword
	return p
}

func InitEmptyVariable_keywordContext(p *Variable_keywordContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_variable_keyword
}

func (*Variable_keywordContext) IsVariable_keywordContext() {}

func NewVariable_keywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Variable_keywordContext {
	var p = new(Variable_keywordContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_variable_keyword

	return p
}

func (s *Variable_keywordContext) GetParser() antlr.Parser { return s.parser }

func (s *Variable_keywordContext) VAR() antlr.TerminalNode {
	return s.GetToken(stParserVAR, 0)
}

func (s *Variable_keywordContext) VAR_INPUT() antlr.TerminalNode {
	return s.GetToken(stParserVAR_INPUT, 0)
}

func (s *Variable_keywordContext) VAR_OUTPUT() antlr.TerminalNode {
	return s.GetToken(stParserVAR_OUTPUT, 0)
}

func (s *Variable_keywordContext) VAR_IN_OUT() antlr.TerminalNode {
	return s.GetToken(stParserVAR_IN_OUT, 0)
}

func (s *Variable_keywordContext) VAR_EXTERNAL() antlr.TerminalNode {
	return s.GetToken(stParserVAR_EXTERNAL, 0)
}

func (s *Variable_keywordContext) VAR_GLOBAL() antlr.TerminalNode {
	return s.GetToken(stParserVAR_GLOBAL, 0)
}

func (s *Variable_keywordContext) Access_specifier() IAccess_specifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAccess_specifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAccess_specifierContext)
}

func (s *Variable_keywordContext) CONSTANT() antlr.TerminalNode {
	return s.GetToken(stParserCONSTANT, 0)
}

func (s *Variable_keywordContext) RETAIN() antlr.TerminalNode {
	return s.GetToken(stParserRETAIN, 0)
}

func (s *Variable_keywordContext) NON_RETAIN() antlr.TerminalNode {
	return s.GetToken(stParserNON_RETAIN, 0)
}

func (s *Variable_keywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Variable_keywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Variable_keywordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterVariable_keyword(s)
	}
}

func (s *Variable_keywordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitVariable_keyword(s)
	}
}

func (p *stParser) Variable_keyword() (localctx IVariable_keywordContext) {
	localctx = NewVariable_keywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, stParserRULE_variable_keyword)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(561)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-34)) & ^0x3f) == 0 && ((int64(1)<<(_la-34))&1089871109823660033) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(563)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-39)) & ^0x3f) == 0 && ((int64(1)<<(_la-39))&275951648769) != 0 {
		{
			p.SetState(562)
			_la = p.GetTokenStream().LA(1)

			if !((int64((_la-39)) & ^0x3f) == 0 && ((int64(1)<<(_la-39))&275951648769) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(566)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-147)) & ^0x3f) == 0 && ((int64(1)<<(_la-147))&15) != 0 {
		{
			p.SetState(565)
			p.Access_specifier()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAccess_specifierContext is an interface to support dynamic dispatch.
type IAccess_specifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PUBLIC() antlr.TerminalNode
	PROTECTED() antlr.TerminalNode
	INTERNAL() antlr.TerminalNode
	PRIVATE() antlr.TerminalNode

	// IsAccess_specifierContext differentiates from other interfaces.
	IsAccess_specifierContext()
}

type Access_specifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAccess_specifierContext() *Access_specifierContext {
	var p = new(Access_specifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_access_specifier
	return p
}

func InitEmptyAccess_specifierContext(p *Access_specifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_access_specifier
}

func (*Access_specifierContext) IsAccess_specifierContext() {}

func NewAccess_specifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Access_specifierContext {
	var p = new(Access_specifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_access_specifier

	return p
}

func (s *Access_specifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Access_specifierContext) PUBLIC() antlr.TerminalNode {
	return s.GetToken(stParserPUBLIC, 0)
}

func (s *Access_specifierContext) PROTECTED() antlr.TerminalNode {
	return s.GetToken(stParserPROTECTED, 0)
}

func (s *Access_specifierContext) INTERNAL() antlr.TerminalNode {
	return s.GetToken(stParserINTERNAL, 0)
}

func (s *Access_specifierContext) PRIVATE() antlr.TerminalNode {
	return s.GetToken(stParserPRIVATE, 0)
}

func (s *Access_specifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Access_specifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Access_specifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterAccess_specifier(s)
	}
}

func (s *Access_specifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitAccess_specifier(s)
	}
}

func (p *stParser) Access_specifier() (localctx IAccess_specifierContext) {
	localctx = NewAccess_specifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, stParserRULE_access_specifier)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(568)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-147)) & ^0x3f) == 0 && ((int64(1)<<(_la-147))&15) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunction_block_declarationContext is an interface to support dynamic dispatch.
type IFunction_block_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIdentifier returns the identifier token.
	GetIdentifier() antlr.Token

	// GetInherit returns the inherit token.
	GetInherit() antlr.Token

	// SetIdentifier sets the identifier token.
	SetIdentifier(antlr.Token)

	// SetInherit sets the inherit token.
	SetInherit(antlr.Token)

	// GetInterfaces returns the interfaces rule contexts.
	GetInterfaces() IIdentifier_listContext

	// SetInterfaces sets the interfaces rule contexts.
	SetInterfaces(IIdentifier_listContext)

	// Getter signatures
	FUNCTION_BLOCK() antlr.TerminalNode
	Var_decls() IVar_declsContext
	Methods() IMethodsContext
	Body() IBodyContext
	END_FUNCTION_BLOCK() antlr.TerminalNode
	AllIDENTIFIER() []antlr.TerminalNode
	IDENTIFIER(i int) antlr.TerminalNode
	EXTENDS() antlr.TerminalNode
	IMPLEMENTS() antlr.TerminalNode
	AllAction_() []IActionContext
	Action_(i int) IActionContext
	FINAL() antlr.TerminalNode
	ABSTRACT() antlr.TerminalNode
	Identifier_list() IIdentifier_listContext

	// IsFunction_block_declarationContext differentiates from other interfaces.
	IsFunction_block_declarationContext()
}

type Function_block_declarationContext struct {
	antlr.BaseParserRuleContext
	parser     antlr.Parser
	identifier antlr.Token
	inherit    antlr.Token
	interfaces IIdentifier_listContext
}

func NewEmptyFunction_block_declarationContext() *Function_block_declarationContext {
	var p = new(Function_block_declarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_function_block_declaration
	return p
}

func InitEmptyFunction_block_declarationContext(p *Function_block_declarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_function_block_declaration
}

func (*Function_block_declarationContext) IsFunction_block_declarationContext() {}

func NewFunction_block_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_block_declarationContext {
	var p = new(Function_block_declarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_function_block_declaration

	return p
}

func (s *Function_block_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_block_declarationContext) GetIdentifier() antlr.Token { return s.identifier }

func (s *Function_block_declarationContext) GetInherit() antlr.Token { return s.inherit }

func (s *Function_block_declarationContext) SetIdentifier(v antlr.Token) { s.identifier = v }

func (s *Function_block_declarationContext) SetInherit(v antlr.Token) { s.inherit = v }

func (s *Function_block_declarationContext) GetInterfaces() IIdentifier_listContext {
	return s.interfaces
}

func (s *Function_block_declarationContext) SetInterfaces(v IIdentifier_listContext) {
	s.interfaces = v
}

func (s *Function_block_declarationContext) FUNCTION_BLOCK() antlr.TerminalNode {
	return s.GetToken(stParserFUNCTION_BLOCK, 0)
}

func (s *Function_block_declarationContext) Var_decls() IVar_declsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVar_declsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVar_declsContext)
}

func (s *Function_block_declarationContext) Methods() IMethodsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMethodsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMethodsContext)
}

func (s *Function_block_declarationContext) Body() IBodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBodyContext)
}

func (s *Function_block_declarationContext) END_FUNCTION_BLOCK() antlr.TerminalNode {
	return s.GetToken(stParserEND_FUNCTION_BLOCK, 0)
}

func (s *Function_block_declarationContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(stParserIDENTIFIER)
}

func (s *Function_block_declarationContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(stParserIDENTIFIER, i)
}

func (s *Function_block_declarationContext) EXTENDS() antlr.TerminalNode {
	return s.GetToken(stParserEXTENDS, 0)
}

func (s *Function_block_declarationContext) IMPLEMENTS() antlr.TerminalNode {
	return s.GetToken(stParserIMPLEMENTS, 0)
}

func (s *Function_block_declarationContext) AllAction_() []IActionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IActionContext); ok {
			len++
		}
	}

	tst := make([]IActionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IActionContext); ok {
			tst[i] = t.(IActionContext)
			i++
		}
	}

	return tst
}

func (s *Function_block_declarationContext) Action_(i int) IActionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IActionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IActionContext)
}

func (s *Function_block_declarationContext) FINAL() antlr.TerminalNode {
	return s.GetToken(stParserFINAL, 0)
}

func (s *Function_block_declarationContext) ABSTRACT() antlr.TerminalNode {
	return s.GetToken(stParserABSTRACT, 0)
}

func (s *Function_block_declarationContext) Identifier_list() IIdentifier_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifier_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Function_block_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_block_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_block_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterFunction_block_declaration(s)
	}
}

func (s *Function_block_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitFunction_block_declaration(s)
	}
}

func (p *stParser) Function_block_declaration() (localctx IFunction_block_declarationContext) {
	localctx = NewFunction_block_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, stParserRULE_function_block_declaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(570)
		p.Match(stParserFUNCTION_BLOCK)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(572)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == stParserFINAL || _la == stParserABSTRACT {
		{
			p.SetState(571)
			_la = p.GetTokenStream().LA(1)

			if !(_la == stParserFINAL || _la == stParserABSTRACT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(574)

		var _m = p.Match(stParserIDENTIFIER)

		localctx.(*Function_block_declarationContext).identifier = _m
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(577)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == stParserEXTENDS {
		{
			p.SetState(575)
			p.Match(stParserEXTENDS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(576)

			var _m = p.Match(stParserIDENTIFIER)

			localctx.(*Function_block_declarationContext).inherit = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(581)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == stParserIMPLEMENTS {
		{
			p.SetState(579)
			p.Match(stParserIMPLEMENTS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(580)

			var _x = p.Identifier_list()

			localctx.(*Function_block_declarationContext).interfaces = _x
		}

	}
	{
		p.SetState(583)
		p.Var_decls()
	}
	{
		p.SetState(584)
		p.Methods()
	}
	p.SetState(588)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == stParserACTION {
		{
			p.SetState(585)
			p.Action_()
		}

		p.SetState(590)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(591)
		p.Body()
	}
	{
		p.SetState(592)
		p.Match(stParserEND_FUNCTION_BLOCK)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBodyContext is an interface to support dynamic dispatch.
type IBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Sfc() ISfcContext
	IL_CODE() antlr.TerminalNode
	IlBody() IIlBodyContext
	Statement_list() IStatement_listContext

	// IsBodyContext differentiates from other interfaces.
	IsBodyContext()
}

type BodyContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBodyContext() *BodyContext {
	var p = new(BodyContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_body
	return p
}

func InitEmptyBodyContext(p *BodyContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_body
}

func (*BodyContext) IsBodyContext() {}

func NewBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BodyContext {
	var p = new(BodyContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_body

	return p
}

func (s *BodyContext) GetParser() antlr.Parser { return s.parser }

func (s *BodyContext) Sfc() ISfcContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISfcContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISfcContext)
}

func (s *BodyContext) IL_CODE() antlr.TerminalNode {
	return s.GetToken(stParserIL_CODE, 0)
}

func (s *BodyContext) IlBody() IIlBodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIlBodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIlBodyContext)
}

func (s *BodyContext) Statement_list() IStatement_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatement_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatement_listContext)
}

func (s *BodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterBody(s)
	}
}

func (s *BodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitBody(s)
	}
}

func (p *stParser) Body() (localctx IBodyContext) {
	localctx = NewBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, stParserRULE_body)
	p.SetState(598)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 43, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(594)
			p.Sfc()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(595)
			p.Match(stParserIL_CODE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(596)
			p.IlBody()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(597)
			p.Statement_list()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFuncBodyContext is an interface to support dynamic dispatch.
type IFuncBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Statement_list() IStatement_listContext

	// IsFuncBodyContext differentiates from other interfaces.
	IsFuncBodyContext()
}

type FuncBodyContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFuncBodyContext() *FuncBodyContext {
	var p = new(FuncBodyContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_funcBody
	return p
}

func InitEmptyFuncBodyContext(p *FuncBodyContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_funcBody
}

func (*FuncBodyContext) IsFuncBodyContext() {}

func NewFuncBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FuncBodyContext {
	var p = new(FuncBodyContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_funcBody

	return p
}

func (s *FuncBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *FuncBodyContext) Statement_list() IStatement_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatement_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatement_listContext)
}

func (s *FuncBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FuncBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FuncBodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterFuncBody(s)
	}
}

func (s *FuncBodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitFuncBody(s)
	}
}

func (p *stParser) FuncBody() (localctx IFuncBodyContext) {
	localctx = NewFuncBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, stParserRULE_funcBody)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(600)
		p.Statement_list()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInterface_declarationContext is an interface to support dynamic dispatch.
type IInterface_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIdentifier returns the identifier token.
	GetIdentifier() antlr.Token

	// SetIdentifier sets the identifier token.
	SetIdentifier(antlr.Token)

	// GetSp returns the sp rule contexts.
	GetSp() IIdentifier_listContext

	// SetSp sets the sp rule contexts.
	SetSp(IIdentifier_listContext)

	// Getter signatures
	INTERFACE() antlr.TerminalNode
	Var_decls() IVar_declsContext
	Methods() IMethodsContext
	END_INTERFACE() antlr.TerminalNode
	IDENTIFIER() antlr.TerminalNode
	EXTENDS() antlr.TerminalNode
	Identifier_list() IIdentifier_listContext

	// IsInterface_declarationContext differentiates from other interfaces.
	IsInterface_declarationContext()
}

type Interface_declarationContext struct {
	antlr.BaseParserRuleContext
	parser     antlr.Parser
	identifier antlr.Token
	sp         IIdentifier_listContext
}

func NewEmptyInterface_declarationContext() *Interface_declarationContext {
	var p = new(Interface_declarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_interface_declaration
	return p
}

func InitEmptyInterface_declarationContext(p *Interface_declarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_interface_declaration
}

func (*Interface_declarationContext) IsInterface_declarationContext() {}

func NewInterface_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Interface_declarationContext {
	var p = new(Interface_declarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_interface_declaration

	return p
}

func (s *Interface_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Interface_declarationContext) GetIdentifier() antlr.Token { return s.identifier }

func (s *Interface_declarationContext) SetIdentifier(v antlr.Token) { s.identifier = v }

func (s *Interface_declarationContext) GetSp() IIdentifier_listContext { return s.sp }

func (s *Interface_declarationContext) SetSp(v IIdentifier_listContext) { s.sp = v }

func (s *Interface_declarationContext) INTERFACE() antlr.TerminalNode {
	return s.GetToken(stParserINTERFACE, 0)
}

func (s *Interface_declarationContext) Var_decls() IVar_declsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVar_declsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVar_declsContext)
}

func (s *Interface_declarationContext) Methods() IMethodsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMethodsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMethodsContext)
}

func (s *Interface_declarationContext) END_INTERFACE() antlr.TerminalNode {
	return s.GetToken(stParserEND_INTERFACE, 0)
}

func (s *Interface_declarationContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(stParserIDENTIFIER, 0)
}

func (s *Interface_declarationContext) EXTENDS() antlr.TerminalNode {
	return s.GetToken(stParserEXTENDS, 0)
}

func (s *Interface_declarationContext) Identifier_list() IIdentifier_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifier_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Interface_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Interface_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Interface_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterInterface_declaration(s)
	}
}

func (s *Interface_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitInterface_declaration(s)
	}
}

func (p *stParser) Interface_declaration() (localctx IInterface_declarationContext) {
	localctx = NewInterface_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, stParserRULE_interface_declaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(602)
		p.Match(stParserINTERFACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(603)

		var _m = p.Match(stParserIDENTIFIER)

		localctx.(*Interface_declarationContext).identifier = _m
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(606)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == stParserEXTENDS {
		{
			p.SetState(604)
			p.Match(stParserEXTENDS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(605)

			var _x = p.Identifier_list()

			localctx.(*Interface_declarationContext).sp = _x
		}

	}
	{
		p.SetState(608)
		p.Var_decls()
	}
	{
		p.SetState(609)
		p.Methods()
	}
	{
		p.SetState(610)
		p.Match(stParserEND_INTERFACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IClass_declarationContext is an interface to support dynamic dispatch.
type IClass_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIdentifier returns the identifier token.
	GetIdentifier() antlr.Token

	// GetInherit returns the inherit token.
	GetInherit() antlr.Token

	// SetIdentifier sets the identifier token.
	SetIdentifier(antlr.Token)

	// SetInherit sets the inherit token.
	SetInherit(antlr.Token)

	// GetInterfaces returns the interfaces rule contexts.
	GetInterfaces() IIdentifier_listContext

	// SetInterfaces sets the interfaces rule contexts.
	SetInterfaces(IIdentifier_listContext)

	// Getter signatures
	CLASS() antlr.TerminalNode
	Var_decls() IVar_declsContext
	Methods() IMethodsContext
	END_CLASS() antlr.TerminalNode
	AllIDENTIFIER() []antlr.TerminalNode
	IDENTIFIER(i int) antlr.TerminalNode
	EXTENDS() antlr.TerminalNode
	IMPLEMENTS() antlr.TerminalNode
	FINAL() antlr.TerminalNode
	ABSTRACT() antlr.TerminalNode
	Identifier_list() IIdentifier_listContext

	// IsClass_declarationContext differentiates from other interfaces.
	IsClass_declarationContext()
}

type Class_declarationContext struct {
	antlr.BaseParserRuleContext
	parser     antlr.Parser
	identifier antlr.Token
	inherit    antlr.Token
	interfaces IIdentifier_listContext
}

func NewEmptyClass_declarationContext() *Class_declarationContext {
	var p = new(Class_declarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_class_declaration
	return p
}

func InitEmptyClass_declarationContext(p *Class_declarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_class_declaration
}

func (*Class_declarationContext) IsClass_declarationContext() {}

func NewClass_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Class_declarationContext {
	var p = new(Class_declarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_class_declaration

	return p
}

func (s *Class_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Class_declarationContext) GetIdentifier() antlr.Token { return s.identifier }

func (s *Class_declarationContext) GetInherit() antlr.Token { return s.inherit }

func (s *Class_declarationContext) SetIdentifier(v antlr.Token) { s.identifier = v }

func (s *Class_declarationContext) SetInherit(v antlr.Token) { s.inherit = v }

func (s *Class_declarationContext) GetInterfaces() IIdentifier_listContext { return s.interfaces }

func (s *Class_declarationContext) SetInterfaces(v IIdentifier_listContext) { s.interfaces = v }

func (s *Class_declarationContext) CLASS() antlr.TerminalNode {
	return s.GetToken(stParserCLASS, 0)
}

func (s *Class_declarationContext) Var_decls() IVar_declsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVar_declsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVar_declsContext)
}

func (s *Class_declarationContext) Methods() IMethodsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMethodsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMethodsContext)
}

func (s *Class_declarationContext) END_CLASS() antlr.TerminalNode {
	return s.GetToken(stParserEND_CLASS, 0)
}

func (s *Class_declarationContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(stParserIDENTIFIER)
}

func (s *Class_declarationContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(stParserIDENTIFIER, i)
}

func (s *Class_declarationContext) EXTENDS() antlr.TerminalNode {
	return s.GetToken(stParserEXTENDS, 0)
}

func (s *Class_declarationContext) IMPLEMENTS() antlr.TerminalNode {
	return s.GetToken(stParserIMPLEMENTS, 0)
}

func (s *Class_declarationContext) FINAL() antlr.TerminalNode {
	return s.GetToken(stParserFINAL, 0)
}

func (s *Class_declarationContext) ABSTRACT() antlr.TerminalNode {
	return s.GetToken(stParserABSTRACT, 0)
}

func (s *Class_declarationContext) Identifier_list() IIdentifier_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifier_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Class_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Class_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Class_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterClass_declaration(s)
	}
}

func (s *Class_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitClass_declaration(s)
	}
}

func (p *stParser) Class_declaration() (localctx IClass_declarationContext) {
	localctx = NewClass_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, stParserRULE_class_declaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(612)
		p.Match(stParserCLASS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(614)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == stParserFINAL || _la == stParserABSTRACT {
		{
			p.SetState(613)
			_la = p.GetTokenStream().LA(1)

			if !(_la == stParserFINAL || _la == stParserABSTRACT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(616)

		var _m = p.Match(stParserIDENTIFIER)

		localctx.(*Class_declarationContext).identifier = _m
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(619)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == stParserEXTENDS {
		{
			p.SetState(617)
			p.Match(stParserEXTENDS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(618)

			var _m = p.Match(stParserIDENTIFIER)

			localctx.(*Class_declarationContext).inherit = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(623)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == stParserIMPLEMENTS {
		{
			p.SetState(621)
			p.Match(stParserIMPLEMENTS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(622)

			var _x = p.Identifier_list()

			localctx.(*Class_declarationContext).interfaces = _x
		}

	}
	{
		p.SetState(625)
		p.Var_decls()
	}
	{
		p.SetState(626)
		p.Methods()
	}
	{
		p.SetState(627)
		p.Match(stParserEND_CLASS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMethodsContext is an interface to support dynamic dispatch.
type IMethodsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllMethod() []IMethodContext
	Method(i int) IMethodContext

	// IsMethodsContext differentiates from other interfaces.
	IsMethodsContext()
}

type MethodsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMethodsContext() *MethodsContext {
	var p = new(MethodsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_methods
	return p
}

func InitEmptyMethodsContext(p *MethodsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_methods
}

func (*MethodsContext) IsMethodsContext() {}

func NewMethodsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MethodsContext {
	var p = new(MethodsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_methods

	return p
}

func (s *MethodsContext) GetParser() antlr.Parser { return s.parser }

func (s *MethodsContext) AllMethod() []IMethodContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMethodContext); ok {
			len++
		}
	}

	tst := make([]IMethodContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMethodContext); ok {
			tst[i] = t.(IMethodContext)
			i++
		}
	}

	return tst
}

func (s *MethodsContext) Method(i int) IMethodContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMethodContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMethodContext)
}

func (s *MethodsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MethodsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MethodsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterMethods(s)
	}
}

func (s *MethodsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitMethods(s)
	}
}

func (p *stParser) Methods() (localctx IMethodsContext) {
	localctx = NewMethodsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, stParserRULE_methods)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(632)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == stParserMETHOD {
		{
			p.SetState(629)
			p.Method()
		}

		p.SetState(634)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMethodContext is an interface to support dynamic dispatch.
type IMethodContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIdentifier returns the identifier token.
	GetIdentifier() antlr.Token

	// GetReturnID returns the returnID token.
	GetReturnID() antlr.Token

	// SetIdentifier sets the identifier token.
	SetIdentifier(antlr.Token)

	// SetReturnID sets the returnID token.
	SetReturnID(antlr.Token)

	// GetReturnET returns the returnET rule contexts.
	GetReturnET() IElementary_type_nameContext

	// SetReturnET sets the returnET rule contexts.
	SetReturnET(IElementary_type_nameContext)

	// Getter signatures
	METHOD() antlr.TerminalNode
	Var_decls() IVar_declsContext
	Body() IBodyContext
	END_METHOD() antlr.TerminalNode
	AllIDENTIFIER() []antlr.TerminalNode
	IDENTIFIER(i int) antlr.TerminalNode
	Access_specifier() IAccess_specifierContext
	OVERRIDE() antlr.TerminalNode
	COLON() antlr.TerminalNode
	FINAL() antlr.TerminalNode
	ABSTRACT() antlr.TerminalNode
	Elementary_type_name() IElementary_type_nameContext

	// IsMethodContext differentiates from other interfaces.
	IsMethodContext()
}

type MethodContext struct {
	antlr.BaseParserRuleContext
	parser     antlr.Parser
	identifier antlr.Token
	returnET   IElementary_type_nameContext
	returnID   antlr.Token
}

func NewEmptyMethodContext() *MethodContext {
	var p = new(MethodContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_method
	return p
}

func InitEmptyMethodContext(p *MethodContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_method
}

func (*MethodContext) IsMethodContext() {}

func NewMethodContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MethodContext {
	var p = new(MethodContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_method

	return p
}

func (s *MethodContext) GetParser() antlr.Parser { return s.parser }

func (s *MethodContext) GetIdentifier() antlr.Token { return s.identifier }

func (s *MethodContext) GetReturnID() antlr.Token { return s.returnID }

func (s *MethodContext) SetIdentifier(v antlr.Token) { s.identifier = v }

func (s *MethodContext) SetReturnID(v antlr.Token) { s.returnID = v }

func (s *MethodContext) GetReturnET() IElementary_type_nameContext { return s.returnET }

func (s *MethodContext) SetReturnET(v IElementary_type_nameContext) { s.returnET = v }

func (s *MethodContext) METHOD() antlr.TerminalNode {
	return s.GetToken(stParserMETHOD, 0)
}

func (s *MethodContext) Var_decls() IVar_declsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVar_declsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVar_declsContext)
}

func (s *MethodContext) Body() IBodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBodyContext)
}

func (s *MethodContext) END_METHOD() antlr.TerminalNode {
	return s.GetToken(stParserEND_METHOD, 0)
}

func (s *MethodContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(stParserIDENTIFIER)
}

func (s *MethodContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(stParserIDENTIFIER, i)
}

func (s *MethodContext) Access_specifier() IAccess_specifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAccess_specifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAccess_specifierContext)
}

func (s *MethodContext) OVERRIDE() antlr.TerminalNode {
	return s.GetToken(stParserOVERRIDE, 0)
}

func (s *MethodContext) COLON() antlr.TerminalNode {
	return s.GetToken(stParserCOLON, 0)
}

func (s *MethodContext) FINAL() antlr.TerminalNode {
	return s.GetToken(stParserFINAL, 0)
}

func (s *MethodContext) ABSTRACT() antlr.TerminalNode {
	return s.GetToken(stParserABSTRACT, 0)
}

func (s *MethodContext) Elementary_type_name() IElementary_type_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElementary_type_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElementary_type_nameContext)
}

func (s *MethodContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MethodContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MethodContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterMethod(s)
	}
}

func (s *MethodContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitMethod(s)
	}
}

func (p *stParser) Method() (localctx IMethodContext) {
	localctx = NewMethodContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, stParserRULE_method)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(635)
		p.Match(stParserMETHOD)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(637)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-147)) & ^0x3f) == 0 && ((int64(1)<<(_la-147))&15) != 0 {
		{
			p.SetState(636)
			p.Access_specifier()
		}

	}
	p.SetState(640)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == stParserFINAL || _la == stParserABSTRACT {
		{
			p.SetState(639)
			_la = p.GetTokenStream().LA(1)

			if !(_la == stParserFINAL || _la == stParserABSTRACT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(643)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == stParserOVERRIDE {
		{
			p.SetState(642)
			p.Match(stParserOVERRIDE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(645)

		var _m = p.Match(stParserIDENTIFIER)

		localctx.(*MethodContext).identifier = _m
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(651)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == stParserCOLON {
		{
			p.SetState(646)
			p.Match(stParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(649)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case stParserANY, stParserANY_BIT, stParserANY_INT, stParserBOOL, stParserBYTE, stParserDATE_AND_TIME, stParserDINT, stParserDWORD, stParserINT, stParserLINT, stParserLREAL, stParserLWORD, stParserREAL, stParserSINT, stParserSTRING, stParserTIME, stParserTIME_OF_DAY, stParserUDINT, stParserUINT, stParserULINT, stParserUSINT, stParserWORD, stParserWSTRING, stParserDATE, stParserDT:
			{
				p.SetState(647)

				var _x = p.Elementary_type_name()

				localctx.(*MethodContext).returnET = _x
			}

		case stParserIDENTIFIER:
			{
				p.SetState(648)

				var _m = p.Match(stParserIDENTIFIER)

				localctx.(*MethodContext).returnID = _m
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

	}
	{
		p.SetState(653)
		p.Var_decls()
	}
	{
		p.SetState(654)
		p.Body()
	}
	{
		p.SetState(655)
		p.Match(stParserEND_METHOD)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IProgram_declarationContext is an interface to support dynamic dispatch.
type IProgram_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIdentifier returns the identifier token.
	GetIdentifier() antlr.Token

	// SetIdentifier sets the identifier token.
	SetIdentifier(antlr.Token)

	// Getter signatures
	PROGRAM() antlr.TerminalNode
	Var_decls() IVar_declsContext
	Body() IBodyContext
	END_PROGRAM() antlr.TerminalNode
	IDENTIFIER() antlr.TerminalNode
	AllAction_() []IActionContext
	Action_(i int) IActionContext

	// IsProgram_declarationContext differentiates from other interfaces.
	IsProgram_declarationContext()
}

type Program_declarationContext struct {
	antlr.BaseParserRuleContext
	parser     antlr.Parser
	identifier antlr.Token
}

func NewEmptyProgram_declarationContext() *Program_declarationContext {
	var p = new(Program_declarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_program_declaration
	return p
}

func InitEmptyProgram_declarationContext(p *Program_declarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_program_declaration
}

func (*Program_declarationContext) IsProgram_declarationContext() {}

func NewProgram_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Program_declarationContext {
	var p = new(Program_declarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_program_declaration

	return p
}

func (s *Program_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Program_declarationContext) GetIdentifier() antlr.Token { return s.identifier }

func (s *Program_declarationContext) SetIdentifier(v antlr.Token) { s.identifier = v }

func (s *Program_declarationContext) PROGRAM() antlr.TerminalNode {
	return s.GetToken(stParserPROGRAM, 0)
}

func (s *Program_declarationContext) Var_decls() IVar_declsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVar_declsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVar_declsContext)
}

func (s *Program_declarationContext) Body() IBodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBodyContext)
}

func (s *Program_declarationContext) END_PROGRAM() antlr.TerminalNode {
	return s.GetToken(stParserEND_PROGRAM, 0)
}

func (s *Program_declarationContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(stParserIDENTIFIER, 0)
}

func (s *Program_declarationContext) AllAction_() []IActionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IActionContext); ok {
			len++
		}
	}

	tst := make([]IActionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IActionContext); ok {
			tst[i] = t.(IActionContext)
			i++
		}
	}

	return tst
}

func (s *Program_declarationContext) Action_(i int) IActionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IActionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IActionContext)
}

func (s *Program_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Program_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Program_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterProgram_declaration(s)
	}
}

func (s *Program_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitProgram_declaration(s)
	}
}

func (p *stParser) Program_declaration() (localctx IProgram_declarationContext) {
	localctx = NewProgram_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, stParserRULE_program_declaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(657)
		p.Match(stParserPROGRAM)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(658)

		var _m = p.Match(stParserIDENTIFIER)

		localctx.(*Program_declarationContext).identifier = _m
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(659)
		p.Var_decls()
	}
	p.SetState(663)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == stParserACTION {
		{
			p.SetState(660)
			p.Action_()
		}

		p.SetState(665)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(666)
		p.Body()
	}
	{
		p.SetState(667)
		p.Match(stParserEND_PROGRAM)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGlobal_variable_list_declarationContext is an interface to support dynamic dispatch.
type IGlobal_variable_list_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	VAR_GLOBAL() antlr.TerminalNode
	Var_decl_inner() IVar_decl_innerContext
	END_VAR() antlr.TerminalNode
	AllRETAIN() []antlr.TerminalNode
	RETAIN(i int) antlr.TerminalNode
	AllPERSISTENT() []antlr.TerminalNode
	PERSISTENT(i int) antlr.TerminalNode
	AllCONSTANT() []antlr.TerminalNode
	CONSTANT(i int) antlr.TerminalNode

	// IsGlobal_variable_list_declarationContext differentiates from other interfaces.
	IsGlobal_variable_list_declarationContext()
}

type Global_variable_list_declarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGlobal_variable_list_declarationContext() *Global_variable_list_declarationContext {
	var p = new(Global_variable_list_declarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_global_variable_list_declaration
	return p
}

func InitEmptyGlobal_variable_list_declarationContext(p *Global_variable_list_declarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_global_variable_list_declaration
}

func (*Global_variable_list_declarationContext) IsGlobal_variable_list_declarationContext() {}

func NewGlobal_variable_list_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Global_variable_list_declarationContext {
	var p = new(Global_variable_list_declarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_global_variable_list_declaration

	return p
}

func (s *Global_variable_list_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Global_variable_list_declarationContext) VAR_GLOBAL() antlr.TerminalNode {
	return s.GetToken(stParserVAR_GLOBAL, 0)
}

func (s *Global_variable_list_declarationContext) Var_decl_inner() IVar_decl_innerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVar_decl_innerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVar_decl_innerContext)
}

func (s *Global_variable_list_declarationContext) END_VAR() antlr.TerminalNode {
	return s.GetToken(stParserEND_VAR, 0)
}

func (s *Global_variable_list_declarationContext) AllRETAIN() []antlr.TerminalNode {
	return s.GetTokens(stParserRETAIN)
}

func (s *Global_variable_list_declarationContext) RETAIN(i int) antlr.TerminalNode {
	return s.GetToken(stParserRETAIN, i)
}

func (s *Global_variable_list_declarationContext) AllPERSISTENT() []antlr.TerminalNode {
	return s.GetTokens(stParserPERSISTENT)
}

func (s *Global_variable_list_declarationContext) PERSISTENT(i int) antlr.TerminalNode {
	return s.GetToken(stParserPERSISTENT, i)
}

func (s *Global_variable_list_declarationContext) AllCONSTANT() []antlr.TerminalNode {
	return s.GetTokens(stParserCONSTANT)
}

func (s *Global_variable_list_declarationContext) CONSTANT(i int) antlr.TerminalNode {
	return s.GetToken(stParserCONSTANT, i)
}

func (s *Global_variable_list_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Global_variable_list_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Global_variable_list_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterGlobal_variable_list_declaration(s)
	}
}

func (s *Global_variable_list_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitGlobal_variable_list_declaration(s)
	}
}

func (p *stParser) Global_variable_list_declaration() (localctx IGlobal_variable_list_declarationContext) {
	localctx = NewGlobal_variable_list_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, stParserRULE_global_variable_list_declaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(669)
		p.Match(stParserVAR_GLOBAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(673)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == stParserCONSTANT || _la == stParserRETAIN || _la == stParserPERSISTENT {
		{
			p.SetState(670)
			_la = p.GetTokenStream().LA(1)

			if !(_la == stParserCONSTANT || _la == stParserRETAIN || _la == stParserPERSISTENT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

		p.SetState(675)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(676)
		p.Var_decl_inner()
	}
	{
		p.SetState(677)
		p.Match(stParserEND_VAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStl_listContext is an interface to support dynamic dispatch.
type IStl_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_stl_expression returns the _stl_expression rule contexts.
	Get_stl_expression() IStl_expressionContext

	// Set_stl_expression sets the _stl_expression rule contexts.
	Set_stl_expression(IStl_expressionContext)

	// GetItem returns the item rule context list.
	GetItem() []IStl_expressionContext

	// SetItem sets the item rule context list.
	SetItem([]IStl_expressionContext)

	// Getter signatures
	AllStl_expression() []IStl_expressionContext
	Stl_expression(i int) IStl_expressionContext

	// IsStl_listContext differentiates from other interfaces.
	IsStl_listContext()
}

type Stl_listContext struct {
	antlr.BaseParserRuleContext
	parser          antlr.Parser
	_stl_expression IStl_expressionContext
	item            []IStl_expressionContext
}

func NewEmptyStl_listContext() *Stl_listContext {
	var p = new(Stl_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_stl_list
	return p
}

func InitEmptyStl_listContext(p *Stl_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_stl_list
}

func (*Stl_listContext) IsStl_listContext() {}

func NewStl_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Stl_listContext {
	var p = new(Stl_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_stl_list

	return p
}

func (s *Stl_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Stl_listContext) Get_stl_expression() IStl_expressionContext { return s._stl_expression }

func (s *Stl_listContext) Set_stl_expression(v IStl_expressionContext) { s._stl_expression = v }

func (s *Stl_listContext) GetItem() []IStl_expressionContext { return s.item }

func (s *Stl_listContext) SetItem(v []IStl_expressionContext) { s.item = v }

func (s *Stl_listContext) AllStl_expression() []IStl_expressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStl_expressionContext); ok {
			len++
		}
	}

	tst := make([]IStl_expressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStl_expressionContext); ok {
			tst[i] = t.(IStl_expressionContext)
			i++
		}
	}

	return tst
}

func (s *Stl_listContext) Stl_expression(i int) IStl_expressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStl_expressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStl_expressionContext)
}

func (s *Stl_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stl_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Stl_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterStl_list(s)
	}
}

func (s *Stl_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitStl_list(s)
	}
}

func (p *stParser) Stl_list() (localctx IStl_listContext) {
	localctx = NewStl_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, stParserRULE_stl_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(682)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64((_la-111)) & ^0x3f) == 0 && ((int64(1)<<(_la-111))&9168452530601197569) != 0) || ((int64((_la-175)) & ^0x3f) == 0 && ((int64(1)<<(_la-175))&71) != 0) {
		{
			p.SetState(679)

			var _x = p.Stl_expression()

			localctx.(*Stl_listContext)._stl_expression = _x
		}
		localctx.(*Stl_listContext).item = append(localctx.(*Stl_listContext).item, localctx.(*Stl_listContext)._stl_expression)

		p.SetState(684)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStl_expressionContext is an interface to support dynamic dispatch.
type IStl_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Assignment_statement() IAssignment_statementContext
	Stl_call() IStl_callContext
	Primary_expression() IPrimary_expressionContext

	// IsStl_expressionContext differentiates from other interfaces.
	IsStl_expressionContext()
}

type Stl_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStl_expressionContext() *Stl_expressionContext {
	var p = new(Stl_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_stl_expression
	return p
}

func InitEmptyStl_expressionContext(p *Stl_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_stl_expression
}

func (*Stl_expressionContext) IsStl_expressionContext() {}

func NewStl_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Stl_expressionContext {
	var p = new(Stl_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_stl_expression

	return p
}

func (s *Stl_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Stl_expressionContext) Assignment_statement() IAssignment_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignment_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignment_statementContext)
}

func (s *Stl_expressionContext) Stl_call() IStl_callContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStl_callContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStl_callContext)
}

func (s *Stl_expressionContext) Primary_expression() IPrimary_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimary_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimary_expressionContext)
}

func (s *Stl_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stl_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Stl_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterStl_expression(s)
	}
}

func (s *Stl_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitStl_expression(s)
	}
}

func (p *stParser) Stl_expression() (localctx IStl_expressionContext) {
	localctx = NewStl_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, stParserRULE_stl_expression)
	p.SetState(688)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 57, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(685)
			p.Assignment_statement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(686)
			p.Stl_call()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(687)
			p.Primary_expression()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStl_callContext is an interface to support dynamic dispatch.
type IStl_callContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op rule contexts.
	GetOp() IPrimary_expressionContext

	// GetV returns the v rule contexts.
	GetV() IVariableContext

	// SetOp sets the op rule contexts.
	SetOp(IPrimary_expressionContext)

	// SetV sets the v rule contexts.
	SetV(IVariableContext)

	// Getter signatures
	Primary_expression() IPrimary_expressionContext
	Variable() IVariableContext

	// IsStl_callContext differentiates from other interfaces.
	IsStl_callContext()
}

type Stl_callContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	op     IPrimary_expressionContext
	v      IVariableContext
}

func NewEmptyStl_callContext() *Stl_callContext {
	var p = new(Stl_callContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_stl_call
	return p
}

func InitEmptyStl_callContext(p *Stl_callContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_stl_call
}

func (*Stl_callContext) IsStl_callContext() {}

func NewStl_callContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Stl_callContext {
	var p = new(Stl_callContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_stl_call

	return p
}

func (s *Stl_callContext) GetParser() antlr.Parser { return s.parser }

func (s *Stl_callContext) GetOp() IPrimary_expressionContext { return s.op }

func (s *Stl_callContext) GetV() IVariableContext { return s.v }

func (s *Stl_callContext) SetOp(v IPrimary_expressionContext) { s.op = v }

func (s *Stl_callContext) SetV(v IVariableContext) { s.v = v }

func (s *Stl_callContext) Primary_expression() IPrimary_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimary_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimary_expressionContext)
}

func (s *Stl_callContext) Variable() IVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *Stl_callContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stl_callContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Stl_callContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterStl_call(s)
	}
}

func (s *Stl_callContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitStl_call(s)
	}
}

func (p *stParser) Stl_call() (localctx IStl_callContext) {
	localctx = NewStl_callContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, stParserRULE_stl_call)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(690)

		var _x = p.Primary_expression()

		localctx.(*Stl_callContext).op = _x
	}
	{
		p.SetState(691)

		var _x = p.Variable()

		localctx.(*Stl_callContext).v = _x
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_expression
	return p
}

func InitEmptyExpressionContext(p *ExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_expression
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) CopyAll(ctx *ExpressionContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type UnaryNegateExprContext struct {
	ExpressionContext
	sub IExpressionContext
}

func NewUnaryNegateExprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UnaryNegateExprContext {
	var p = new(UnaryNegateExprContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *UnaryNegateExprContext) GetSub() IExpressionContext { return s.sub }

func (s *UnaryNegateExprContext) SetSub(v IExpressionContext) { s.sub = v }

func (s *UnaryNegateExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaryNegateExprContext) NOT() antlr.TerminalNode {
	return s.GetToken(stParserNOT, 0)
}

func (s *UnaryNegateExprContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *UnaryNegateExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterUnaryNegateExpr(s)
	}
}

func (s *UnaryNegateExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitUnaryNegateExpr(s)
	}
}

type BinaryOrExprContext struct {
	ExpressionContext
	left  IExpressionContext
	op    antlr.Token
	right IExpressionContext
}

func NewBinaryOrExprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BinaryOrExprContext {
	var p = new(BinaryOrExprContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *BinaryOrExprContext) GetOp() antlr.Token { return s.op }

func (s *BinaryOrExprContext) SetOp(v antlr.Token) { s.op = v }

func (s *BinaryOrExprContext) GetLeft() IExpressionContext { return s.left }

func (s *BinaryOrExprContext) GetRight() IExpressionContext { return s.right }

func (s *BinaryOrExprContext) SetLeft(v IExpressionContext) { s.left = v }

func (s *BinaryOrExprContext) SetRight(v IExpressionContext) { s.right = v }

func (s *BinaryOrExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinaryOrExprContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *BinaryOrExprContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *BinaryOrExprContext) OR() antlr.TerminalNode {
	return s.GetToken(stParserOR, 0)
}

func (s *BinaryOrExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterBinaryOrExpr(s)
	}
}

func (s *BinaryOrExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitBinaryOrExpr(s)
	}
}

type BinaryCmpExprContext struct {
	ExpressionContext
	left  IExpressionContext
	op    antlr.Token
	right IExpressionContext
}

func NewBinaryCmpExprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BinaryCmpExprContext {
	var p = new(BinaryCmpExprContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *BinaryCmpExprContext) GetOp() antlr.Token { return s.op }

func (s *BinaryCmpExprContext) SetOp(v antlr.Token) { s.op = v }

func (s *BinaryCmpExprContext) GetLeft() IExpressionContext { return s.left }

func (s *BinaryCmpExprContext) GetRight() IExpressionContext { return s.right }

func (s *BinaryCmpExprContext) SetLeft(v IExpressionContext) { s.left = v }

func (s *BinaryCmpExprContext) SetRight(v IExpressionContext) { s.right = v }

func (s *BinaryCmpExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinaryCmpExprContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *BinaryCmpExprContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *BinaryCmpExprContext) LESS_THAN() antlr.TerminalNode {
	return s.GetToken(stParserLESS_THAN, 0)
}

func (s *BinaryCmpExprContext) GREATER_THAN() antlr.TerminalNode {
	return s.GetToken(stParserGREATER_THAN, 0)
}

func (s *BinaryCmpExprContext) GREATER_EQUALS() antlr.TerminalNode {
	return s.GetToken(stParserGREATER_EQUALS, 0)
}

func (s *BinaryCmpExprContext) LESS_EQUALS() antlr.TerminalNode {
	return s.GetToken(stParserLESS_EQUALS, 0)
}

func (s *BinaryCmpExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterBinaryCmpExpr(s)
	}
}

func (s *BinaryCmpExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitBinaryCmpExpr(s)
	}
}

type BinaryModDivExprContext struct {
	ExpressionContext
	left  IExpressionContext
	op    antlr.Token
	right IExpressionContext
}

func NewBinaryModDivExprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BinaryModDivExprContext {
	var p = new(BinaryModDivExprContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *BinaryModDivExprContext) GetOp() antlr.Token { return s.op }

func (s *BinaryModDivExprContext) SetOp(v antlr.Token) { s.op = v }

func (s *BinaryModDivExprContext) GetLeft() IExpressionContext { return s.left }

func (s *BinaryModDivExprContext) GetRight() IExpressionContext { return s.right }

func (s *BinaryModDivExprContext) SetLeft(v IExpressionContext) { s.left = v }

func (s *BinaryModDivExprContext) SetRight(v IExpressionContext) { s.right = v }

func (s *BinaryModDivExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinaryModDivExprContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *BinaryModDivExprContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *BinaryModDivExprContext) MOD() antlr.TerminalNode {
	return s.GetToken(stParserMOD, 0)
}

func (s *BinaryModDivExprContext) DIV() antlr.TerminalNode {
	return s.GetToken(stParserDIV, 0)
}

func (s *BinaryModDivExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterBinaryModDivExpr(s)
	}
}

func (s *BinaryModDivExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitBinaryModDivExpr(s)
	}
}

type ParenExprContext struct {
	ExpressionContext
	sub IExpressionContext
}

func NewParenExprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ParenExprContext {
	var p = new(ParenExprContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *ParenExprContext) GetSub() IExpressionContext { return s.sub }

func (s *ParenExprContext) SetSub(v IExpressionContext) { s.sub = v }

func (s *ParenExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParenExprContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(stParserLPAREN, 0)
}

func (s *ParenExprContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(stParserRPAREN, 0)
}

func (s *ParenExprContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ParenExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterParenExpr(s)
	}
}

func (s *ParenExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitParenExpr(s)
	}
}

type BinaryXORExprContext struct {
	ExpressionContext
	left  IExpressionContext
	op    antlr.Token
	right IExpressionContext
}

func NewBinaryXORExprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BinaryXORExprContext {
	var p = new(BinaryXORExprContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *BinaryXORExprContext) GetOp() antlr.Token { return s.op }

func (s *BinaryXORExprContext) SetOp(v antlr.Token) { s.op = v }

func (s *BinaryXORExprContext) GetLeft() IExpressionContext { return s.left }

func (s *BinaryXORExprContext) GetRight() IExpressionContext { return s.right }

func (s *BinaryXORExprContext) SetLeft(v IExpressionContext) { s.left = v }

func (s *BinaryXORExprContext) SetRight(v IExpressionContext) { s.right = v }

func (s *BinaryXORExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinaryXORExprContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *BinaryXORExprContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *BinaryXORExprContext) XOR() antlr.TerminalNode {
	return s.GetToken(stParserXOR, 0)
}

func (s *BinaryXORExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterBinaryXORExpr(s)
	}
}

func (s *BinaryXORExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitBinaryXORExpr(s)
	}
}

type UnaryMinusExprContext struct {
	ExpressionContext
	sub IExpressionContext
}

func NewUnaryMinusExprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UnaryMinusExprContext {
	var p = new(UnaryMinusExprContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *UnaryMinusExprContext) GetSub() IExpressionContext { return s.sub }

func (s *UnaryMinusExprContext) SetSub(v IExpressionContext) { s.sub = v }

func (s *UnaryMinusExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaryMinusExprContext) MINUS() antlr.TerminalNode {
	return s.GetToken(stParserMINUS, 0)
}

func (s *UnaryMinusExprContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *UnaryMinusExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterUnaryMinusExpr(s)
	}
}

func (s *UnaryMinusExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitUnaryMinusExpr(s)
	}
}

type PrimaryExprContext struct {
	ExpressionContext
}

func NewPrimaryExprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrimaryExprContext {
	var p = new(PrimaryExprContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *PrimaryExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryExprContext) Primary_expression() IPrimary_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimary_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimary_expressionContext)
}

func (s *PrimaryExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterPrimaryExpr(s)
	}
}

func (s *PrimaryExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitPrimaryExpr(s)
	}
}

type BinaryPowerExprContext struct {
	ExpressionContext
	left  IExpressionContext
	op    antlr.Token
	right IExpressionContext
}

func NewBinaryPowerExprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BinaryPowerExprContext {
	var p = new(BinaryPowerExprContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *BinaryPowerExprContext) GetOp() antlr.Token { return s.op }

func (s *BinaryPowerExprContext) SetOp(v antlr.Token) { s.op = v }

func (s *BinaryPowerExprContext) GetLeft() IExpressionContext { return s.left }

func (s *BinaryPowerExprContext) GetRight() IExpressionContext { return s.right }

func (s *BinaryPowerExprContext) SetLeft(v IExpressionContext) { s.left = v }

func (s *BinaryPowerExprContext) SetRight(v IExpressionContext) { s.right = v }

func (s *BinaryPowerExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinaryPowerExprContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *BinaryPowerExprContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *BinaryPowerExprContext) POWER() antlr.TerminalNode {
	return s.GetToken(stParserPOWER, 0)
}

func (s *BinaryPowerExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterBinaryPowerExpr(s)
	}
}

func (s *BinaryPowerExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitBinaryPowerExpr(s)
	}
}

type BinaryMultExprContext struct {
	ExpressionContext
	left  IExpressionContext
	op    antlr.Token
	right IExpressionContext
}

func NewBinaryMultExprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BinaryMultExprContext {
	var p = new(BinaryMultExprContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *BinaryMultExprContext) GetOp() antlr.Token { return s.op }

func (s *BinaryMultExprContext) SetOp(v antlr.Token) { s.op = v }

func (s *BinaryMultExprContext) GetLeft() IExpressionContext { return s.left }

func (s *BinaryMultExprContext) GetRight() IExpressionContext { return s.right }

func (s *BinaryMultExprContext) SetLeft(v IExpressionContext) { s.left = v }

func (s *BinaryMultExprContext) SetRight(v IExpressionContext) { s.right = v }

func (s *BinaryMultExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinaryMultExprContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *BinaryMultExprContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *BinaryMultExprContext) MULT() antlr.TerminalNode {
	return s.GetToken(stParserMULT, 0)
}

func (s *BinaryMultExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterBinaryMultExpr(s)
	}
}

func (s *BinaryMultExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitBinaryMultExpr(s)
	}
}

type BinaryPlusMinusExprContext struct {
	ExpressionContext
	left  IExpressionContext
	op    antlr.Token
	right IExpressionContext
}

func NewBinaryPlusMinusExprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BinaryPlusMinusExprContext {
	var p = new(BinaryPlusMinusExprContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *BinaryPlusMinusExprContext) GetOp() antlr.Token { return s.op }

func (s *BinaryPlusMinusExprContext) SetOp(v antlr.Token) { s.op = v }

func (s *BinaryPlusMinusExprContext) GetLeft() IExpressionContext { return s.left }

func (s *BinaryPlusMinusExprContext) GetRight() IExpressionContext { return s.right }

func (s *BinaryPlusMinusExprContext) SetLeft(v IExpressionContext) { s.left = v }

func (s *BinaryPlusMinusExprContext) SetRight(v IExpressionContext) { s.right = v }

func (s *BinaryPlusMinusExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinaryPlusMinusExprContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *BinaryPlusMinusExprContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *BinaryPlusMinusExprContext) PLUS() antlr.TerminalNode {
	return s.GetToken(stParserPLUS, 0)
}

func (s *BinaryPlusMinusExprContext) MINUS() antlr.TerminalNode {
	return s.GetToken(stParserMINUS, 0)
}

func (s *BinaryPlusMinusExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterBinaryPlusMinusExpr(s)
	}
}

func (s *BinaryPlusMinusExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitBinaryPlusMinusExpr(s)
	}
}

type BinaryEqExprContext struct {
	ExpressionContext
	left  IExpressionContext
	op    antlr.Token
	right IExpressionContext
}

func NewBinaryEqExprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BinaryEqExprContext {
	var p = new(BinaryEqExprContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *BinaryEqExprContext) GetOp() antlr.Token { return s.op }

func (s *BinaryEqExprContext) SetOp(v antlr.Token) { s.op = v }

func (s *BinaryEqExprContext) GetLeft() IExpressionContext { return s.left }

func (s *BinaryEqExprContext) GetRight() IExpressionContext { return s.right }

func (s *BinaryEqExprContext) SetLeft(v IExpressionContext) { s.left = v }

func (s *BinaryEqExprContext) SetRight(v IExpressionContext) { s.right = v }

func (s *BinaryEqExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinaryEqExprContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *BinaryEqExprContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *BinaryEqExprContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(stParserEQUALS, 0)
}

func (s *BinaryEqExprContext) NOT_EQUALS() antlr.TerminalNode {
	return s.GetToken(stParserNOT_EQUALS, 0)
}

func (s *BinaryEqExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterBinaryEqExpr(s)
	}
}

func (s *BinaryEqExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitBinaryEqExpr(s)
	}
}

type BinaryAndExprContext struct {
	ExpressionContext
	left  IExpressionContext
	op    antlr.Token
	right IExpressionContext
}

func NewBinaryAndExprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BinaryAndExprContext {
	var p = new(BinaryAndExprContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *BinaryAndExprContext) GetOp() antlr.Token { return s.op }

func (s *BinaryAndExprContext) SetOp(v antlr.Token) { s.op = v }

func (s *BinaryAndExprContext) GetLeft() IExpressionContext { return s.left }

func (s *BinaryAndExprContext) GetRight() IExpressionContext { return s.right }

func (s *BinaryAndExprContext) SetLeft(v IExpressionContext) { s.left = v }

func (s *BinaryAndExprContext) SetRight(v IExpressionContext) { s.right = v }

func (s *BinaryAndExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinaryAndExprContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *BinaryAndExprContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *BinaryAndExprContext) AND() antlr.TerminalNode {
	return s.GetToken(stParserAND, 0)
}

func (s *BinaryAndExprContext) AMPERSAND() antlr.TerminalNode {
	return s.GetToken(stParserAMPERSAND, 0)
}

func (s *BinaryAndExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterBinaryAndExpr(s)
	}
}

func (s *BinaryAndExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitBinaryAndExpr(s)
	}
}

func (p *stParser) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *stParser) expression(_p int) (localctx IExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 126
	p.EnterRecursionRule(localctx, 126, stParserRULE_expression, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(703)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 58, p.GetParserRuleContext()) {
	case 1:
		localctx = NewUnaryMinusExprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(694)
			p.Match(stParserMINUS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(695)

			var _x = p.expression(13)

			localctx.(*UnaryMinusExprContext).sub = _x
		}

	case 2:
		localctx = NewUnaryNegateExprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(696)
			p.Match(stParserNOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(697)

			var _x = p.expression(12)

			localctx.(*UnaryNegateExprContext).sub = _x
		}

	case 3:
		localctx = NewParenExprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(698)
			p.Match(stParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(699)

			var _x = p.expression(0)

			localctx.(*ParenExprContext).sub = _x
		}
		{
			p.SetState(700)
			p.Match(stParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		localctx = NewPrimaryExprContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(702)
			p.Primary_expression()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(734)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 60, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(732)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 59, p.GetParserRuleContext()) {
			case 1:
				localctx = NewBinaryPowerExprContext(p, NewExpressionContext(p, _parentctx, _parentState))
				localctx.(*BinaryPowerExprContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, stParserRULE_expression)
				p.SetState(705)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
					goto errorExit
				}
				{
					p.SetState(706)

					var _m = p.Match(stParserPOWER)

					localctx.(*BinaryPowerExprContext).op = _m
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(707)

					var _x = p.expression(11)

					localctx.(*BinaryPowerExprContext).right = _x
				}

			case 2:
				localctx = NewBinaryModDivExprContext(p, NewExpressionContext(p, _parentctx, _parentState))
				localctx.(*BinaryModDivExprContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, stParserRULE_expression)
				p.SetState(708)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
					goto errorExit
				}
				{
					p.SetState(709)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*BinaryModDivExprContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == stParserDIV || _la == stParserMOD) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*BinaryModDivExprContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(710)

					var _x = p.expression(9)

					localctx.(*BinaryModDivExprContext).right = _x
				}

			case 3:
				localctx = NewBinaryMultExprContext(p, NewExpressionContext(p, _parentctx, _parentState))
				localctx.(*BinaryMultExprContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, stParserRULE_expression)
				p.SetState(711)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
					goto errorExit
				}
				{
					p.SetState(712)

					var _m = p.Match(stParserMULT)

					localctx.(*BinaryMultExprContext).op = _m
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(713)

					var _x = p.expression(9)

					localctx.(*BinaryMultExprContext).right = _x
				}

			case 4:
				localctx = NewBinaryPlusMinusExprContext(p, NewExpressionContext(p, _parentctx, _parentState))
				localctx.(*BinaryPlusMinusExprContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, stParserRULE_expression)
				p.SetState(714)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
					goto errorExit
				}
				{
					p.SetState(715)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*BinaryPlusMinusExprContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == stParserMINUS || _la == stParserPLUS) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*BinaryPlusMinusExprContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(716)

					var _x = p.expression(8)

					localctx.(*BinaryPlusMinusExprContext).right = _x
				}

			case 5:
				localctx = NewBinaryCmpExprContext(p, NewExpressionContext(p, _parentctx, _parentState))
				localctx.(*BinaryCmpExprContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, stParserRULE_expression)
				p.SetState(717)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
					goto errorExit
				}
				{
					p.SetState(718)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*BinaryCmpExprContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !((int64((_la-105)) & ^0x3f) == 0 && ((int64(1)<<(_la-105))&27) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*BinaryCmpExprContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(719)

					var _x = p.expression(7)

					localctx.(*BinaryCmpExprContext).right = _x
				}

			case 6:
				localctx = NewBinaryEqExprContext(p, NewExpressionContext(p, _parentctx, _parentState))
				localctx.(*BinaryEqExprContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, stParserRULE_expression)
				p.SetState(720)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
					goto errorExit
				}
				{
					p.SetState(721)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*BinaryEqExprContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == stParserEQUALS || _la == stParserNOT_EQUALS) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*BinaryEqExprContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(722)

					var _x = p.expression(6)

					localctx.(*BinaryEqExprContext).right = _x
				}

			case 7:
				localctx = NewBinaryAndExprContext(p, NewExpressionContext(p, _parentctx, _parentState))
				localctx.(*BinaryAndExprContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, stParserRULE_expression)
				p.SetState(723)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
					goto errorExit
				}
				{
					p.SetState(724)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*BinaryAndExprContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == stParserAND || _la == stParserAMPERSAND) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*BinaryAndExprContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(725)

					var _x = p.expression(5)

					localctx.(*BinaryAndExprContext).right = _x
				}

			case 8:
				localctx = NewBinaryOrExprContext(p, NewExpressionContext(p, _parentctx, _parentState))
				localctx.(*BinaryOrExprContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, stParserRULE_expression)
				p.SetState(726)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
					goto errorExit
				}
				{
					p.SetState(727)

					var _m = p.Match(stParserOR)

					localctx.(*BinaryOrExprContext).op = _m
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(728)

					var _x = p.expression(4)

					localctx.(*BinaryOrExprContext).right = _x
				}

			case 9:
				localctx = NewBinaryXORExprContext(p, NewExpressionContext(p, _parentctx, _parentState))
				localctx.(*BinaryXORExprContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, stParserRULE_expression)
				p.SetState(729)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
					goto errorExit
				}
				{
					p.SetState(730)

					var _m = p.Match(stParserXOR)

					localctx.(*BinaryXORExprContext).op = _m
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(731)

					var _x = p.expression(3)

					localctx.(*BinaryXORExprContext).right = _x
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(736)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 60, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrimary_expressionContext is an interface to support dynamic dispatch.
type IPrimary_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetV returns the v rule contexts.
	GetV() IVariableContext

	// SetV sets the v rule contexts.
	SetV(IVariableContext)

	// Getter signatures
	Constant() IConstantContext
	Variable() IVariableContext
	Invocation() IInvocationContext

	// IsPrimary_expressionContext differentiates from other interfaces.
	IsPrimary_expressionContext()
}

type Primary_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	v      IVariableContext
}

func NewEmptyPrimary_expressionContext() *Primary_expressionContext {
	var p = new(Primary_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_primary_expression
	return p
}

func InitEmptyPrimary_expressionContext(p *Primary_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_primary_expression
}

func (*Primary_expressionContext) IsPrimary_expressionContext() {}

func NewPrimary_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Primary_expressionContext {
	var p = new(Primary_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_primary_expression

	return p
}

func (s *Primary_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Primary_expressionContext) GetV() IVariableContext { return s.v }

func (s *Primary_expressionContext) SetV(v IVariableContext) { s.v = v }

func (s *Primary_expressionContext) Constant() IConstantContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstantContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *Primary_expressionContext) Variable() IVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *Primary_expressionContext) Invocation() IInvocationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInvocationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInvocationContext)
}

func (s *Primary_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Primary_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Primary_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterPrimary_expression(s)
	}
}

func (s *Primary_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitPrimary_expression(s)
	}
}

func (p *stParser) Primary_expression() (localctx IPrimary_expressionContext) {
	localctx = NewPrimary_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, stParserRULE_primary_expression)
	p.SetState(740)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 61, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(737)
			p.Constant()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(738)

			var _x = p.Variable()

			localctx.(*Primary_expressionContext).v = _x
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(739)
			p.Invocation()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInvocationContext is an interface to support dynamic dispatch.
type IInvocationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetId returns the id rule contexts.
	GetId() ISymbolic_variableContext

	// SetId sets the id rule contexts.
	SetId(ISymbolic_variableContext)

	// Getter signatures
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	Symbolic_variable() ISymbolic_variableContext
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	AllParam_assignment() []IParam_assignmentContext
	Param_assignment(i int) IParam_assignmentContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsInvocationContext differentiates from other interfaces.
	IsInvocationContext()
}

type InvocationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	id     ISymbolic_variableContext
}

func NewEmptyInvocationContext() *InvocationContext {
	var p = new(InvocationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_invocation
	return p
}

func InitEmptyInvocationContext(p *InvocationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_invocation
}

func (*InvocationContext) IsInvocationContext() {}

func NewInvocationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InvocationContext {
	var p = new(InvocationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_invocation

	return p
}

func (s *InvocationContext) GetParser() antlr.Parser { return s.parser }

func (s *InvocationContext) GetId() ISymbolic_variableContext { return s.id }

func (s *InvocationContext) SetId(v ISymbolic_variableContext) { s.id = v }

func (s *InvocationContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(stParserLPAREN, 0)
}

func (s *InvocationContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(stParserRPAREN, 0)
}

func (s *InvocationContext) Symbolic_variable() ISymbolic_variableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolic_variableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolic_variableContext)
}

func (s *InvocationContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *InvocationContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *InvocationContext) AllParam_assignment() []IParam_assignmentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IParam_assignmentContext); ok {
			len++
		}
	}

	tst := make([]IParam_assignmentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IParam_assignmentContext); ok {
			tst[i] = t.(IParam_assignmentContext)
			i++
		}
	}

	return tst
}

func (s *InvocationContext) Param_assignment(i int) IParam_assignmentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParam_assignmentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParam_assignmentContext)
}

func (s *InvocationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(stParserCOMMA)
}

func (s *InvocationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(stParserCOMMA, i)
}

func (s *InvocationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InvocationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InvocationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterInvocation(s)
	}
}

func (s *InvocationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitInvocation(s)
	}
}

func (p *stParser) Invocation() (localctx IInvocationContext) {
	localctx = NewInvocationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, stParserRULE_invocation)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(742)

		var _x = p.Symbolic_variable()

		localctx.(*InvocationContext).id = _x
	}
	{
		p.SetState(743)
		p.Match(stParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(758)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64((_la-110)) & ^0x3f) == 0 && ((int64(1)<<(_la-110))&-109839012507156461) != 0) || ((int64((_la-175)) & ^0x3f) == 0 && ((int64(1)<<(_la-175))&71) != 0) {
		p.SetState(746)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 62, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(744)
				p.expression(0)
			}

		case 2:
			{
				p.SetState(745)
				p.Param_assignment()
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}
		p.SetState(755)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == stParserCOMMA {
			{
				p.SetState(748)
				p.Match(stParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(751)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 63, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(749)
					p.expression(0)
				}

			case 2:
				{
					p.SetState(750)
					p.Param_assignment()
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

			p.SetState(757)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(760)
		p.Match(stParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStatement_listContext is an interface to support dynamic dispatch.
type IStatement_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllStatement() []IStatementContext
	Statement(i int) IStatementContext

	// IsStatement_listContext differentiates from other interfaces.
	IsStatement_listContext()
}

type Statement_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatement_listContext() *Statement_listContext {
	var p = new(Statement_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_statement_list
	return p
}

func InitEmptyStatement_listContext(p *Statement_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_statement_list
}

func (*Statement_listContext) IsStatement_listContext() {}

func NewStatement_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Statement_listContext {
	var p = new(Statement_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_statement_list

	return p
}

func (s *Statement_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Statement_listContext) AllStatement() []IStatementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStatementContext); ok {
			len++
		}
	}

	tst := make([]IStatementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStatementContext); ok {
			tst[i] = t.(IStatementContext)
			i++
		}
	}

	return tst
}

func (s *Statement_listContext) Statement(i int) IStatementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *Statement_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Statement_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Statement_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterStatement_list(s)
	}
}

func (s *Statement_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitStatement_list(s)
	}
}

func (p *stParser) Statement_list() (localctx IStatement_listContext) {
	localctx = NewStatement_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, stParserRULE_statement_list)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(765)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 66, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(762)
				p.Statement()
			}

		}
		p.SetState(767)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 66, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Assignment_statement() IAssignment_statementContext
	SEMICOLON() antlr.TerminalNode
	Mult_assignment_statement() IMult_assignment_statementContext
	Invocation_statement() IInvocation_statementContext
	Return_statement() IReturn_statementContext
	Jump_statement() IJump_statementContext
	Label_statement() ILabel_statementContext
	If_statement() IIf_statementContext
	Case_statement() ICase_statementContext
	For_statement() IFor_statementContext
	While_statement() IWhile_statementContext
	Repeat_statement() IRepeat_statementContext
	Exit_statement() IExit_statementContext
	Continue_statement() IContinue_statementContext
	Empty_statement() IEmpty_statementContext

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_statement
	return p
}

func InitEmptyStatementContext(p *StatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_statement
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) Assignment_statement() IAssignment_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignment_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignment_statementContext)
}

func (s *StatementContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(stParserSEMICOLON, 0)
}

func (s *StatementContext) Mult_assignment_statement() IMult_assignment_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMult_assignment_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMult_assignment_statementContext)
}

func (s *StatementContext) Invocation_statement() IInvocation_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInvocation_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInvocation_statementContext)
}

func (s *StatementContext) Return_statement() IReturn_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReturn_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReturn_statementContext)
}

func (s *StatementContext) Jump_statement() IJump_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJump_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJump_statementContext)
}

func (s *StatementContext) Label_statement() ILabel_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILabel_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILabel_statementContext)
}

func (s *StatementContext) If_statement() IIf_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_statementContext)
}

func (s *StatementContext) Case_statement() ICase_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICase_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICase_statementContext)
}

func (s *StatementContext) For_statement() IFor_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFor_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFor_statementContext)
}

func (s *StatementContext) While_statement() IWhile_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhile_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhile_statementContext)
}

func (s *StatementContext) Repeat_statement() IRepeat_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRepeat_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRepeat_statementContext)
}

func (s *StatementContext) Exit_statement() IExit_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExit_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExit_statementContext)
}

func (s *StatementContext) Continue_statement() IContinue_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IContinue_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IContinue_statementContext)
}

func (s *StatementContext) Empty_statement() IEmpty_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEmpty_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEmpty_statementContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterStatement(s)
	}
}

func (s *StatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitStatement(s)
	}
}

func (p *stParser) Statement() (localctx IStatementContext) {
	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, stParserRULE_statement)
	p.SetState(813)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 72, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(768)
			p.Assignment_statement()
		}
		{
			p.SetState(769)
			p.Match(stParserSEMICOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(771)
			p.Mult_assignment_statement()
		}
		{
			p.SetState(772)
			p.Match(stParserSEMICOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(774)
			p.Invocation_statement()
		}
		{
			p.SetState(775)
			p.Match(stParserSEMICOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(777)
			p.Return_statement()
		}
		{
			p.SetState(778)
			p.Match(stParserSEMICOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(780)
			p.Jump_statement()
		}
		{
			p.SetState(781)
			p.Match(stParserSEMICOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(783)
			p.Label_statement()
		}
		{
			p.SetState(784)
			p.Match(stParserSEMICOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(786)
			p.If_statement()
		}
		p.SetState(788)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 67, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(787)
				p.Match(stParserSEMICOLON)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(790)
			p.Case_statement()
		}
		p.SetState(792)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 68, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(791)
				p.Match(stParserSEMICOLON)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(794)
			p.For_statement()
		}
		p.SetState(796)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 69, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(795)
				p.Match(stParserSEMICOLON)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(798)
			p.While_statement()
		}
		p.SetState(800)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 70, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(799)
				p.Match(stParserSEMICOLON)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(802)
			p.Repeat_statement()
		}
		p.SetState(804)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 71, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(803)
				p.Match(stParserSEMICOLON)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(806)
			p.Exit_statement()
		}
		{
			p.SetState(807)
			p.Match(stParserSEMICOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(809)
			p.Continue_statement()
		}
		{
			p.SetState(810)
			p.Match(stParserSEMICOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(812)
			p.Empty_statement()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEmpty_statementContext is an interface to support dynamic dispatch.
type IEmpty_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SEMICOLON() antlr.TerminalNode

	// IsEmpty_statementContext differentiates from other interfaces.
	IsEmpty_statementContext()
}

type Empty_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEmpty_statementContext() *Empty_statementContext {
	var p = new(Empty_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_empty_statement
	return p
}

func InitEmptyEmpty_statementContext(p *Empty_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_empty_statement
}

func (*Empty_statementContext) IsEmpty_statementContext() {}

func NewEmpty_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Empty_statementContext {
	var p = new(Empty_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_empty_statement

	return p
}

func (s *Empty_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Empty_statementContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(stParserSEMICOLON, 0)
}

func (s *Empty_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Empty_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Empty_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterEmpty_statement(s)
	}
}

func (s *Empty_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitEmpty_statement(s)
	}
}

func (p *stParser) Empty_statement() (localctx IEmpty_statementContext) {
	localctx = NewEmpty_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, stParserRULE_empty_statement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(815)
		p.Match(stParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IJump_statementContext is an interface to support dynamic dispatch.
type IJump_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetId returns the id token.
	GetId() antlr.Token

	// SetId sets the id token.
	SetId(antlr.Token)

	// Getter signatures
	JMP() antlr.TerminalNode
	IDENTIFIER() antlr.TerminalNode

	// IsJump_statementContext differentiates from other interfaces.
	IsJump_statementContext()
}

type Jump_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	id     antlr.Token
}

func NewEmptyJump_statementContext() *Jump_statementContext {
	var p = new(Jump_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_jump_statement
	return p
}

func InitEmptyJump_statementContext(p *Jump_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_jump_statement
}

func (*Jump_statementContext) IsJump_statementContext() {}

func NewJump_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Jump_statementContext {
	var p = new(Jump_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_jump_statement

	return p
}

func (s *Jump_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Jump_statementContext) GetId() antlr.Token { return s.id }

func (s *Jump_statementContext) SetId(v antlr.Token) { s.id = v }

func (s *Jump_statementContext) JMP() antlr.TerminalNode {
	return s.GetToken(stParserJMP, 0)
}

func (s *Jump_statementContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(stParserIDENTIFIER, 0)
}

func (s *Jump_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Jump_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Jump_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterJump_statement(s)
	}
}

func (s *Jump_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitJump_statement(s)
	}
}

func (p *stParser) Jump_statement() (localctx IJump_statementContext) {
	localctx = NewJump_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, stParserRULE_jump_statement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(817)
		p.Match(stParserJMP)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(818)

		var _m = p.Match(stParserIDENTIFIER)

		localctx.(*Jump_statementContext).id = _m
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILabel_statementContext is an interface to support dynamic dispatch.
type ILabel_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetId returns the id token.
	GetId() antlr.Token

	// SetId sets the id token.
	SetId(antlr.Token)

	// Getter signatures
	COLON() antlr.TerminalNode
	IDENTIFIER() antlr.TerminalNode

	// IsLabel_statementContext differentiates from other interfaces.
	IsLabel_statementContext()
}

type Label_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	id     antlr.Token
}

func NewEmptyLabel_statementContext() *Label_statementContext {
	var p = new(Label_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_label_statement
	return p
}

func InitEmptyLabel_statementContext(p *Label_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_label_statement
}

func (*Label_statementContext) IsLabel_statementContext() {}

func NewLabel_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Label_statementContext {
	var p = new(Label_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_label_statement

	return p
}

func (s *Label_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Label_statementContext) GetId() antlr.Token { return s.id }

func (s *Label_statementContext) SetId(v antlr.Token) { s.id = v }

func (s *Label_statementContext) COLON() antlr.TerminalNode {
	return s.GetToken(stParserCOLON, 0)
}

func (s *Label_statementContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(stParserIDENTIFIER, 0)
}

func (s *Label_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Label_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Label_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterLabel_statement(s)
	}
}

func (s *Label_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitLabel_statement(s)
	}
}

func (p *stParser) Label_statement() (localctx ILabel_statementContext) {
	localctx = NewLabel_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, stParserRULE_label_statement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(820)

		var _m = p.Match(stParserIDENTIFIER)

		localctx.(*Label_statementContext).id = _m
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(821)
		p.Match(stParserCOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAssignment_statementContext is an interface to support dynamic dispatch.
type IAssignment_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// GetLeft returns the left rule contexts.
	GetLeft() IVariableContext

	// GetRight returns the right rule contexts.
	GetRight() IExpressionContext

	// SetLeft sets the left rule contexts.
	SetLeft(IVariableContext)

	// SetRight sets the right rule contexts.
	SetRight(IExpressionContext)

	// Getter signatures
	Variable() IVariableContext
	Expression() IExpressionContext
	ASSIGN_ATTEMPT() antlr.TerminalNode
	RASSIGN() antlr.TerminalNode
	ASSIGN() antlr.TerminalNode
	INCREAE() antlr.TerminalNode
	DECREASE() antlr.TerminalNode

	// IsAssignment_statementContext differentiates from other interfaces.
	IsAssignment_statementContext()
}

type Assignment_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	left   IVariableContext
	op     antlr.Token
	right  IExpressionContext
}

func NewEmptyAssignment_statementContext() *Assignment_statementContext {
	var p = new(Assignment_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_assignment_statement
	return p
}

func InitEmptyAssignment_statementContext(p *Assignment_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_assignment_statement
}

func (*Assignment_statementContext) IsAssignment_statementContext() {}

func NewAssignment_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Assignment_statementContext {
	var p = new(Assignment_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_assignment_statement

	return p
}

func (s *Assignment_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Assignment_statementContext) GetOp() antlr.Token { return s.op }

func (s *Assignment_statementContext) SetOp(v antlr.Token) { s.op = v }

func (s *Assignment_statementContext) GetLeft() IVariableContext { return s.left }

func (s *Assignment_statementContext) GetRight() IExpressionContext { return s.right }

func (s *Assignment_statementContext) SetLeft(v IVariableContext) { s.left = v }

func (s *Assignment_statementContext) SetRight(v IExpressionContext) { s.right = v }

func (s *Assignment_statementContext) Variable() IVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *Assignment_statementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Assignment_statementContext) ASSIGN_ATTEMPT() antlr.TerminalNode {
	return s.GetToken(stParserASSIGN_ATTEMPT, 0)
}

func (s *Assignment_statementContext) RASSIGN() antlr.TerminalNode {
	return s.GetToken(stParserRASSIGN, 0)
}

func (s *Assignment_statementContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(stParserASSIGN, 0)
}

func (s *Assignment_statementContext) INCREAE() antlr.TerminalNode {
	return s.GetToken(stParserINCREAE, 0)
}

func (s *Assignment_statementContext) DECREASE() antlr.TerminalNode {
	return s.GetToken(stParserDECREASE, 0)
}

func (s *Assignment_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Assignment_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Assignment_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterAssignment_statement(s)
	}
}

func (s *Assignment_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitAssignment_statement(s)
	}
}

func (p *stParser) Assignment_statement() (localctx IAssignment_statementContext) {
	localctx = NewAssignment_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, stParserRULE_assignment_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(823)

		var _x = p.Variable()

		localctx.(*Assignment_statementContext).left = _x
	}
	{
		p.SetState(824)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*Assignment_statementContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-99)) & ^0x3f) == 0 && ((int64(1)<<(_la-99))&25165831) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*Assignment_statementContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(825)

		var _x = p.expression(0)

		localctx.(*Assignment_statementContext).right = _x
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMult_assignment_statementContext is an interface to support dynamic dispatch.
type IMult_assignment_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetA returns the a rule contexts.
	GetA() IVariableContext

	// Get_variable returns the _variable rule contexts.
	Get_variable() IVariableContext

	// GetC returns the c rule contexts.
	GetC() IExpressionContext

	// SetA sets the a rule contexts.
	SetA(IVariableContext)

	// Set_variable sets the _variable rule contexts.
	Set_variable(IVariableContext)

	// SetC sets the c rule contexts.
	SetC(IExpressionContext)

	// GetItems returns the items rule context list.
	GetItems() []IVariableContext

	// SetItems sets the items rule context list.
	SetItems([]IVariableContext)

	// Getter signatures
	AllASSIGN() []antlr.TerminalNode
	ASSIGN(i int) antlr.TerminalNode
	AllVariable() []IVariableContext
	Variable(i int) IVariableContext
	Expression() IExpressionContext

	// IsMult_assignment_statementContext differentiates from other interfaces.
	IsMult_assignment_statementContext()
}

type Mult_assignment_statementContext struct {
	antlr.BaseParserRuleContext
	parser    antlr.Parser
	a         IVariableContext
	_variable IVariableContext
	items     []IVariableContext
	c         IExpressionContext
}

func NewEmptyMult_assignment_statementContext() *Mult_assignment_statementContext {
	var p = new(Mult_assignment_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_mult_assignment_statement
	return p
}

func InitEmptyMult_assignment_statementContext(p *Mult_assignment_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_mult_assignment_statement
}

func (*Mult_assignment_statementContext) IsMult_assignment_statementContext() {}

func NewMult_assignment_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Mult_assignment_statementContext {
	var p = new(Mult_assignment_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_mult_assignment_statement

	return p
}

func (s *Mult_assignment_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Mult_assignment_statementContext) GetA() IVariableContext { return s.a }

func (s *Mult_assignment_statementContext) Get_variable() IVariableContext { return s._variable }

func (s *Mult_assignment_statementContext) GetC() IExpressionContext { return s.c }

func (s *Mult_assignment_statementContext) SetA(v IVariableContext) { s.a = v }

func (s *Mult_assignment_statementContext) Set_variable(v IVariableContext) { s._variable = v }

func (s *Mult_assignment_statementContext) SetC(v IExpressionContext) { s.c = v }

func (s *Mult_assignment_statementContext) GetItems() []IVariableContext { return s.items }

func (s *Mult_assignment_statementContext) SetItems(v []IVariableContext) { s.items = v }

func (s *Mult_assignment_statementContext) AllASSIGN() []antlr.TerminalNode {
	return s.GetTokens(stParserASSIGN)
}

func (s *Mult_assignment_statementContext) ASSIGN(i int) antlr.TerminalNode {
	return s.GetToken(stParserASSIGN, i)
}

func (s *Mult_assignment_statementContext) AllVariable() []IVariableContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVariableContext); ok {
			len++
		}
	}

	tst := make([]IVariableContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVariableContext); ok {
			tst[i] = t.(IVariableContext)
			i++
		}
	}

	return tst
}

func (s *Mult_assignment_statementContext) Variable(i int) IVariableContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *Mult_assignment_statementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Mult_assignment_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Mult_assignment_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Mult_assignment_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterMult_assignment_statement(s)
	}
}

func (s *Mult_assignment_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitMult_assignment_statement(s)
	}
}

func (p *stParser) Mult_assignment_statement() (localctx IMult_assignment_statementContext) {
	localctx = NewMult_assignment_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, stParserRULE_mult_assignment_statement)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(827)

		var _x = p.Variable()

		localctx.(*Mult_assignment_statementContext).a = _x
	}
	p.SetState(830)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(828)
				p.Match(stParserASSIGN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(829)

				var _x = p.Variable()

				localctx.(*Mult_assignment_statementContext)._variable = _x
			}
			localctx.(*Mult_assignment_statementContext).items = append(localctx.(*Mult_assignment_statementContext).items, localctx.(*Mult_assignment_statementContext)._variable)

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(832)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 73, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(834)
		p.Match(stParserASSIGN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(835)

		var _x = p.expression(0)

		localctx.(*Mult_assignment_statementContext).c = _x
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInvocation_statementContext is an interface to support dynamic dispatch.
type IInvocation_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Invocation() IInvocationContext

	// IsInvocation_statementContext differentiates from other interfaces.
	IsInvocation_statementContext()
}

type Invocation_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInvocation_statementContext() *Invocation_statementContext {
	var p = new(Invocation_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_invocation_statement
	return p
}

func InitEmptyInvocation_statementContext(p *Invocation_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_invocation_statement
}

func (*Invocation_statementContext) IsInvocation_statementContext() {}

func NewInvocation_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Invocation_statementContext {
	var p = new(Invocation_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_invocation_statement

	return p
}

func (s *Invocation_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Invocation_statementContext) Invocation() IInvocationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInvocationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInvocationContext)
}

func (s *Invocation_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Invocation_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Invocation_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterInvocation_statement(s)
	}
}

func (s *Invocation_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitInvocation_statement(s)
	}
}

func (p *stParser) Invocation_statement() (localctx IInvocation_statementContext) {
	localctx = NewInvocation_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, stParserRULE_invocation_statement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(837)
		p.Invocation()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVariableContext is an interface to support dynamic dispatch.
type IVariableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Direct_variable() IDirect_variableContext
	Symbolic_variable() ISymbolic_variableContext

	// IsVariableContext differentiates from other interfaces.
	IsVariableContext()
}

type VariableContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableContext() *VariableContext {
	var p = new(VariableContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_variable
	return p
}

func InitEmptyVariableContext(p *VariableContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_variable
}

func (*VariableContext) IsVariableContext() {}

func NewVariableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableContext {
	var p = new(VariableContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_variable

	return p
}

func (s *VariableContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableContext) Direct_variable() IDirect_variableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDirect_variableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDirect_variableContext)
}

func (s *VariableContext) Symbolic_variable() ISymbolic_variableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolic_variableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolic_variableContext)
}

func (s *VariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterVariable(s)
	}
}

func (s *VariableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitVariable(s)
	}
}

func (p *stParser) Variable() (localctx IVariableContext) {
	localctx = NewVariableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, stParserRULE_variable)
	p.SetState(841)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case stParserDIRECT_VARIABLE_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(839)
			p.Direct_variable()
		}

	case stParserSUPER, stParserTHIS, stParserSTEP, stParserEND_STEP, stParserINITIAL_STEP, stParserEND_ACTION, stParserFROM, stParserEND_TRANSITION, stParserTRANSITION, stParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(840)
			p.Symbolic_variable()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVariable_namesContext is an interface to support dynamic dispatch.
type IVariable_namesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode
	SUPER() antlr.TerminalNode
	THIS() antlr.TerminalNode
	STEP() antlr.TerminalNode
	END_STEP() antlr.TerminalNode
	INITIAL_STEP() antlr.TerminalNode
	END_ACTION() antlr.TerminalNode
	FROM() antlr.TerminalNode
	END_TRANSITION() antlr.TerminalNode
	TRANSITION() antlr.TerminalNode

	// IsVariable_namesContext differentiates from other interfaces.
	IsVariable_namesContext()
}

type Variable_namesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariable_namesContext() *Variable_namesContext {
	var p = new(Variable_namesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_variable_names
	return p
}

func InitEmptyVariable_namesContext(p *Variable_namesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_variable_names
}

func (*Variable_namesContext) IsVariable_namesContext() {}

func NewVariable_namesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Variable_namesContext {
	var p = new(Variable_namesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_variable_names

	return p
}

func (s *Variable_namesContext) GetParser() antlr.Parser { return s.parser }

func (s *Variable_namesContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(stParserIDENTIFIER, 0)
}

func (s *Variable_namesContext) SUPER() antlr.TerminalNode {
	return s.GetToken(stParserSUPER, 0)
}

func (s *Variable_namesContext) THIS() antlr.TerminalNode {
	return s.GetToken(stParserTHIS, 0)
}

func (s *Variable_namesContext) STEP() antlr.TerminalNode {
	return s.GetToken(stParserSTEP, 0)
}

func (s *Variable_namesContext) END_STEP() antlr.TerminalNode {
	return s.GetToken(stParserEND_STEP, 0)
}

func (s *Variable_namesContext) INITIAL_STEP() antlr.TerminalNode {
	return s.GetToken(stParserINITIAL_STEP, 0)
}

func (s *Variable_namesContext) END_ACTION() antlr.TerminalNode {
	return s.GetToken(stParserEND_ACTION, 0)
}

func (s *Variable_namesContext) FROM() antlr.TerminalNode {
	return s.GetToken(stParserFROM, 0)
}

func (s *Variable_namesContext) END_TRANSITION() antlr.TerminalNode {
	return s.GetToken(stParserEND_TRANSITION, 0)
}

func (s *Variable_namesContext) TRANSITION() antlr.TerminalNode {
	return s.GetToken(stParserTRANSITION, 0)
}

func (s *Variable_namesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Variable_namesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Variable_namesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterVariable_names(s)
	}
}

func (s *Variable_namesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitVariable_names(s)
	}
}

func (p *stParser) Variable_names() (localctx IVariable_namesContext) {
	localctx = NewVariable_namesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, stParserRULE_variable_names)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(843)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-151)) & ^0x3f) == 0 && ((int64(1)<<(_la-151))&67124451) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISymbolic_variableContext is an interface to support dynamic dispatch.
type ISymbolic_variableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_CARET returns the _CARET token.
	Get_CARET() antlr.Token

	// Set_CARET sets the _CARET token.
	Set_CARET(antlr.Token)

	// GetDeref returns the deref token list.
	GetDeref() []antlr.Token

	// SetDeref sets the deref token list.
	SetDeref([]antlr.Token)

	// GetA returns the a rule contexts.
	GetA() IVariable_namesContext

	// GetOther returns the other rule contexts.
	GetOther() ISymbolic_variableContext

	// SetA sets the a rule contexts.
	SetA(IVariable_namesContext)

	// SetOther sets the other rule contexts.
	SetOther(ISymbolic_variableContext)

	// Getter signatures
	Variable_names() IVariable_namesContext
	Subscript_list() ISubscript_listContext
	DOT() antlr.TerminalNode
	Symbolic_variable() ISymbolic_variableContext
	AllCARET() []antlr.TerminalNode
	CARET(i int) antlr.TerminalNode

	// IsSymbolic_variableContext differentiates from other interfaces.
	IsSymbolic_variableContext()
}

type Symbolic_variableContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	a      IVariable_namesContext
	_CARET antlr.Token
	deref  []antlr.Token
	other  ISymbolic_variableContext
}

func NewEmptySymbolic_variableContext() *Symbolic_variableContext {
	var p = new(Symbolic_variableContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_symbolic_variable
	return p
}

func InitEmptySymbolic_variableContext(p *Symbolic_variableContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_symbolic_variable
}

func (*Symbolic_variableContext) IsSymbolic_variableContext() {}

func NewSymbolic_variableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Symbolic_variableContext {
	var p = new(Symbolic_variableContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_symbolic_variable

	return p
}

func (s *Symbolic_variableContext) GetParser() antlr.Parser { return s.parser }

func (s *Symbolic_variableContext) Get_CARET() antlr.Token { return s._CARET }

func (s *Symbolic_variableContext) Set_CARET(v antlr.Token) { s._CARET = v }

func (s *Symbolic_variableContext) GetDeref() []antlr.Token { return s.deref }

func (s *Symbolic_variableContext) SetDeref(v []antlr.Token) { s.deref = v }

func (s *Symbolic_variableContext) GetA() IVariable_namesContext { return s.a }

func (s *Symbolic_variableContext) GetOther() ISymbolic_variableContext { return s.other }

func (s *Symbolic_variableContext) SetA(v IVariable_namesContext) { s.a = v }

func (s *Symbolic_variableContext) SetOther(v ISymbolic_variableContext) { s.other = v }

func (s *Symbolic_variableContext) Variable_names() IVariable_namesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariable_namesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariable_namesContext)
}

func (s *Symbolic_variableContext) Subscript_list() ISubscript_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISubscript_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISubscript_listContext)
}

func (s *Symbolic_variableContext) DOT() antlr.TerminalNode {
	return s.GetToken(stParserDOT, 0)
}

func (s *Symbolic_variableContext) Symbolic_variable() ISymbolic_variableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolic_variableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolic_variableContext)
}

func (s *Symbolic_variableContext) AllCARET() []antlr.TerminalNode {
	return s.GetTokens(stParserCARET)
}

func (s *Symbolic_variableContext) CARET(i int) antlr.TerminalNode {
	return s.GetToken(stParserCARET, i)
}

func (s *Symbolic_variableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Symbolic_variableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Symbolic_variableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterSymbolic_variable(s)
	}
}

func (s *Symbolic_variableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitSymbolic_variable(s)
	}
}

func (p *stParser) Symbolic_variable() (localctx ISymbolic_variableContext) {
	localctx = NewSymbolic_variableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, stParserRULE_symbolic_variable)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(845)

		var _x = p.Variable_names()

		localctx.(*Symbolic_variableContext).a = _x
	}
	p.SetState(851)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 76, p.GetParserRuleContext()) == 1 {
		p.SetState(847)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(846)

					var _m = p.Match(stParserCARET)

					localctx.(*Symbolic_variableContext)._CARET = _m
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				localctx.(*Symbolic_variableContext).deref = append(localctx.(*Symbolic_variableContext).deref, localctx.(*Symbolic_variableContext)._CARET)

			default:
				p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				goto errorExit
			}

			p.SetState(849)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 75, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(857)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 78, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(853)
			p.Subscript_list()
		}
		p.SetState(855)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 77, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(854)
				p.Match(stParserCARET)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(861)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 79, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(859)
			p.Match(stParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(860)

			var _x = p.Symbolic_variable()

			localctx.(*Symbolic_variableContext).other = _x
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISubscript_listContext is an interface to support dynamic dispatch.
type ISubscript_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LBRACKET() antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	RBRACKET() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsSubscript_listContext differentiates from other interfaces.
	IsSubscript_listContext()
}

type Subscript_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubscript_listContext() *Subscript_listContext {
	var p = new(Subscript_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_subscript_list
	return p
}

func InitEmptySubscript_listContext(p *Subscript_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_subscript_list
}

func (*Subscript_listContext) IsSubscript_listContext() {}

func NewSubscript_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Subscript_listContext {
	var p = new(Subscript_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_subscript_list

	return p
}

func (s *Subscript_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Subscript_listContext) LBRACKET() antlr.TerminalNode {
	return s.GetToken(stParserLBRACKET, 0)
}

func (s *Subscript_listContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *Subscript_listContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Subscript_listContext) RBRACKET() antlr.TerminalNode {
	return s.GetToken(stParserRBRACKET, 0)
}

func (s *Subscript_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(stParserCOMMA)
}

func (s *Subscript_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(stParserCOMMA, i)
}

func (s *Subscript_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Subscript_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Subscript_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterSubscript_list(s)
	}
}

func (s *Subscript_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitSubscript_list(s)
	}
}

func (p *stParser) Subscript_list() (localctx ISubscript_listContext) {
	localctx = NewSubscript_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, stParserRULE_subscript_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(863)
		p.Match(stParserLBRACKET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(864)
		p.expression(0)
	}
	p.SetState(869)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == stParserCOMMA {
		{
			p.SetState(865)
			p.Match(stParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(866)
			p.expression(0)
		}

		p.SetState(871)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(872)
		p.Match(stParserRBRACKET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDirect_variableContext is an interface to support dynamic dispatch.
type IDirect_variableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DIRECT_VARIABLE_LITERAL() antlr.TerminalNode

	// IsDirect_variableContext differentiates from other interfaces.
	IsDirect_variableContext()
}

type Direct_variableContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDirect_variableContext() *Direct_variableContext {
	var p = new(Direct_variableContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_direct_variable
	return p
}

func InitEmptyDirect_variableContext(p *Direct_variableContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_direct_variable
}

func (*Direct_variableContext) IsDirect_variableContext() {}

func NewDirect_variableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Direct_variableContext {
	var p = new(Direct_variableContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_direct_variable

	return p
}

func (s *Direct_variableContext) GetParser() antlr.Parser { return s.parser }

func (s *Direct_variableContext) DIRECT_VARIABLE_LITERAL() antlr.TerminalNode {
	return s.GetToken(stParserDIRECT_VARIABLE_LITERAL, 0)
}

func (s *Direct_variableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Direct_variableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Direct_variableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterDirect_variable(s)
	}
}

func (s *Direct_variableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitDirect_variable(s)
	}
}

func (p *stParser) Direct_variable() (localctx IDirect_variableContext) {
	localctx = NewDirect_variableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, stParserRULE_direct_variable)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(874)
		p.Match(stParserDIRECT_VARIABLE_LITERAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IReturn_statementContext is an interface to support dynamic dispatch.
type IReturn_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RETURN() antlr.TerminalNode

	// IsReturn_statementContext differentiates from other interfaces.
	IsReturn_statementContext()
}

type Return_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturn_statementContext() *Return_statementContext {
	var p = new(Return_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_return_statement
	return p
}

func InitEmptyReturn_statementContext(p *Return_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_return_statement
}

func (*Return_statementContext) IsReturn_statementContext() {}

func NewReturn_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Return_statementContext {
	var p = new(Return_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_return_statement

	return p
}

func (s *Return_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Return_statementContext) RETURN() antlr.TerminalNode {
	return s.GetToken(stParserRETURN, 0)
}

func (s *Return_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Return_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Return_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterReturn_statement(s)
	}
}

func (s *Return_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitReturn_statement(s)
	}
}

func (p *stParser) Return_statement() (localctx IReturn_statementContext) {
	localctx = NewReturn_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, stParserRULE_return_statement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(876)
		p.Match(stParserRETURN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IParam_assignmentContext is an interface to support dynamic dispatch.
type IParam_assignmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetId returns the id token.
	GetId() antlr.Token

	// SetId sets the id token.
	SetId(antlr.Token)

	// GetV returns the v rule contexts.
	GetV() IVariableContext

	// SetV sets the v rule contexts.
	SetV(IVariableContext)

	// Getter signatures
	ARROW_RIGHT() antlr.TerminalNode
	IDENTIFIER() antlr.TerminalNode
	Variable() IVariableContext
	Expression() IExpressionContext
	ASSIGN() antlr.TerminalNode

	// IsParam_assignmentContext differentiates from other interfaces.
	IsParam_assignmentContext()
}

type Param_assignmentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	id     antlr.Token
	v      IVariableContext
}

func NewEmptyParam_assignmentContext() *Param_assignmentContext {
	var p = new(Param_assignmentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_param_assignment
	return p
}

func InitEmptyParam_assignmentContext(p *Param_assignmentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_param_assignment
}

func (*Param_assignmentContext) IsParam_assignmentContext() {}

func NewParam_assignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Param_assignmentContext {
	var p = new(Param_assignmentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_param_assignment

	return p
}

func (s *Param_assignmentContext) GetParser() antlr.Parser { return s.parser }

func (s *Param_assignmentContext) GetId() antlr.Token { return s.id }

func (s *Param_assignmentContext) SetId(v antlr.Token) { s.id = v }

func (s *Param_assignmentContext) GetV() IVariableContext { return s.v }

func (s *Param_assignmentContext) SetV(v IVariableContext) { s.v = v }

func (s *Param_assignmentContext) ARROW_RIGHT() antlr.TerminalNode {
	return s.GetToken(stParserARROW_RIGHT, 0)
}

func (s *Param_assignmentContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(stParserIDENTIFIER, 0)
}

func (s *Param_assignmentContext) Variable() IVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *Param_assignmentContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Param_assignmentContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(stParserASSIGN, 0)
}

func (s *Param_assignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Param_assignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Param_assignmentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterParam_assignment(s)
	}
}

func (s *Param_assignmentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitParam_assignment(s)
	}
}

func (p *stParser) Param_assignment() (localctx IParam_assignmentContext) {
	localctx = NewParam_assignmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, stParserRULE_param_assignment)
	p.SetState(886)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 82, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(878)

			var _m = p.Match(stParserIDENTIFIER)

			localctx.(*Param_assignmentContext).id = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(879)
			p.Match(stParserARROW_RIGHT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(880)

			var _x = p.Variable()

			localctx.(*Param_assignmentContext).v = _x
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(883)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 81, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(881)

				var _m = p.Match(stParserIDENTIFIER)

				localctx.(*Param_assignmentContext).id = _m
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(882)
				p.Match(stParserASSIGN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(885)
			p.expression(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIf_statementContext is an interface to support dynamic dispatch.
type IIf_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Get_statement_list returns the _statement_list rule contexts.
	Get_statement_list() IStatement_listContext

	// GetElselist returns the elselist rule contexts.
	GetElselist() IStatement_listContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// Set_statement_list sets the _statement_list rule contexts.
	Set_statement_list(IStatement_listContext)

	// SetElselist sets the elselist rule contexts.
	SetElselist(IStatement_listContext)

	// GetCond returns the cond rule context list.
	GetCond() []IExpressionContext

	// GetThenlist returns the thenlist rule context list.
	GetThenlist() []IStatement_listContext

	// SetCond sets the cond rule context list.
	SetCond([]IExpressionContext)

	// SetThenlist sets the thenlist rule context list.
	SetThenlist([]IStatement_listContext)

	// Getter signatures
	IF() antlr.TerminalNode
	AllTHEN() []antlr.TerminalNode
	THEN(i int) antlr.TerminalNode
	END_IF() antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	AllStatement_list() []IStatement_listContext
	Statement_list(i int) IStatement_listContext
	AllELSEIF() []antlr.TerminalNode
	ELSEIF(i int) antlr.TerminalNode
	ELSE() antlr.TerminalNode
	SEMICOLON() antlr.TerminalNode

	// IsIf_statementContext differentiates from other interfaces.
	IsIf_statementContext()
}

type If_statementContext struct {
	antlr.BaseParserRuleContext
	parser          antlr.Parser
	_expression     IExpressionContext
	cond            []IExpressionContext
	_statement_list IStatement_listContext
	thenlist        []IStatement_listContext
	elselist        IStatement_listContext
}

func NewEmptyIf_statementContext() *If_statementContext {
	var p = new(If_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_if_statement
	return p
}

func InitEmptyIf_statementContext(p *If_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_if_statement
}

func (*If_statementContext) IsIf_statementContext() {}

func NewIf_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *If_statementContext {
	var p = new(If_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_if_statement

	return p
}

func (s *If_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *If_statementContext) Get_expression() IExpressionContext { return s._expression }

func (s *If_statementContext) Get_statement_list() IStatement_listContext { return s._statement_list }

func (s *If_statementContext) GetElselist() IStatement_listContext { return s.elselist }

func (s *If_statementContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *If_statementContext) Set_statement_list(v IStatement_listContext) { s._statement_list = v }

func (s *If_statementContext) SetElselist(v IStatement_listContext) { s.elselist = v }

func (s *If_statementContext) GetCond() []IExpressionContext { return s.cond }

func (s *If_statementContext) GetThenlist() []IStatement_listContext { return s.thenlist }

func (s *If_statementContext) SetCond(v []IExpressionContext) { s.cond = v }

func (s *If_statementContext) SetThenlist(v []IStatement_listContext) { s.thenlist = v }

func (s *If_statementContext) IF() antlr.TerminalNode {
	return s.GetToken(stParserIF, 0)
}

func (s *If_statementContext) AllTHEN() []antlr.TerminalNode {
	return s.GetTokens(stParserTHEN)
}

func (s *If_statementContext) THEN(i int) antlr.TerminalNode {
	return s.GetToken(stParserTHEN, i)
}

func (s *If_statementContext) END_IF() antlr.TerminalNode {
	return s.GetToken(stParserEND_IF, 0)
}

func (s *If_statementContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *If_statementContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *If_statementContext) AllStatement_list() []IStatement_listContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStatement_listContext); ok {
			len++
		}
	}

	tst := make([]IStatement_listContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStatement_listContext); ok {
			tst[i] = t.(IStatement_listContext)
			i++
		}
	}

	return tst
}

func (s *If_statementContext) Statement_list(i int) IStatement_listContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatement_listContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatement_listContext)
}

func (s *If_statementContext) AllELSEIF() []antlr.TerminalNode {
	return s.GetTokens(stParserELSEIF)
}

func (s *If_statementContext) ELSEIF(i int) antlr.TerminalNode {
	return s.GetToken(stParserELSEIF, i)
}

func (s *If_statementContext) ELSE() antlr.TerminalNode {
	return s.GetToken(stParserELSE, 0)
}

func (s *If_statementContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(stParserSEMICOLON, 0)
}

func (s *If_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *If_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *If_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterIf_statement(s)
	}
}

func (s *If_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitIf_statement(s)
	}
}

func (p *stParser) If_statement() (localctx IIf_statementContext) {
	localctx = NewIf_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, stParserRULE_if_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(888)
		p.Match(stParserIF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(889)

		var _x = p.expression(0)

		localctx.(*If_statementContext)._expression = _x
	}
	localctx.(*If_statementContext).cond = append(localctx.(*If_statementContext).cond, localctx.(*If_statementContext)._expression)
	{
		p.SetState(890)
		p.Match(stParserTHEN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(891)

		var _x = p.Statement_list()

		localctx.(*If_statementContext)._statement_list = _x
	}
	localctx.(*If_statementContext).thenlist = append(localctx.(*If_statementContext).thenlist, localctx.(*If_statementContext)._statement_list)
	p.SetState(899)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == stParserELSEIF {
		{
			p.SetState(892)
			p.Match(stParserELSEIF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(893)

			var _x = p.expression(0)

			localctx.(*If_statementContext)._expression = _x
		}
		localctx.(*If_statementContext).cond = append(localctx.(*If_statementContext).cond, localctx.(*If_statementContext)._expression)
		{
			p.SetState(894)
			p.Match(stParserTHEN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(895)

			var _x = p.Statement_list()

			localctx.(*If_statementContext)._statement_list = _x
		}
		localctx.(*If_statementContext).thenlist = append(localctx.(*If_statementContext).thenlist, localctx.(*If_statementContext)._statement_list)

		p.SetState(901)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(904)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == stParserELSE {
		{
			p.SetState(902)
			p.Match(stParserELSE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(903)

			var _x = p.Statement_list()

			localctx.(*If_statementContext).elselist = _x
		}

	}
	{
		p.SetState(906)
		p.Match(stParserEND_IF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(908)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 85, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(907)
			p.Match(stParserSEMICOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICase_statementContext is an interface to support dynamic dispatch.
type ICase_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCond returns the cond rule contexts.
	GetCond() IExpressionContext

	// GetElselist returns the elselist rule contexts.
	GetElselist() IStatement_listContext

	// SetCond sets the cond rule contexts.
	SetCond(IExpressionContext)

	// SetElselist sets the elselist rule contexts.
	SetElselist(IStatement_listContext)

	// Getter signatures
	CASE() antlr.TerminalNode
	OF() antlr.TerminalNode
	END_CASE() antlr.TerminalNode
	Expression() IExpressionContext
	AllCase_entry() []ICase_entryContext
	Case_entry(i int) ICase_entryContext
	ELSE() antlr.TerminalNode
	Statement_list() IStatement_listContext
	COLON() antlr.TerminalNode

	// IsCase_statementContext differentiates from other interfaces.
	IsCase_statementContext()
}

type Case_statementContext struct {
	antlr.BaseParserRuleContext
	parser   antlr.Parser
	cond     IExpressionContext
	elselist IStatement_listContext
}

func NewEmptyCase_statementContext() *Case_statementContext {
	var p = new(Case_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_case_statement
	return p
}

func InitEmptyCase_statementContext(p *Case_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_case_statement
}

func (*Case_statementContext) IsCase_statementContext() {}

func NewCase_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Case_statementContext {
	var p = new(Case_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_case_statement

	return p
}

func (s *Case_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Case_statementContext) GetCond() IExpressionContext { return s.cond }

func (s *Case_statementContext) GetElselist() IStatement_listContext { return s.elselist }

func (s *Case_statementContext) SetCond(v IExpressionContext) { s.cond = v }

func (s *Case_statementContext) SetElselist(v IStatement_listContext) { s.elselist = v }

func (s *Case_statementContext) CASE() antlr.TerminalNode {
	return s.GetToken(stParserCASE, 0)
}

func (s *Case_statementContext) OF() antlr.TerminalNode {
	return s.GetToken(stParserOF, 0)
}

func (s *Case_statementContext) END_CASE() antlr.TerminalNode {
	return s.GetToken(stParserEND_CASE, 0)
}

func (s *Case_statementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Case_statementContext) AllCase_entry() []ICase_entryContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICase_entryContext); ok {
			len++
		}
	}

	tst := make([]ICase_entryContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICase_entryContext); ok {
			tst[i] = t.(ICase_entryContext)
			i++
		}
	}

	return tst
}

func (s *Case_statementContext) Case_entry(i int) ICase_entryContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICase_entryContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICase_entryContext)
}

func (s *Case_statementContext) ELSE() antlr.TerminalNode {
	return s.GetToken(stParserELSE, 0)
}

func (s *Case_statementContext) Statement_list() IStatement_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatement_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatement_listContext)
}

func (s *Case_statementContext) COLON() antlr.TerminalNode {
	return s.GetToken(stParserCOLON, 0)
}

func (s *Case_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Case_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterCase_statement(s)
	}
}

func (s *Case_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitCase_statement(s)
	}
}

func (p *stParser) Case_statement() (localctx ICase_statementContext) {
	localctx = NewCase_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, stParserRULE_case_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(910)
		p.Match(stParserCASE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(911)

		var _x = p.expression(0)

		localctx.(*Case_statementContext).cond = _x
	}
	{
		p.SetState(912)
		p.Match(stParserOF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(914)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = ((int64((_la-111)) & ^0x3f) == 0 && ((int64(1)<<(_la-111))&72057594071482369) != 0) || _la == stParserIDENTIFIER {
		{
			p.SetState(913)
			p.Case_entry()
		}

		p.SetState(916)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(923)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == stParserELSE {
		{
			p.SetState(918)
			p.Match(stParserELSE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(920)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == stParserCOLON {
			{
				p.SetState(919)
				p.Match(stParserCOLON)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(922)

			var _x = p.Statement_list()

			localctx.(*Case_statementContext).elselist = _x
		}

	}
	{
		p.SetState(925)
		p.Match(stParserEND_CASE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICase_entryContext is an interface to support dynamic dispatch.
type ICase_entryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllCase_condition() []ICase_conditionContext
	Case_condition(i int) ICase_conditionContext
	COLON() antlr.TerminalNode
	Statement_list() IStatement_listContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsCase_entryContext differentiates from other interfaces.
	IsCase_entryContext()
}

type Case_entryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCase_entryContext() *Case_entryContext {
	var p = new(Case_entryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_case_entry
	return p
}

func InitEmptyCase_entryContext(p *Case_entryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_case_entry
}

func (*Case_entryContext) IsCase_entryContext() {}

func NewCase_entryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Case_entryContext {
	var p = new(Case_entryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_case_entry

	return p
}

func (s *Case_entryContext) GetParser() antlr.Parser { return s.parser }

func (s *Case_entryContext) AllCase_condition() []ICase_conditionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICase_conditionContext); ok {
			len++
		}
	}

	tst := make([]ICase_conditionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICase_conditionContext); ok {
			tst[i] = t.(ICase_conditionContext)
			i++
		}
	}

	return tst
}

func (s *Case_entryContext) Case_condition(i int) ICase_conditionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICase_conditionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICase_conditionContext)
}

func (s *Case_entryContext) COLON() antlr.TerminalNode {
	return s.GetToken(stParserCOLON, 0)
}

func (s *Case_entryContext) Statement_list() IStatement_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatement_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatement_listContext)
}

func (s *Case_entryContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(stParserCOMMA)
}

func (s *Case_entryContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(stParserCOMMA, i)
}

func (s *Case_entryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_entryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Case_entryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterCase_entry(s)
	}
}

func (s *Case_entryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitCase_entry(s)
	}
}

func (p *stParser) Case_entry() (localctx ICase_entryContext) {
	localctx = NewCase_entryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, stParserRULE_case_entry)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(927)
		p.Case_condition()
	}
	p.SetState(932)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == stParserCOMMA {
		{
			p.SetState(928)
			p.Match(stParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(929)
			p.Case_condition()
		}

		p.SetState(934)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(935)
		p.Match(stParserCOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(936)
		p.Statement_list()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICase_conditionContext is an interface to support dynamic dispatch.
type ICase_conditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Subrange() ISubrangeContext
	Integer() IIntegerContext
	Cast() ICastContext
	IDENTIFIER() antlr.TerminalNode

	// IsCase_conditionContext differentiates from other interfaces.
	IsCase_conditionContext()
}

type Case_conditionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCase_conditionContext() *Case_conditionContext {
	var p = new(Case_conditionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_case_condition
	return p
}

func InitEmptyCase_conditionContext(p *Case_conditionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_case_condition
}

func (*Case_conditionContext) IsCase_conditionContext() {}

func NewCase_conditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Case_conditionContext {
	var p = new(Case_conditionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_case_condition

	return p
}

func (s *Case_conditionContext) GetParser() antlr.Parser { return s.parser }

func (s *Case_conditionContext) Subrange() ISubrangeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISubrangeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISubrangeContext)
}

func (s *Case_conditionContext) Integer() IIntegerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerContext)
}

func (s *Case_conditionContext) Cast() ICastContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICastContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICastContext)
}

func (s *Case_conditionContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(stParserIDENTIFIER, 0)
}

func (s *Case_conditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_conditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Case_conditionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterCase_condition(s)
	}
}

func (s *Case_conditionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitCase_condition(s)
	}
}

func (p *stParser) Case_condition() (localctx ICase_conditionContext) {
	localctx = NewCase_conditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, stParserRULE_case_condition)
	p.SetState(942)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 90, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(938)
			p.Subrange()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(939)
			p.Integer()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(940)
			p.Cast()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(941)
			p.Match(stParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFor_statementContext is an interface to support dynamic dispatch.
type IFor_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetVar_ returns the var_ token.
	GetVar_() antlr.Token

	// SetVar_ sets the var_ token.
	SetVar_(antlr.Token)

	// GetBegin returns the begin rule contexts.
	GetBegin() IExpressionContext

	// GetEndPosition returns the endPosition rule contexts.
	GetEndPosition() IExpressionContext

	// GetBy returns the by rule contexts.
	GetBy() IExpressionContext

	// SetBegin sets the begin rule contexts.
	SetBegin(IExpressionContext)

	// SetEndPosition sets the endPosition rule contexts.
	SetEndPosition(IExpressionContext)

	// SetBy sets the by rule contexts.
	SetBy(IExpressionContext)

	// Getter signatures
	FOR() antlr.TerminalNode
	ASSIGN() antlr.TerminalNode
	TO() antlr.TerminalNode
	DO() antlr.TerminalNode
	Statement_list() IStatement_listContext
	END_FOR() antlr.TerminalNode
	IDENTIFIER() antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	BY() antlr.TerminalNode

	// IsFor_statementContext differentiates from other interfaces.
	IsFor_statementContext()
}

type For_statementContext struct {
	antlr.BaseParserRuleContext
	parser      antlr.Parser
	var_        antlr.Token
	begin       IExpressionContext
	endPosition IExpressionContext
	by          IExpressionContext
}

func NewEmptyFor_statementContext() *For_statementContext {
	var p = new(For_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_for_statement
	return p
}

func InitEmptyFor_statementContext(p *For_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_for_statement
}

func (*For_statementContext) IsFor_statementContext() {}

func NewFor_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *For_statementContext {
	var p = new(For_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_for_statement

	return p
}

func (s *For_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *For_statementContext) GetVar_() antlr.Token { return s.var_ }

func (s *For_statementContext) SetVar_(v antlr.Token) { s.var_ = v }

func (s *For_statementContext) GetBegin() IExpressionContext { return s.begin }

func (s *For_statementContext) GetEndPosition() IExpressionContext { return s.endPosition }

func (s *For_statementContext) GetBy() IExpressionContext { return s.by }

func (s *For_statementContext) SetBegin(v IExpressionContext) { s.begin = v }

func (s *For_statementContext) SetEndPosition(v IExpressionContext) { s.endPosition = v }

func (s *For_statementContext) SetBy(v IExpressionContext) { s.by = v }

func (s *For_statementContext) FOR() antlr.TerminalNode {
	return s.GetToken(stParserFOR, 0)
}

func (s *For_statementContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(stParserASSIGN, 0)
}

func (s *For_statementContext) TO() antlr.TerminalNode {
	return s.GetToken(stParserTO, 0)
}

func (s *For_statementContext) DO() antlr.TerminalNode {
	return s.GetToken(stParserDO, 0)
}

func (s *For_statementContext) Statement_list() IStatement_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatement_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatement_listContext)
}

func (s *For_statementContext) END_FOR() antlr.TerminalNode {
	return s.GetToken(stParserEND_FOR, 0)
}

func (s *For_statementContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(stParserIDENTIFIER, 0)
}

func (s *For_statementContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *For_statementContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *For_statementContext) BY() antlr.TerminalNode {
	return s.GetToken(stParserBY, 0)
}

func (s *For_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *For_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *For_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterFor_statement(s)
	}
}

func (s *For_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitFor_statement(s)
	}
}

func (p *stParser) For_statement() (localctx IFor_statementContext) {
	localctx = NewFor_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, stParserRULE_for_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(944)
		p.Match(stParserFOR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(945)

		var _m = p.Match(stParserIDENTIFIER)

		localctx.(*For_statementContext).var_ = _m
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(946)
		p.Match(stParserASSIGN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(947)

		var _x = p.expression(0)

		localctx.(*For_statementContext).begin = _x
	}
	{
		p.SetState(948)
		p.Match(stParserTO)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(949)

		var _x = p.expression(0)

		localctx.(*For_statementContext).endPosition = _x
	}
	p.SetState(952)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == stParserBY {
		{
			p.SetState(950)
			p.Match(stParserBY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(951)

			var _x = p.expression(0)

			localctx.(*For_statementContext).by = _x
		}

	}
	{
		p.SetState(954)
		p.Match(stParserDO)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(955)
		p.Statement_list()
	}
	{
		p.SetState(956)
		p.Match(stParserEND_FOR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWhile_statementContext is an interface to support dynamic dispatch.
type IWhile_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WHILE() antlr.TerminalNode
	Expression() IExpressionContext
	DO() antlr.TerminalNode
	Statement_list() IStatement_listContext
	END_WHILE() antlr.TerminalNode

	// IsWhile_statementContext differentiates from other interfaces.
	IsWhile_statementContext()
}

type While_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhile_statementContext() *While_statementContext {
	var p = new(While_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_while_statement
	return p
}

func InitEmptyWhile_statementContext(p *While_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_while_statement
}

func (*While_statementContext) IsWhile_statementContext() {}

func NewWhile_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *While_statementContext {
	var p = new(While_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_while_statement

	return p
}

func (s *While_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *While_statementContext) WHILE() antlr.TerminalNode {
	return s.GetToken(stParserWHILE, 0)
}

func (s *While_statementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *While_statementContext) DO() antlr.TerminalNode {
	return s.GetToken(stParserDO, 0)
}

func (s *While_statementContext) Statement_list() IStatement_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatement_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatement_listContext)
}

func (s *While_statementContext) END_WHILE() antlr.TerminalNode {
	return s.GetToken(stParserEND_WHILE, 0)
}

func (s *While_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *While_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *While_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterWhile_statement(s)
	}
}

func (s *While_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitWhile_statement(s)
	}
}

func (p *stParser) While_statement() (localctx IWhile_statementContext) {
	localctx = NewWhile_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, stParserRULE_while_statement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(958)
		p.Match(stParserWHILE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(959)
		p.expression(0)
	}
	{
		p.SetState(960)
		p.Match(stParserDO)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(961)
		p.Statement_list()
	}
	{
		p.SetState(962)
		p.Match(stParserEND_WHILE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRepeat_statementContext is an interface to support dynamic dispatch.
type IRepeat_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	REPEAT() antlr.TerminalNode
	Statement_list() IStatement_listContext
	UNTIL() antlr.TerminalNode
	Expression() IExpressionContext
	END_REPEAT() antlr.TerminalNode

	// IsRepeat_statementContext differentiates from other interfaces.
	IsRepeat_statementContext()
}

type Repeat_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRepeat_statementContext() *Repeat_statementContext {
	var p = new(Repeat_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_repeat_statement
	return p
}

func InitEmptyRepeat_statementContext(p *Repeat_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_repeat_statement
}

func (*Repeat_statementContext) IsRepeat_statementContext() {}

func NewRepeat_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Repeat_statementContext {
	var p = new(Repeat_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_repeat_statement

	return p
}

func (s *Repeat_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Repeat_statementContext) REPEAT() antlr.TerminalNode {
	return s.GetToken(stParserREPEAT, 0)
}

func (s *Repeat_statementContext) Statement_list() IStatement_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatement_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatement_listContext)
}

func (s *Repeat_statementContext) UNTIL() antlr.TerminalNode {
	return s.GetToken(stParserUNTIL, 0)
}

func (s *Repeat_statementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Repeat_statementContext) END_REPEAT() antlr.TerminalNode {
	return s.GetToken(stParserEND_REPEAT, 0)
}

func (s *Repeat_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Repeat_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Repeat_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterRepeat_statement(s)
	}
}

func (s *Repeat_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitRepeat_statement(s)
	}
}

func (p *stParser) Repeat_statement() (localctx IRepeat_statementContext) {
	localctx = NewRepeat_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, stParserRULE_repeat_statement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(964)
		p.Match(stParserREPEAT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(965)
		p.Statement_list()
	}
	{
		p.SetState(966)
		p.Match(stParserUNTIL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(967)
		p.expression(0)
	}
	{
		p.SetState(968)
		p.Match(stParserEND_REPEAT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExit_statementContext is an interface to support dynamic dispatch.
type IExit_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EXIT() antlr.TerminalNode

	// IsExit_statementContext differentiates from other interfaces.
	IsExit_statementContext()
}

type Exit_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExit_statementContext() *Exit_statementContext {
	var p = new(Exit_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_exit_statement
	return p
}

func InitEmptyExit_statementContext(p *Exit_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_exit_statement
}

func (*Exit_statementContext) IsExit_statementContext() {}

func NewExit_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Exit_statementContext {
	var p = new(Exit_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_exit_statement

	return p
}

func (s *Exit_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Exit_statementContext) EXIT() antlr.TerminalNode {
	return s.GetToken(stParserEXIT, 0)
}

func (s *Exit_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Exit_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Exit_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterExit_statement(s)
	}
}

func (s *Exit_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitExit_statement(s)
	}
}

func (p *stParser) Exit_statement() (localctx IExit_statementContext) {
	localctx = NewExit_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, stParserRULE_exit_statement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(970)
		p.Match(stParserEXIT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IContinue_statementContext is an interface to support dynamic dispatch.
type IContinue_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CONTINUE() antlr.TerminalNode

	// IsContinue_statementContext differentiates from other interfaces.
	IsContinue_statementContext()
}

type Continue_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContinue_statementContext() *Continue_statementContext {
	var p = new(Continue_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_continue_statement
	return p
}

func InitEmptyContinue_statementContext(p *Continue_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_continue_statement
}

func (*Continue_statementContext) IsContinue_statementContext() {}

func NewContinue_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Continue_statementContext {
	var p = new(Continue_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_continue_statement

	return p
}

func (s *Continue_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Continue_statementContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(stParserCONTINUE, 0)
}

func (s *Continue_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Continue_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Continue_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterContinue_statement(s)
	}
}

func (s *Continue_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitContinue_statement(s)
	}
}

func (p *stParser) Continue_statement() (localctx IContinue_statementContext) {
	localctx = NewContinue_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, stParserRULE_continue_statement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(972)
		p.Match(stParserCONTINUE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISfcContext is an interface to support dynamic dispatch.
type ISfcContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllSfc_network() []ISfc_networkContext
	Sfc_network(i int) ISfc_networkContext

	// IsSfcContext differentiates from other interfaces.
	IsSfcContext()
}

type SfcContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySfcContext() *SfcContext {
	var p = new(SfcContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_sfc
	return p
}

func InitEmptySfcContext(p *SfcContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_sfc
}

func (*SfcContext) IsSfcContext() {}

func NewSfcContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SfcContext {
	var p = new(SfcContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_sfc

	return p
}

func (s *SfcContext) GetParser() antlr.Parser { return s.parser }

func (s *SfcContext) AllSfc_network() []ISfc_networkContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISfc_networkContext); ok {
			len++
		}
	}

	tst := make([]ISfc_networkContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISfc_networkContext); ok {
			tst[i] = t.(ISfc_networkContext)
			i++
		}
	}

	return tst
}

func (s *SfcContext) Sfc_network(i int) ISfc_networkContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISfc_networkContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISfc_networkContext)
}

func (s *SfcContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SfcContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SfcContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterSfc(s)
	}
}

func (s *SfcContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitSfc(s)
	}
}

func (p *stParser) Sfc() (localctx ISfcContext) {
	localctx = NewSfcContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, stParserRULE_sfc)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(975)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == stParserINITIAL_STEP {
		{
			p.SetState(974)
			p.Sfc_network()
		}

		p.SetState(977)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISfc_networkContext is an interface to support dynamic dispatch.
type ISfc_networkContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Init_step() IInit_stepContext
	AllStep() []IStepContext
	Step(i int) IStepContext
	AllTransition() []ITransitionContext
	Transition(i int) ITransitionContext

	// IsSfc_networkContext differentiates from other interfaces.
	IsSfc_networkContext()
}

type Sfc_networkContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySfc_networkContext() *Sfc_networkContext {
	var p = new(Sfc_networkContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_sfc_network
	return p
}

func InitEmptySfc_networkContext(p *Sfc_networkContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_sfc_network
}

func (*Sfc_networkContext) IsSfc_networkContext() {}

func NewSfc_networkContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sfc_networkContext {
	var p = new(Sfc_networkContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_sfc_network

	return p
}

func (s *Sfc_networkContext) GetParser() antlr.Parser { return s.parser }

func (s *Sfc_networkContext) Init_step() IInit_stepContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInit_stepContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInit_stepContext)
}

func (s *Sfc_networkContext) AllStep() []IStepContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStepContext); ok {
			len++
		}
	}

	tst := make([]IStepContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStepContext); ok {
			tst[i] = t.(IStepContext)
			i++
		}
	}

	return tst
}

func (s *Sfc_networkContext) Step(i int) IStepContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStepContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStepContext)
}

func (s *Sfc_networkContext) AllTransition() []ITransitionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITransitionContext); ok {
			len++
		}
	}

	tst := make([]ITransitionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITransitionContext); ok {
			tst[i] = t.(ITransitionContext)
			i++
		}
	}

	return tst
}

func (s *Sfc_networkContext) Transition(i int) ITransitionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITransitionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITransitionContext)
}

func (s *Sfc_networkContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sfc_networkContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sfc_networkContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterSfc_network(s)
	}
}

func (s *Sfc_networkContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitSfc_network(s)
	}
}

func (p *stParser) Sfc_network() (localctx ISfc_networkContext) {
	localctx = NewSfc_networkContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, stParserRULE_sfc_network)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(979)
		p.Init_step()
	}
	p.SetState(984)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == stParserSTEP || _la == stParserTRANSITION {
		p.SetState(982)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case stParserSTEP:
			{
				p.SetState(980)
				p.Step()
			}

		case stParserTRANSITION:
			{
				p.SetState(981)
				p.Transition()
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(986)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInit_stepContext is an interface to support dynamic dispatch.
type IInit_stepContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetStep_name returns the step_name token.
	GetStep_name() antlr.Token

	// SetStep_name sets the step_name token.
	SetStep_name(antlr.Token)

	// Getter signatures
	INITIAL_STEP() antlr.TerminalNode
	COLON() antlr.TerminalNode
	END_STEP() antlr.TerminalNode
	IDENTIFIER() antlr.TerminalNode
	AllAction_association() []IAction_associationContext
	Action_association(i int) IAction_associationContext
	AllSEMICOLON() []antlr.TerminalNode
	SEMICOLON(i int) antlr.TerminalNode

	// IsInit_stepContext differentiates from other interfaces.
	IsInit_stepContext()
}

type Init_stepContext struct {
	antlr.BaseParserRuleContext
	parser    antlr.Parser
	step_name antlr.Token
}

func NewEmptyInit_stepContext() *Init_stepContext {
	var p = new(Init_stepContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_init_step
	return p
}

func InitEmptyInit_stepContext(p *Init_stepContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_init_step
}

func (*Init_stepContext) IsInit_stepContext() {}

func NewInit_stepContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Init_stepContext {
	var p = new(Init_stepContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_init_step

	return p
}

func (s *Init_stepContext) GetParser() antlr.Parser { return s.parser }

func (s *Init_stepContext) GetStep_name() antlr.Token { return s.step_name }

func (s *Init_stepContext) SetStep_name(v antlr.Token) { s.step_name = v }

func (s *Init_stepContext) INITIAL_STEP() antlr.TerminalNode {
	return s.GetToken(stParserINITIAL_STEP, 0)
}

func (s *Init_stepContext) COLON() antlr.TerminalNode {
	return s.GetToken(stParserCOLON, 0)
}

func (s *Init_stepContext) END_STEP() antlr.TerminalNode {
	return s.GetToken(stParserEND_STEP, 0)
}

func (s *Init_stepContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(stParserIDENTIFIER, 0)
}

func (s *Init_stepContext) AllAction_association() []IAction_associationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAction_associationContext); ok {
			len++
		}
	}

	tst := make([]IAction_associationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAction_associationContext); ok {
			tst[i] = t.(IAction_associationContext)
			i++
		}
	}

	return tst
}

func (s *Init_stepContext) Action_association(i int) IAction_associationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_associationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_associationContext)
}

func (s *Init_stepContext) AllSEMICOLON() []antlr.TerminalNode {
	return s.GetTokens(stParserSEMICOLON)
}

func (s *Init_stepContext) SEMICOLON(i int) antlr.TerminalNode {
	return s.GetToken(stParserSEMICOLON, i)
}

func (s *Init_stepContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Init_stepContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Init_stepContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterInit_step(s)
	}
}

func (s *Init_stepContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitInit_step(s)
	}
}

func (p *stParser) Init_step() (localctx IInit_stepContext) {
	localctx = NewInit_stepContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, stParserRULE_init_step)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(987)
		p.Match(stParserINITIAL_STEP)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(988)

		var _m = p.Match(stParserIDENTIFIER)

		localctx.(*Init_stepContext).step_name = _m
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(989)
		p.Match(stParserCOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(995)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 95, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(990)
				p.Action_association()
			}
			{
				p.SetState(991)
				p.Match(stParserSEMICOLON)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(997)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 95, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(998)
		p.Match(stParserEND_STEP)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStepContext is an interface to support dynamic dispatch.
type IStepContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetStep_name returns the step_name token.
	GetStep_name() antlr.Token

	// SetStep_name sets the step_name token.
	SetStep_name(antlr.Token)

	// Getter signatures
	STEP() antlr.TerminalNode
	END_STEP() antlr.TerminalNode
	IDENTIFIER() antlr.TerminalNode
	COLON() antlr.TerminalNode
	AllAction_association() []IAction_associationContext
	Action_association(i int) IAction_associationContext
	AllSEMICOLON() []antlr.TerminalNode
	SEMICOLON(i int) antlr.TerminalNode

	// IsStepContext differentiates from other interfaces.
	IsStepContext()
}

type StepContext struct {
	antlr.BaseParserRuleContext
	parser    antlr.Parser
	step_name antlr.Token
}

func NewEmptyStepContext() *StepContext {
	var p = new(StepContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_step
	return p
}

func InitEmptyStepContext(p *StepContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_step
}

func (*StepContext) IsStepContext() {}

func NewStepContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StepContext {
	var p = new(StepContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_step

	return p
}

func (s *StepContext) GetParser() antlr.Parser { return s.parser }

func (s *StepContext) GetStep_name() antlr.Token { return s.step_name }

func (s *StepContext) SetStep_name(v antlr.Token) { s.step_name = v }

func (s *StepContext) STEP() antlr.TerminalNode {
	return s.GetToken(stParserSTEP, 0)
}

func (s *StepContext) END_STEP() antlr.TerminalNode {
	return s.GetToken(stParserEND_STEP, 0)
}

func (s *StepContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(stParserIDENTIFIER, 0)
}

func (s *StepContext) COLON() antlr.TerminalNode {
	return s.GetToken(stParserCOLON, 0)
}

func (s *StepContext) AllAction_association() []IAction_associationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAction_associationContext); ok {
			len++
		}
	}

	tst := make([]IAction_associationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAction_associationContext); ok {
			tst[i] = t.(IAction_associationContext)
			i++
		}
	}

	return tst
}

func (s *StepContext) Action_association(i int) IAction_associationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAction_associationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAction_associationContext)
}

func (s *StepContext) AllSEMICOLON() []antlr.TerminalNode {
	return s.GetTokens(stParserSEMICOLON)
}

func (s *StepContext) SEMICOLON(i int) antlr.TerminalNode {
	return s.GetToken(stParserSEMICOLON, i)
}

func (s *StepContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StepContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StepContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterStep(s)
	}
}

func (s *StepContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitStep(s)
	}
}

func (p *stParser) Step() (localctx IStepContext) {
	localctx = NewStepContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, stParserRULE_step)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1000)
		p.Match(stParserSTEP)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1001)

		var _m = p.Match(stParserIDENTIFIER)

		localctx.(*StepContext).step_name = _m
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1003)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == stParserCOLON {
		{
			p.SetState(1002)
			p.Match(stParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1010)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 97, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1005)
				p.Action_association()
			}
			{
				p.SetState(1006)
				p.Match(stParserSEMICOLON)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1012)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 97, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(1013)
		p.Match(stParserEND_STEP)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAction_associationContext is an interface to support dynamic dispatch.
type IAction_associationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIndicatorName returns the indicatorName token.
	GetIndicatorName() antlr.Token

	// SetIndicatorName sets the indicatorName token.
	SetIndicatorName(antlr.Token)

	// GetActionName returns the actionName rule contexts.
	GetActionName() ISymbolic_variableContext

	// SetActionName sets the actionName rule contexts.
	SetActionName(ISymbolic_variableContext)

	// Getter signatures
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	Symbolic_variable() ISymbolic_variableContext
	ActionQualifier() IActionQualifierContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	AllIDENTIFIER() []antlr.TerminalNode
	IDENTIFIER(i int) antlr.TerminalNode

	// IsAction_associationContext differentiates from other interfaces.
	IsAction_associationContext()
}

type Action_associationContext struct {
	antlr.BaseParserRuleContext
	parser        antlr.Parser
	actionName    ISymbolic_variableContext
	indicatorName antlr.Token
}

func NewEmptyAction_associationContext() *Action_associationContext {
	var p = new(Action_associationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_action_association
	return p
}

func InitEmptyAction_associationContext(p *Action_associationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_action_association
}

func (*Action_associationContext) IsAction_associationContext() {}

func NewAction_associationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Action_associationContext {
	var p = new(Action_associationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_action_association

	return p
}

func (s *Action_associationContext) GetParser() antlr.Parser { return s.parser }

func (s *Action_associationContext) GetIndicatorName() antlr.Token { return s.indicatorName }

func (s *Action_associationContext) SetIndicatorName(v antlr.Token) { s.indicatorName = v }

func (s *Action_associationContext) GetActionName() ISymbolic_variableContext { return s.actionName }

func (s *Action_associationContext) SetActionName(v ISymbolic_variableContext) { s.actionName = v }

func (s *Action_associationContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(stParserLPAREN, 0)
}

func (s *Action_associationContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(stParserRPAREN, 0)
}

func (s *Action_associationContext) Symbolic_variable() ISymbolic_variableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolic_variableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolic_variableContext)
}

func (s *Action_associationContext) ActionQualifier() IActionQualifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IActionQualifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IActionQualifierContext)
}

func (s *Action_associationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(stParserCOMMA)
}

func (s *Action_associationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(stParserCOMMA, i)
}

func (s *Action_associationContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(stParserIDENTIFIER)
}

func (s *Action_associationContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(stParserIDENTIFIER, i)
}

func (s *Action_associationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Action_associationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Action_associationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterAction_association(s)
	}
}

func (s *Action_associationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitAction_association(s)
	}
}

func (p *stParser) Action_association() (localctx IAction_associationContext) {
	localctx = NewAction_associationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, stParserRULE_action_association)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1015)

		var _x = p.Symbolic_variable()

		localctx.(*Action_associationContext).actionName = _x
	}
	{
		p.SetState(1016)
		p.Match(stParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1018)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == stParserIDENTIFIER {
		{
			p.SetState(1017)
			p.ActionQualifier()
		}

	}
	p.SetState(1024)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == stParserCOMMA {
		{
			p.SetState(1020)
			p.Match(stParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1021)

			var _m = p.Match(stParserIDENTIFIER)

			localctx.(*Action_associationContext).indicatorName = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1026)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1027)
		p.Match(stParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IActionQualifierContext is an interface to support dynamic dispatch.
type IActionQualifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode
	COMMA() antlr.TerminalNode
	Expression() IExpressionContext

	// IsActionQualifierContext differentiates from other interfaces.
	IsActionQualifierContext()
}

type ActionQualifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyActionQualifierContext() *ActionQualifierContext {
	var p = new(ActionQualifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_actionQualifier
	return p
}

func InitEmptyActionQualifierContext(p *ActionQualifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_actionQualifier
}

func (*ActionQualifierContext) IsActionQualifierContext() {}

func NewActionQualifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ActionQualifierContext {
	var p = new(ActionQualifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_actionQualifier

	return p
}

func (s *ActionQualifierContext) GetParser() antlr.Parser { return s.parser }

func (s *ActionQualifierContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(stParserIDENTIFIER, 0)
}

func (s *ActionQualifierContext) COMMA() antlr.TerminalNode {
	return s.GetToken(stParserCOMMA, 0)
}

func (s *ActionQualifierContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ActionQualifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ActionQualifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ActionQualifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterActionQualifier(s)
	}
}

func (s *ActionQualifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitActionQualifier(s)
	}
}

func (p *stParser) ActionQualifier() (localctx IActionQualifierContext) {
	localctx = NewActionQualifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, stParserRULE_actionQualifier)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1029)
		p.Match(stParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1032)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 100, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1030)
			p.Match(stParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1031)
			p.expression(0)
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITransitionContext is an interface to support dynamic dispatch.
type ITransitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetId returns the id token.
	GetId() antlr.Token

	// SetId sets the id token.
	SetId(antlr.Token)

	// GetFrom returns the from rule contexts.
	GetFrom() IStepsContext

	// GetTo returns the to rule contexts.
	GetTo() IStepsContext

	// SetFrom sets the from rule contexts.
	SetFrom(IStepsContext)

	// SetTo sets the to rule contexts.
	SetTo(IStepsContext)

	// Getter signatures
	TRANSITION() antlr.TerminalNode
	FROM() antlr.TerminalNode
	TO() antlr.TerminalNode
	TransitionCond() ITransitionCondContext
	END_TRANSITION() antlr.TerminalNode
	AllSteps() []IStepsContext
	Steps(i int) IStepsContext
	LPAREN() antlr.TerminalNode
	PRIORITY() antlr.TerminalNode
	ASSIGN() antlr.TerminalNode
	INTEGER_LITERAL() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	IDENTIFIER() antlr.TerminalNode

	// IsTransitionContext differentiates from other interfaces.
	IsTransitionContext()
}

type TransitionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	id     antlr.Token
	from   IStepsContext
	to     IStepsContext
}

func NewEmptyTransitionContext() *TransitionContext {
	var p = new(TransitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_transition
	return p
}

func InitEmptyTransitionContext(p *TransitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_transition
}

func (*TransitionContext) IsTransitionContext() {}

func NewTransitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TransitionContext {
	var p = new(TransitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_transition

	return p
}

func (s *TransitionContext) GetParser() antlr.Parser { return s.parser }

func (s *TransitionContext) GetId() antlr.Token { return s.id }

func (s *TransitionContext) SetId(v antlr.Token) { s.id = v }

func (s *TransitionContext) GetFrom() IStepsContext { return s.from }

func (s *TransitionContext) GetTo() IStepsContext { return s.to }

func (s *TransitionContext) SetFrom(v IStepsContext) { s.from = v }

func (s *TransitionContext) SetTo(v IStepsContext) { s.to = v }

func (s *TransitionContext) TRANSITION() antlr.TerminalNode {
	return s.GetToken(stParserTRANSITION, 0)
}

func (s *TransitionContext) FROM() antlr.TerminalNode {
	return s.GetToken(stParserFROM, 0)
}

func (s *TransitionContext) TO() antlr.TerminalNode {
	return s.GetToken(stParserTO, 0)
}

func (s *TransitionContext) TransitionCond() ITransitionCondContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITransitionCondContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITransitionCondContext)
}

func (s *TransitionContext) END_TRANSITION() antlr.TerminalNode {
	return s.GetToken(stParserEND_TRANSITION, 0)
}

func (s *TransitionContext) AllSteps() []IStepsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStepsContext); ok {
			len++
		}
	}

	tst := make([]IStepsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStepsContext); ok {
			tst[i] = t.(IStepsContext)
			i++
		}
	}

	return tst
}

func (s *TransitionContext) Steps(i int) IStepsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStepsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStepsContext)
}

func (s *TransitionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(stParserLPAREN, 0)
}

func (s *TransitionContext) PRIORITY() antlr.TerminalNode {
	return s.GetToken(stParserPRIORITY, 0)
}

func (s *TransitionContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(stParserASSIGN, 0)
}

func (s *TransitionContext) INTEGER_LITERAL() antlr.TerminalNode {
	return s.GetToken(stParserINTEGER_LITERAL, 0)
}

func (s *TransitionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(stParserRPAREN, 0)
}

func (s *TransitionContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(stParserIDENTIFIER, 0)
}

func (s *TransitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TransitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TransitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterTransition(s)
	}
}

func (s *TransitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitTransition(s)
	}
}

func (p *stParser) Transition() (localctx ITransitionContext) {
	localctx = NewTransitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, stParserRULE_transition)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1034)
		p.Match(stParserTRANSITION)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1036)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == stParserIDENTIFIER {
		{
			p.SetState(1035)

			var _m = p.Match(stParserIDENTIFIER)

			localctx.(*TransitionContext).id = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1043)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == stParserLPAREN {
		{
			p.SetState(1038)
			p.Match(stParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1039)
			p.Match(stParserPRIORITY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1040)
			p.Match(stParserASSIGN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1041)
			p.Match(stParserINTEGER_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1042)
			p.Match(stParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1045)
		p.Match(stParserFROM)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1046)

		var _x = p.Steps()

		localctx.(*TransitionContext).from = _x
	}
	{
		p.SetState(1047)
		p.Match(stParserTO)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1048)

		var _x = p.Steps()

		localctx.(*TransitionContext).to = _x
	}
	{
		p.SetState(1049)
		p.TransitionCond()
	}
	{
		p.SetState(1050)
		p.Match(stParserEND_TRANSITION)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStepsContext is an interface to support dynamic dispatch.
type IStepsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIDENTIFIER() []antlr.TerminalNode
	IDENTIFIER(i int) antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsStepsContext differentiates from other interfaces.
	IsStepsContext()
}

type StepsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStepsContext() *StepsContext {
	var p = new(StepsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_steps
	return p
}

func InitEmptyStepsContext(p *StepsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_steps
}

func (*StepsContext) IsStepsContext() {}

func NewStepsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StepsContext {
	var p = new(StepsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_steps

	return p
}

func (s *StepsContext) GetParser() antlr.Parser { return s.parser }

func (s *StepsContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(stParserIDENTIFIER)
}

func (s *StepsContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(stParserIDENTIFIER, i)
}

func (s *StepsContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(stParserLPAREN, 0)
}

func (s *StepsContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(stParserRPAREN, 0)
}

func (s *StepsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(stParserCOMMA)
}

func (s *StepsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(stParserCOMMA, i)
}

func (s *StepsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StepsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StepsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterSteps(s)
	}
}

func (s *StepsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitSteps(s)
	}
}

func (p *stParser) Steps() (localctx IStepsContext) {
	localctx = NewStepsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, stParserRULE_steps)
	var _la int

	p.SetState(1063)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case stParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1052)
			p.Match(stParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case stParserLPAREN:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1053)
			p.Match(stParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1054)
			p.Match(stParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1059)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == stParserCOMMA {
			{
				p.SetState(1055)
				p.Match(stParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1056)
				p.Match(stParserIDENTIFIER)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1061)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1062)
			p.Match(stParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITransitionCondContext is an interface to support dynamic dispatch.
type ITransitionCondContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ASSIGN() antlr.TerminalNode
	Expression() IExpressionContext
	SEMICOLON() antlr.TerminalNode

	// IsTransitionCondContext differentiates from other interfaces.
	IsTransitionCondContext()
}

type TransitionCondContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransitionCondContext() *TransitionCondContext {
	var p = new(TransitionCondContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_transitionCond
	return p
}

func InitEmptyTransitionCondContext(p *TransitionCondContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_transitionCond
}

func (*TransitionCondContext) IsTransitionCondContext() {}

func NewTransitionCondContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TransitionCondContext {
	var p = new(TransitionCondContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_transitionCond

	return p
}

func (s *TransitionCondContext) GetParser() antlr.Parser { return s.parser }

func (s *TransitionCondContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(stParserASSIGN, 0)
}

func (s *TransitionCondContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TransitionCondContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(stParserSEMICOLON, 0)
}

func (s *TransitionCondContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TransitionCondContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TransitionCondContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterTransitionCond(s)
	}
}

func (s *TransitionCondContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitTransitionCond(s)
	}
}

func (p *stParser) TransitionCond() (localctx ITransitionCondContext) {
	localctx = NewTransitionCondContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, stParserRULE_transitionCond)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1065)
		p.Match(stParserASSIGN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1066)
		p.expression(0)
	}
	{
		p.SetState(1067)
		p.Match(stParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IActionContext is an interface to support dynamic dispatch.
type IActionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ACTION() antlr.TerminalNode
	IDENTIFIER() antlr.TerminalNode
	Body() IBodyContext
	END_ACTION() antlr.TerminalNode
	COLON() antlr.TerminalNode

	// IsActionContext differentiates from other interfaces.
	IsActionContext()
}

type ActionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyActionContext() *ActionContext {
	var p = new(ActionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_action
	return p
}

func InitEmptyActionContext(p *ActionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_action
}

func (*ActionContext) IsActionContext() {}

func NewActionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ActionContext {
	var p = new(ActionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_action

	return p
}

func (s *ActionContext) GetParser() antlr.Parser { return s.parser }

func (s *ActionContext) ACTION() antlr.TerminalNode {
	return s.GetToken(stParserACTION, 0)
}

func (s *ActionContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(stParserIDENTIFIER, 0)
}

func (s *ActionContext) Body() IBodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBodyContext)
}

func (s *ActionContext) END_ACTION() antlr.TerminalNode {
	return s.GetToken(stParserEND_ACTION, 0)
}

func (s *ActionContext) COLON() antlr.TerminalNode {
	return s.GetToken(stParserCOLON, 0)
}

func (s *ActionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ActionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ActionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterAction(s)
	}
}

func (s *ActionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitAction(s)
	}
}

func (p *stParser) Action_() (localctx IActionContext) {
	localctx = NewActionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, stParserRULE_action)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1069)
		p.Match(stParserACTION)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1070)
		p.Match(stParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1072)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == stParserCOLON {
		{
			p.SetState(1071)
			p.Match(stParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1074)
		p.Body()
	}
	{
		p.SetState(1075)
		p.Match(stParserEND_ACTION)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIlBodyContext is an interface to support dynamic dispatch.
type IIlBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllEOL() []antlr.TerminalNode
	EOL(i int) antlr.TerminalNode
	AllIlInstruction() []IIlInstructionContext
	IlInstruction(i int) IIlInstructionContext

	// IsIlBodyContext differentiates from other interfaces.
	IsIlBodyContext()
}

type IlBodyContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIlBodyContext() *IlBodyContext {
	var p = new(IlBodyContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_ilBody
	return p
}

func InitEmptyIlBodyContext(p *IlBodyContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_ilBody
}

func (*IlBodyContext) IsIlBodyContext() {}

func NewIlBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IlBodyContext {
	var p = new(IlBodyContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_ilBody

	return p
}

func (s *IlBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *IlBodyContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(stParserEOL)
}

func (s *IlBodyContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(stParserEOL, i)
}

func (s *IlBodyContext) AllIlInstruction() []IIlInstructionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIlInstructionContext); ok {
			len++
		}
	}

	tst := make([]IIlInstructionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIlInstructionContext); ok {
			tst[i] = t.(IIlInstructionContext)
			i++
		}
	}

	return tst
}

func (s *IlBodyContext) IlInstruction(i int) IIlInstructionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIlInstructionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIlInstructionContext)
}

func (s *IlBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IlBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IlBodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterIlBody(s)
	}
}

func (s *IlBodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitIlBody(s)
	}
}

func (p *stParser) IlBody() (localctx IIlBodyContext) {
	localctx = NewIlBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, stParserRULE_ilBody)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1078)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 106, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1077)
			p.Match(stParserEOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1081)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1080)
				p.IlInstruction()
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(1083)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 107, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1086)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == stParserEOL {
		{
			p.SetState(1085)
			p.Match(stParserEOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIlInstructionContext is an interface to support dynamic dispatch.
type IIlInstructionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLabel returns the label token.
	GetLabel() antlr.Token

	// SetLabel sets the label token.
	SetLabel(antlr.Token)

	// Getter signatures
	IlInstr() IIlInstrContext
	AllEOL() []antlr.TerminalNode
	EOL(i int) antlr.TerminalNode
	EOF() antlr.TerminalNode
	COLON() antlr.TerminalNode
	IDENTIFIER() antlr.TerminalNode

	// IsIlInstructionContext differentiates from other interfaces.
	IsIlInstructionContext()
}

type IlInstructionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	label  antlr.Token
}

func NewEmptyIlInstructionContext() *IlInstructionContext {
	var p = new(IlInstructionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_ilInstruction
	return p
}

func InitEmptyIlInstructionContext(p *IlInstructionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_ilInstruction
}

func (*IlInstructionContext) IsIlInstructionContext() {}

func NewIlInstructionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IlInstructionContext {
	var p = new(IlInstructionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_ilInstruction

	return p
}

func (s *IlInstructionContext) GetParser() antlr.Parser { return s.parser }

func (s *IlInstructionContext) GetLabel() antlr.Token { return s.label }

func (s *IlInstructionContext) SetLabel(v antlr.Token) { s.label = v }

func (s *IlInstructionContext) IlInstr() IIlInstrContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIlInstrContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIlInstrContext)
}

func (s *IlInstructionContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(stParserEOL)
}

func (s *IlInstructionContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(stParserEOL, i)
}

func (s *IlInstructionContext) EOF() antlr.TerminalNode {
	return s.GetToken(stParserEOF, 0)
}

func (s *IlInstructionContext) COLON() antlr.TerminalNode {
	return s.GetToken(stParserCOLON, 0)
}

func (s *IlInstructionContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(stParserIDENTIFIER, 0)
}

func (s *IlInstructionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IlInstructionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IlInstructionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterIlInstruction(s)
	}
}

func (s *IlInstructionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitIlInstruction(s)
	}
}

func (p *stParser) IlInstruction() (localctx IIlInstructionContext) {
	localctx = NewIlInstructionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, stParserRULE_ilInstruction)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1090)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 109, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1088)

			var _m = p.Match(stParserIDENTIFIER)

			localctx.(*IlInstructionContext).label = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1089)
			p.Match(stParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1093)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == stParserEOL {
		{
			p.SetState(1092)
			p.Match(stParserEOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1095)
		p.IlInstr()
	}
	{
		p.SetState(1096)
		_la = p.GetTokenStream().LA(1)

		if !(_la == stParserEOF || _la == stParserEOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIlSInstrContext is an interface to support dynamic dispatch.
type IIlSInstrContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IlSimple() IIlSimpleContext
	IlExpr() IIlExprContext
	IlFunctionCall() IIlFunctionCallContext
	IlFormalFunctionCall() IIlFormalFunctionCallContext

	// IsIlSInstrContext differentiates from other interfaces.
	IsIlSInstrContext()
}

type IlSInstrContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIlSInstrContext() *IlSInstrContext {
	var p = new(IlSInstrContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_ilSInstr
	return p
}

func InitEmptyIlSInstrContext(p *IlSInstrContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_ilSInstr
}

func (*IlSInstrContext) IsIlSInstrContext() {}

func NewIlSInstrContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IlSInstrContext {
	var p = new(IlSInstrContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_ilSInstr

	return p
}

func (s *IlSInstrContext) GetParser() antlr.Parser { return s.parser }

func (s *IlSInstrContext) IlSimple() IIlSimpleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIlSimpleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIlSimpleContext)
}

func (s *IlSInstrContext) IlExpr() IIlExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIlExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIlExprContext)
}

func (s *IlSInstrContext) IlFunctionCall() IIlFunctionCallContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIlFunctionCallContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIlFunctionCallContext)
}

func (s *IlSInstrContext) IlFormalFunctionCall() IIlFormalFunctionCallContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIlFormalFunctionCallContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIlFormalFunctionCallContext)
}

func (s *IlSInstrContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IlSInstrContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IlSInstrContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterIlSInstr(s)
	}
}

func (s *IlSInstrContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitIlSInstr(s)
	}
}

func (p *stParser) IlSInstr() (localctx IIlSInstrContext) {
	localctx = NewIlSInstrContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, stParserRULE_ilSInstr)
	p.SetState(1102)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 111, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1098)
			p.IlSimple()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1099)
			p.IlExpr()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1100)
			p.IlFunctionCall()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1101)
			p.IlFormalFunctionCall()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIlInstrContext is an interface to support dynamic dispatch.
type IIlInstrContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IlSimple() IIlSimpleContext
	IlExpr() IIlExprContext
	IlJump() IIlJumpContext
	IlCall() IIlCallContext
	IlFunctionCall() IIlFunctionCallContext
	IlFormalFunctionCall() IIlFormalFunctionCallContext

	// IsIlInstrContext differentiates from other interfaces.
	IsIlInstrContext()
}

type IlInstrContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIlInstrContext() *IlInstrContext {
	var p = new(IlInstrContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_ilInstr
	return p
}

func InitEmptyIlInstrContext(p *IlInstrContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_ilInstr
}

func (*IlInstrContext) IsIlInstrContext() {}

func NewIlInstrContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IlInstrContext {
	var p = new(IlInstrContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_ilInstr

	return p
}

func (s *IlInstrContext) GetParser() antlr.Parser { return s.parser }

func (s *IlInstrContext) IlSimple() IIlSimpleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIlSimpleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIlSimpleContext)
}

func (s *IlInstrContext) IlExpr() IIlExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIlExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIlExprContext)
}

func (s *IlInstrContext) IlJump() IIlJumpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIlJumpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIlJumpContext)
}

func (s *IlInstrContext) IlCall() IIlCallContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIlCallContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIlCallContext)
}

func (s *IlInstrContext) IlFunctionCall() IIlFunctionCallContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIlFunctionCallContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIlFunctionCallContext)
}

func (s *IlInstrContext) IlFormalFunctionCall() IIlFormalFunctionCallContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIlFormalFunctionCallContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIlFormalFunctionCallContext)
}

func (s *IlInstrContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IlInstrContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IlInstrContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterIlInstr(s)
	}
}

func (s *IlInstrContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitIlInstr(s)
	}
}

func (p *stParser) IlInstr() (localctx IIlInstrContext) {
	localctx = NewIlInstrContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, stParserRULE_ilInstr)
	p.SetState(1110)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 112, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1104)
			p.IlSimple()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1105)
			p.IlExpr()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1106)
			p.IlJump()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1107)
			p.IlCall()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1108)
			p.IlFunctionCall()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1109)
			p.IlFormalFunctionCall()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIlSInstrListContext is an interface to support dynamic dispatch.
type IIlSInstrListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIlSInstr() []IIlSInstrContext
	IlSInstr(i int) IIlSInstrContext
	AllEOL() []antlr.TerminalNode
	EOL(i int) antlr.TerminalNode

	// IsIlSInstrListContext differentiates from other interfaces.
	IsIlSInstrListContext()
}

type IlSInstrListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIlSInstrListContext() *IlSInstrListContext {
	var p = new(IlSInstrListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_ilSInstrList
	return p
}

func InitEmptyIlSInstrListContext(p *IlSInstrListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_ilSInstrList
}

func (*IlSInstrListContext) IsIlSInstrListContext() {}

func NewIlSInstrListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IlSInstrListContext {
	var p = new(IlSInstrListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_ilSInstrList

	return p
}

func (s *IlSInstrListContext) GetParser() antlr.Parser { return s.parser }

func (s *IlSInstrListContext) AllIlSInstr() []IIlSInstrContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIlSInstrContext); ok {
			len++
		}
	}

	tst := make([]IIlSInstrContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIlSInstrContext); ok {
			tst[i] = t.(IIlSInstrContext)
			i++
		}
	}

	return tst
}

func (s *IlSInstrListContext) IlSInstr(i int) IIlSInstrContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIlSInstrContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIlSInstrContext)
}

func (s *IlSInstrListContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(stParserEOL)
}

func (s *IlSInstrListContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(stParserEOL, i)
}

func (s *IlSInstrListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IlSInstrListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IlSInstrListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterIlSInstrList(s)
	}
}

func (s *IlSInstrListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitIlSInstrList(s)
	}
}

func (p *stParser) IlSInstrList() (localctx IIlSInstrListContext) {
	localctx = NewIlSInstrListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, stParserRULE_ilSInstrList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1115)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = ((int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&4089268461669744641) != 0) || ((int64((_la-161)) & ^0x3f) == 0 && ((int64(1)<<(_la-161))&2305838370527445007) != 0) {
		{
			p.SetState(1112)
			p.IlSInstr()
		}
		{
			p.SetState(1113)
			p.Match(stParserEOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1117)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIlSimpleContext is an interface to support dynamic dispatch.
type IIlSimpleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op rule contexts.
	GetOp() ISimple_opContext

	// SetOp sets the op rule contexts.
	SetOp(ISimple_opContext)

	// Getter signatures
	Simple_op() ISimple_opContext
	IlOperand() IIlOperandContext

	// IsIlSimpleContext differentiates from other interfaces.
	IsIlSimpleContext()
}

type IlSimpleContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	op     ISimple_opContext
}

func NewEmptyIlSimpleContext() *IlSimpleContext {
	var p = new(IlSimpleContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_ilSimple
	return p
}

func InitEmptyIlSimpleContext(p *IlSimpleContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_ilSimple
}

func (*IlSimpleContext) IsIlSimpleContext() {}

func NewIlSimpleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IlSimpleContext {
	var p = new(IlSimpleContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_ilSimple

	return p
}

func (s *IlSimpleContext) GetParser() antlr.Parser { return s.parser }

func (s *IlSimpleContext) GetOp() ISimple_opContext { return s.op }

func (s *IlSimpleContext) SetOp(v ISimple_opContext) { s.op = v }

func (s *IlSimpleContext) Simple_op() ISimple_opContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimple_opContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimple_opContext)
}

func (s *IlSimpleContext) IlOperand() IIlOperandContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIlOperandContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIlOperandContext)
}

func (s *IlSimpleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IlSimpleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IlSimpleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterIlSimple(s)
	}
}

func (s *IlSimpleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitIlSimple(s)
	}
}

func (p *stParser) IlSimple() (localctx IIlSimpleContext) {
	localctx = NewIlSimpleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, stParserRULE_ilSimple)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1119)

		var _x = p.Simple_op()

		localctx.(*IlSimpleContext).op = _x
	}
	p.SetState(1121)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64((_la-111)) & ^0x3f) == 0 && ((int64(1)<<(_la-111))&9168452530601197569) != 0) || ((int64((_la-175)) & ^0x3f) == 0 && ((int64(1)<<(_la-175))&7) != 0) {
		{
			p.SetState(1120)
			p.IlOperand()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIlExprContext is an interface to support dynamic dispatch.
type IIlExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op rule contexts.
	GetOp() IExprOperatorContext

	// SetOp sets the op rule contexts.
	SetOp(IExprOperatorContext)

	// Getter signatures
	ExprOperator() IExprOperatorContext
	LPAREN() antlr.TerminalNode
	EOL() antlr.TerminalNode
	IlSInstrList() IIlSInstrListContext
	RPAREN() antlr.TerminalNode
	IlOperand() IIlOperandContext

	// IsIlExprContext differentiates from other interfaces.
	IsIlExprContext()
}

type IlExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	op     IExprOperatorContext
}

func NewEmptyIlExprContext() *IlExprContext {
	var p = new(IlExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_ilExpr
	return p
}

func InitEmptyIlExprContext(p *IlExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_ilExpr
}

func (*IlExprContext) IsIlExprContext() {}

func NewIlExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IlExprContext {
	var p = new(IlExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_ilExpr

	return p
}

func (s *IlExprContext) GetParser() antlr.Parser { return s.parser }

func (s *IlExprContext) GetOp() IExprOperatorContext { return s.op }

func (s *IlExprContext) SetOp(v IExprOperatorContext) { s.op = v }

func (s *IlExprContext) ExprOperator() IExprOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprOperatorContext)
}

func (s *IlExprContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(stParserLPAREN, 0)
}

func (s *IlExprContext) EOL() antlr.TerminalNode {
	return s.GetToken(stParserEOL, 0)
}

func (s *IlExprContext) IlSInstrList() IIlSInstrListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIlSInstrListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIlSInstrListContext)
}

func (s *IlExprContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(stParserRPAREN, 0)
}

func (s *IlExprContext) IlOperand() IIlOperandContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIlOperandContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIlOperandContext)
}

func (s *IlExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IlExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IlExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterIlExpr(s)
	}
}

func (s *IlExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitIlExpr(s)
	}
}

func (p *stParser) IlExpr() (localctx IIlExprContext) {
	localctx = NewIlExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, stParserRULE_ilExpr)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1123)

		var _x = p.ExprOperator()

		localctx.(*IlExprContext).op = _x
	}
	p.SetState(1135)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case stParserLPAREN:
		{
			p.SetState(1124)
			p.Match(stParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1126)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64((_la-111)) & ^0x3f) == 0 && ((int64(1)<<(_la-111))&9168452530601197569) != 0) || ((int64((_la-175)) & ^0x3f) == 0 && ((int64(1)<<(_la-175))&7) != 0) {
			{
				p.SetState(1125)
				p.IlOperand()
			}

		}
		{
			p.SetState(1128)
			p.Match(stParserEOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1129)
			p.IlSInstrList()
		}
		{
			p.SetState(1130)
			p.Match(stParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case stParserEOF, stParserMINUS, stParserNULL, stParserREF, stParserCAST_LITERAL, stParserSUPER, stParserTHIS, stParserSTEP, stParserEND_STEP, stParserINITIAL_STEP, stParserEND_ACTION, stParserFROM, stParserEND_TRANSITION, stParserTRANSITION, stParserINTEGER_LITERAL, stParserBITS_LITERAL, stParserREAL_LITERAL, stParserTIME_LITERAL, stParserDATE_LITERAL, stParserTOD_LITERAL, stParserDATETIME, stParserSTRING_LITERAL, stParserWSTRING_LITERAL, stParserIDENTIFIER, stParserEOL:
		p.SetState(1133)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64((_la-111)) & ^0x3f) == 0 && ((int64(1)<<(_la-111))&9168452530601197569) != 0) || ((int64((_la-175)) & ^0x3f) == 0 && ((int64(1)<<(_la-175))&7) != 0) {
			{
				p.SetState(1132)
				p.IlOperand()
			}

		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIlFunctionCallContext is an interface to support dynamic dispatch.
type IIlFunctionCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op rule contexts.
	GetOp() ISymbolic_variableContext

	// SetOp sets the op rule contexts.
	SetOp(ISymbolic_variableContext)

	// Getter signatures
	Symbolic_variable() ISymbolic_variableContext
	AllIlOperand() []IIlOperandContext
	IlOperand(i int) IIlOperandContext
	COMMA() antlr.TerminalNode

	// IsIlFunctionCallContext differentiates from other interfaces.
	IsIlFunctionCallContext()
}

type IlFunctionCallContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	op     ISymbolic_variableContext
}

func NewEmptyIlFunctionCallContext() *IlFunctionCallContext {
	var p = new(IlFunctionCallContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_ilFunctionCall
	return p
}

func InitEmptyIlFunctionCallContext(p *IlFunctionCallContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_ilFunctionCall
}

func (*IlFunctionCallContext) IsIlFunctionCallContext() {}

func NewIlFunctionCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IlFunctionCallContext {
	var p = new(IlFunctionCallContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_ilFunctionCall

	return p
}

func (s *IlFunctionCallContext) GetParser() antlr.Parser { return s.parser }

func (s *IlFunctionCallContext) GetOp() ISymbolic_variableContext { return s.op }

func (s *IlFunctionCallContext) SetOp(v ISymbolic_variableContext) { s.op = v }

func (s *IlFunctionCallContext) Symbolic_variable() ISymbolic_variableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolic_variableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolic_variableContext)
}

func (s *IlFunctionCallContext) AllIlOperand() []IIlOperandContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIlOperandContext); ok {
			len++
		}
	}

	tst := make([]IIlOperandContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIlOperandContext); ok {
			tst[i] = t.(IIlOperandContext)
			i++
		}
	}

	return tst
}

func (s *IlFunctionCallContext) IlOperand(i int) IIlOperandContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIlOperandContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIlOperandContext)
}

func (s *IlFunctionCallContext) COMMA() antlr.TerminalNode {
	return s.GetToken(stParserCOMMA, 0)
}

func (s *IlFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IlFunctionCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IlFunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterIlFunctionCall(s)
	}
}

func (s *IlFunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitIlFunctionCall(s)
	}
}

func (p *stParser) IlFunctionCall() (localctx IIlFunctionCallContext) {
	localctx = NewIlFunctionCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, stParserRULE_ilFunctionCall)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1137)

		var _x = p.Symbolic_variable()

		localctx.(*IlFunctionCallContext).op = _x
	}
	p.SetState(1143)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64((_la-111)) & ^0x3f) == 0 && ((int64(1)<<(_la-111))&9168452530601197569) != 0) || ((int64((_la-175)) & ^0x3f) == 0 && ((int64(1)<<(_la-175))&7) != 0) {
		{
			p.SetState(1138)
			p.IlOperand()
		}
		p.SetState(1141)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == stParserCOMMA {
			{
				p.SetState(1139)
				p.Match(stParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1140)
				p.IlOperand()
			}

		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIlFormalFunctionCallContext is an interface to support dynamic dispatch.
type IIlFormalFunctionCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op rule contexts.
	GetOp() ISymbolic_variableContext

	// SetOp sets the op rule contexts.
	SetOp(ISymbolic_variableContext)

	// Getter signatures
	LPAREN() antlr.TerminalNode
	EOL() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	Symbolic_variable() ISymbolic_variableContext
	AllIl_param_assignment() []IIl_param_assignmentContext
	Il_param_assignment(i int) IIl_param_assignmentContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsIlFormalFunctionCallContext differentiates from other interfaces.
	IsIlFormalFunctionCallContext()
}

type IlFormalFunctionCallContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	op     ISymbolic_variableContext
}

func NewEmptyIlFormalFunctionCallContext() *IlFormalFunctionCallContext {
	var p = new(IlFormalFunctionCallContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_ilFormalFunctionCall
	return p
}

func InitEmptyIlFormalFunctionCallContext(p *IlFormalFunctionCallContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_ilFormalFunctionCall
}

func (*IlFormalFunctionCallContext) IsIlFormalFunctionCallContext() {}

func NewIlFormalFunctionCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IlFormalFunctionCallContext {
	var p = new(IlFormalFunctionCallContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_ilFormalFunctionCall

	return p
}

func (s *IlFormalFunctionCallContext) GetParser() antlr.Parser { return s.parser }

func (s *IlFormalFunctionCallContext) GetOp() ISymbolic_variableContext { return s.op }

func (s *IlFormalFunctionCallContext) SetOp(v ISymbolic_variableContext) { s.op = v }

func (s *IlFormalFunctionCallContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(stParserLPAREN, 0)
}

func (s *IlFormalFunctionCallContext) EOL() antlr.TerminalNode {
	return s.GetToken(stParserEOL, 0)
}

func (s *IlFormalFunctionCallContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(stParserRPAREN, 0)
}

func (s *IlFormalFunctionCallContext) Symbolic_variable() ISymbolic_variableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolic_variableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolic_variableContext)
}

func (s *IlFormalFunctionCallContext) AllIl_param_assignment() []IIl_param_assignmentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIl_param_assignmentContext); ok {
			len++
		}
	}

	tst := make([]IIl_param_assignmentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIl_param_assignmentContext); ok {
			tst[i] = t.(IIl_param_assignmentContext)
			i++
		}
	}

	return tst
}

func (s *IlFormalFunctionCallContext) Il_param_assignment(i int) IIl_param_assignmentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIl_param_assignmentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIl_param_assignmentContext)
}

func (s *IlFormalFunctionCallContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(stParserCOMMA)
}

func (s *IlFormalFunctionCallContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(stParserCOMMA, i)
}

func (s *IlFormalFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IlFormalFunctionCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IlFormalFunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterIlFormalFunctionCall(s)
	}
}

func (s *IlFormalFunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitIlFormalFunctionCall(s)
	}
}

func (p *stParser) IlFormalFunctionCall() (localctx IIlFormalFunctionCallContext) {
	localctx = NewIlFormalFunctionCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, stParserRULE_ilFormalFunctionCall)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1145)

		var _x = p.Symbolic_variable()

		localctx.(*IlFormalFunctionCallContext).op = _x
	}
	{
		p.SetState(1146)
		p.Match(stParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1147)
		p.Match(stParserEOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1156)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == stParserNOT || _la == stParserIDENTIFIER {
		{
			p.SetState(1148)
			p.Il_param_assignment()
		}
		p.SetState(1153)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == stParserCOMMA {
			{
				p.SetState(1149)
				p.Match(stParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1150)
				p.Il_param_assignment()
			}

			p.SetState(1155)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(1158)
		p.Match(stParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIlJumpContext is an interface to support dynamic dispatch.
type IIlJumpContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLabel returns the label token.
	GetLabel() antlr.Token

	// SetLabel sets the label token.
	SetLabel(antlr.Token)

	// GetOp returns the op rule contexts.
	GetOp() IJump_opContext

	// SetOp sets the op rule contexts.
	SetOp(IJump_opContext)

	// Getter signatures
	Jump_op() IJump_opContext
	IDENTIFIER() antlr.TerminalNode

	// IsIlJumpContext differentiates from other interfaces.
	IsIlJumpContext()
}

type IlJumpContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	op     IJump_opContext
	label  antlr.Token
}

func NewEmptyIlJumpContext() *IlJumpContext {
	var p = new(IlJumpContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_ilJump
	return p
}

func InitEmptyIlJumpContext(p *IlJumpContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_ilJump
}

func (*IlJumpContext) IsIlJumpContext() {}

func NewIlJumpContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IlJumpContext {
	var p = new(IlJumpContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_ilJump

	return p
}

func (s *IlJumpContext) GetParser() antlr.Parser { return s.parser }

func (s *IlJumpContext) GetLabel() antlr.Token { return s.label }

func (s *IlJumpContext) SetLabel(v antlr.Token) { s.label = v }

func (s *IlJumpContext) GetOp() IJump_opContext { return s.op }

func (s *IlJumpContext) SetOp(v IJump_opContext) { s.op = v }

func (s *IlJumpContext) Jump_op() IJump_opContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJump_opContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJump_opContext)
}

func (s *IlJumpContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(stParserIDENTIFIER, 0)
}

func (s *IlJumpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IlJumpContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IlJumpContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterIlJump(s)
	}
}

func (s *IlJumpContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitIlJump(s)
	}
}

func (p *stParser) IlJump() (localctx IIlJumpContext) {
	localctx = NewIlJumpContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, stParserRULE_ilJump)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1160)

		var _x = p.Jump_op()

		localctx.(*IlJumpContext).op = _x
	}
	{
		p.SetState(1161)

		var _m = p.Match(stParserIDENTIFIER)

		localctx.(*IlJumpContext).label = _m
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIlCallContext is an interface to support dynamic dispatch.
type IIlCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op rule contexts.
	GetOp() ICall_opContext

	// SetOp sets the op rule contexts.
	SetOp(ICall_opContext)

	// Getter signatures
	Symbolic_variable() ISymbolic_variableContext
	Call_op() ICall_opContext
	LPAREN() antlr.TerminalNode
	EOL() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	AllIl_param_assignment() []IIl_param_assignmentContext
	Il_param_assignment(i int) IIl_param_assignmentContext
	AllIlOperand() []IIlOperandContext
	IlOperand(i int) IIlOperandContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsIlCallContext differentiates from other interfaces.
	IsIlCallContext()
}

type IlCallContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	op     ICall_opContext
}

func NewEmptyIlCallContext() *IlCallContext {
	var p = new(IlCallContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_ilCall
	return p
}

func InitEmptyIlCallContext(p *IlCallContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_ilCall
}

func (*IlCallContext) IsIlCallContext() {}

func NewIlCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IlCallContext {
	var p = new(IlCallContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_ilCall

	return p
}

func (s *IlCallContext) GetParser() antlr.Parser { return s.parser }

func (s *IlCallContext) GetOp() ICall_opContext { return s.op }

func (s *IlCallContext) SetOp(v ICall_opContext) { s.op = v }

func (s *IlCallContext) Symbolic_variable() ISymbolic_variableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolic_variableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolic_variableContext)
}

func (s *IlCallContext) Call_op() ICall_opContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICall_opContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICall_opContext)
}

func (s *IlCallContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(stParserLPAREN, 0)
}

func (s *IlCallContext) EOL() antlr.TerminalNode {
	return s.GetToken(stParserEOL, 0)
}

func (s *IlCallContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(stParserRPAREN, 0)
}

func (s *IlCallContext) AllIl_param_assignment() []IIl_param_assignmentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIl_param_assignmentContext); ok {
			len++
		}
	}

	tst := make([]IIl_param_assignmentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIl_param_assignmentContext); ok {
			tst[i] = t.(IIl_param_assignmentContext)
			i++
		}
	}

	return tst
}

func (s *IlCallContext) Il_param_assignment(i int) IIl_param_assignmentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIl_param_assignmentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIl_param_assignmentContext)
}

func (s *IlCallContext) AllIlOperand() []IIlOperandContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIlOperandContext); ok {
			len++
		}
	}

	tst := make([]IIlOperandContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIlOperandContext); ok {
			tst[i] = t.(IIlOperandContext)
			i++
		}
	}

	return tst
}

func (s *IlCallContext) IlOperand(i int) IIlOperandContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIlOperandContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIlOperandContext)
}

func (s *IlCallContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(stParserCOMMA)
}

func (s *IlCallContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(stParserCOMMA, i)
}

func (s *IlCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IlCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IlCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterIlCall(s)
	}
}

func (s *IlCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitIlCall(s)
	}
}

func (p *stParser) IlCall() (localctx IIlCallContext) {
	localctx = NewIlCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, stParserRULE_ilCall)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1163)

		var _x = p.Call_op()

		localctx.(*IlCallContext).op = _x
	}
	{
		p.SetState(1164)
		p.Symbolic_variable()
	}
	p.SetState(1188)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case stParserLPAREN:
		{
			p.SetState(1165)
			p.Match(stParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1166)
			p.Match(stParserEOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1175)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == stParserNOT || _la == stParserIDENTIFIER {
			{
				p.SetState(1167)
				p.Il_param_assignment()
			}
			p.SetState(1172)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == stParserCOMMA {
				{
					p.SetState(1168)
					p.Match(stParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1169)
					p.Il_param_assignment()
				}

				p.SetState(1174)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(1177)
			p.Match(stParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case stParserEOF, stParserMINUS, stParserNULL, stParserREF, stParserCAST_LITERAL, stParserSUPER, stParserTHIS, stParserSTEP, stParserEND_STEP, stParserINITIAL_STEP, stParserEND_ACTION, stParserFROM, stParserEND_TRANSITION, stParserTRANSITION, stParserINTEGER_LITERAL, stParserBITS_LITERAL, stParserREAL_LITERAL, stParserTIME_LITERAL, stParserDATE_LITERAL, stParserTOD_LITERAL, stParserDATETIME, stParserSTRING_LITERAL, stParserWSTRING_LITERAL, stParserIDENTIFIER, stParserEOL:
		p.SetState(1186)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64((_la-111)) & ^0x3f) == 0 && ((int64(1)<<(_la-111))&9168452530601197569) != 0) || ((int64((_la-175)) & ^0x3f) == 0 && ((int64(1)<<(_la-175))&7) != 0) {
			{
				p.SetState(1178)
				p.IlOperand()
			}
			p.SetState(1183)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == stParserCOMMA {
				{
					p.SetState(1179)
					p.Match(stParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1180)
					p.IlOperand()
				}

				p.SetState(1185)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}

		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIlOperandContext is an interface to support dynamic dispatch.
type IIlOperandContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Constant() IConstantContext
	Symbolic_variable() ISymbolic_variableContext

	// IsIlOperandContext differentiates from other interfaces.
	IsIlOperandContext()
}

type IlOperandContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIlOperandContext() *IlOperandContext {
	var p = new(IlOperandContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_ilOperand
	return p
}

func InitEmptyIlOperandContext(p *IlOperandContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_ilOperand
}

func (*IlOperandContext) IsIlOperandContext() {}

func NewIlOperandContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IlOperandContext {
	var p = new(IlOperandContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_ilOperand

	return p
}

func (s *IlOperandContext) GetParser() antlr.Parser { return s.parser }

func (s *IlOperandContext) Constant() IConstantContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstantContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *IlOperandContext) Symbolic_variable() ISymbolic_variableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolic_variableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolic_variableContext)
}

func (s *IlOperandContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IlOperandContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IlOperandContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterIlOperand(s)
	}
}

func (s *IlOperandContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitIlOperand(s)
	}
}

func (p *stParser) IlOperand() (localctx IIlOperandContext) {
	localctx = NewIlOperandContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, stParserRULE_ilOperand)
	p.SetState(1192)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case stParserMINUS, stParserNULL, stParserREF, stParserCAST_LITERAL, stParserINTEGER_LITERAL, stParserBITS_LITERAL, stParserREAL_LITERAL, stParserTIME_LITERAL, stParserDATE_LITERAL, stParserTOD_LITERAL, stParserDATETIME, stParserSTRING_LITERAL, stParserWSTRING_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1190)
			p.Constant()
		}

	case stParserSUPER, stParserTHIS, stParserSTEP, stParserEND_STEP, stParserINITIAL_STEP, stParserEND_ACTION, stParserFROM, stParserEND_TRANSITION, stParserTRANSITION, stParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1191)
			p.Symbolic_variable()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IJump_opContext is an interface to support dynamic dispatch.
type IJump_opContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IL_JMP() antlr.TerminalNode
	IL_JMPC() antlr.TerminalNode
	IL_JMPCN() antlr.TerminalNode

	// IsJump_opContext differentiates from other interfaces.
	IsJump_opContext()
}

type Jump_opContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJump_opContext() *Jump_opContext {
	var p = new(Jump_opContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_jump_op
	return p
}

func InitEmptyJump_opContext(p *Jump_opContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_jump_op
}

func (*Jump_opContext) IsJump_opContext() {}

func NewJump_opContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Jump_opContext {
	var p = new(Jump_opContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_jump_op

	return p
}

func (s *Jump_opContext) GetParser() antlr.Parser { return s.parser }

func (s *Jump_opContext) IL_JMP() antlr.TerminalNode {
	return s.GetToken(stParserIL_JMP, 0)
}

func (s *Jump_opContext) IL_JMPC() antlr.TerminalNode {
	return s.GetToken(stParserIL_JMPC, 0)
}

func (s *Jump_opContext) IL_JMPCN() antlr.TerminalNode {
	return s.GetToken(stParserIL_JMPCN, 0)
}

func (s *Jump_opContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Jump_opContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Jump_opContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterJump_op(s)
	}
}

func (s *Jump_opContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitJump_op(s)
	}
}

func (p *stParser) Jump_op() (localctx IJump_opContext) {
	localctx = NewJump_opContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, stParserRULE_jump_op)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1194)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-196)) & ^0x3f) == 0 && ((int64(1)<<(_la-196))&7) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICall_opContext is an interface to support dynamic dispatch.
type ICall_opContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IL_CAL() antlr.TerminalNode
	IL_CALC() antlr.TerminalNode
	IL_CALCN() antlr.TerminalNode

	// IsCall_opContext differentiates from other interfaces.
	IsCall_opContext()
}

type Call_opContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCall_opContext() *Call_opContext {
	var p = new(Call_opContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_call_op
	return p
}

func InitEmptyCall_opContext(p *Call_opContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_call_op
}

func (*Call_opContext) IsCall_opContext() {}

func NewCall_opContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Call_opContext {
	var p = new(Call_opContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_call_op

	return p
}

func (s *Call_opContext) GetParser() antlr.Parser { return s.parser }

func (s *Call_opContext) IL_CAL() antlr.TerminalNode {
	return s.GetToken(stParserIL_CAL, 0)
}

func (s *Call_opContext) IL_CALC() antlr.TerminalNode {
	return s.GetToken(stParserIL_CALC, 0)
}

func (s *Call_opContext) IL_CALCN() antlr.TerminalNode {
	return s.GetToken(stParserIL_CALCN, 0)
}

func (s *Call_opContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Call_opContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Call_opContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterCall_op(s)
	}
}

func (s *Call_opContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitCall_op(s)
	}
}

func (p *stParser) Call_op() (localctx ICall_opContext) {
	localctx = NewCall_opContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, stParserRULE_call_op)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1196)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-185)) & ^0x3f) == 0 && ((int64(1)<<(_la-185))&7) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISimple_opContext is an interface to support dynamic dispatch.
type ISimple_opContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IL_RET() antlr.TerminalNode
	IL_RETC() antlr.TerminalNode
	IL_RETCN() antlr.TerminalNode
	IL_LD() antlr.TerminalNode
	IL_LDN() antlr.TerminalNode
	IL_ST() antlr.TerminalNode
	IL_STN() antlr.TerminalNode
	IL_STQ() antlr.TerminalNode
	IL_NOT() antlr.TerminalNode
	IL_S() antlr.TerminalNode
	IL_R() antlr.TerminalNode
	IL_S1() antlr.TerminalNode
	IL_R1() antlr.TerminalNode
	IL_CLK() antlr.TerminalNode
	IL_CU() antlr.TerminalNode
	IL_CD() antlr.TerminalNode
	IL_PV() antlr.TerminalNode
	IL_IN() antlr.TerminalNode
	IL_PT() antlr.TerminalNode

	// IsSimple_opContext differentiates from other interfaces.
	IsSimple_opContext()
}

type Simple_opContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimple_opContext() *Simple_opContext {
	var p = new(Simple_opContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_simple_op
	return p
}

func InitEmptySimple_opContext(p *Simple_opContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_simple_op
}

func (*Simple_opContext) IsSimple_opContext() {}

func NewSimple_opContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Simple_opContext {
	var p = new(Simple_opContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_simple_op

	return p
}

func (s *Simple_opContext) GetParser() antlr.Parser { return s.parser }

func (s *Simple_opContext) IL_RET() antlr.TerminalNode {
	return s.GetToken(stParserIL_RET, 0)
}

func (s *Simple_opContext) IL_RETC() antlr.TerminalNode {
	return s.GetToken(stParserIL_RETC, 0)
}

func (s *Simple_opContext) IL_RETCN() antlr.TerminalNode {
	return s.GetToken(stParserIL_RETCN, 0)
}

func (s *Simple_opContext) IL_LD() antlr.TerminalNode {
	return s.GetToken(stParserIL_LD, 0)
}

func (s *Simple_opContext) IL_LDN() antlr.TerminalNode {
	return s.GetToken(stParserIL_LDN, 0)
}

func (s *Simple_opContext) IL_ST() antlr.TerminalNode {
	return s.GetToken(stParserIL_ST, 0)
}

func (s *Simple_opContext) IL_STN() antlr.TerminalNode {
	return s.GetToken(stParserIL_STN, 0)
}

func (s *Simple_opContext) IL_STQ() antlr.TerminalNode {
	return s.GetToken(stParserIL_STQ, 0)
}

func (s *Simple_opContext) IL_NOT() antlr.TerminalNode {
	return s.GetToken(stParserIL_NOT, 0)
}

func (s *Simple_opContext) IL_S() antlr.TerminalNode {
	return s.GetToken(stParserIL_S, 0)
}

func (s *Simple_opContext) IL_R() antlr.TerminalNode {
	return s.GetToken(stParserIL_R, 0)
}

func (s *Simple_opContext) IL_S1() antlr.TerminalNode {
	return s.GetToken(stParserIL_S1, 0)
}

func (s *Simple_opContext) IL_R1() antlr.TerminalNode {
	return s.GetToken(stParserIL_R1, 0)
}

func (s *Simple_opContext) IL_CLK() antlr.TerminalNode {
	return s.GetToken(stParserIL_CLK, 0)
}

func (s *Simple_opContext) IL_CU() antlr.TerminalNode {
	return s.GetToken(stParserIL_CU, 0)
}

func (s *Simple_opContext) IL_CD() antlr.TerminalNode {
	return s.GetToken(stParserIL_CD, 0)
}

func (s *Simple_opContext) IL_PV() antlr.TerminalNode {
	return s.GetToken(stParserIL_PV, 0)
}

func (s *Simple_opContext) IL_IN() antlr.TerminalNode {
	return s.GetToken(stParserIL_IN, 0)
}

func (s *Simple_opContext) IL_PT() antlr.TerminalNode {
	return s.GetToken(stParserIL_PT, 0)
}

func (s *Simple_opContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Simple_opContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Simple_opContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterSimple_op(s)
	}
}

func (s *Simple_opContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitSimple_op(s)
	}
}

func (p *stParser) Simple_op() (localctx ISimple_opContext) {
	localctx = NewSimple_opContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, stParserRULE_simple_op)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1198)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-188)) & ^0x3f) == 0 && ((int64(1)<<(_la-188))&4294187143) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExprOperatorContext is an interface to support dynamic dispatch.
type IExprOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AND() antlr.TerminalNode
	OR() antlr.TerminalNode
	XOR() antlr.TerminalNode
	IL_ANDN() antlr.TerminalNode
	IL_ORN() antlr.TerminalNode
	IL_XORN() antlr.TerminalNode
	IL_ADD() antlr.TerminalNode
	IL_SUB() antlr.TerminalNode
	IL_MUL() antlr.TerminalNode
	IL_DIV() antlr.TerminalNode
	MOD() antlr.TerminalNode
	IL_GT() antlr.TerminalNode
	IL_GE() antlr.TerminalNode
	IL_EQ() antlr.TerminalNode
	IL_LT() antlr.TerminalNode
	IL_LE() antlr.TerminalNode
	IL_NE() antlr.TerminalNode

	// IsExprOperatorContext differentiates from other interfaces.
	IsExprOperatorContext()
}

type ExprOperatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprOperatorContext() *ExprOperatorContext {
	var p = new(ExprOperatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_exprOperator
	return p
}

func InitEmptyExprOperatorContext(p *ExprOperatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_exprOperator
}

func (*ExprOperatorContext) IsExprOperatorContext() {}

func NewExprOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprOperatorContext {
	var p = new(ExprOperatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_exprOperator

	return p
}

func (s *ExprOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprOperatorContext) AND() antlr.TerminalNode {
	return s.GetToken(stParserAND, 0)
}

func (s *ExprOperatorContext) OR() antlr.TerminalNode {
	return s.GetToken(stParserOR, 0)
}

func (s *ExprOperatorContext) XOR() antlr.TerminalNode {
	return s.GetToken(stParserXOR, 0)
}

func (s *ExprOperatorContext) IL_ANDN() antlr.TerminalNode {
	return s.GetToken(stParserIL_ANDN, 0)
}

func (s *ExprOperatorContext) IL_ORN() antlr.TerminalNode {
	return s.GetToken(stParserIL_ORN, 0)
}

func (s *ExprOperatorContext) IL_XORN() antlr.TerminalNode {
	return s.GetToken(stParserIL_XORN, 0)
}

func (s *ExprOperatorContext) IL_ADD() antlr.TerminalNode {
	return s.GetToken(stParserIL_ADD, 0)
}

func (s *ExprOperatorContext) IL_SUB() antlr.TerminalNode {
	return s.GetToken(stParserIL_SUB, 0)
}

func (s *ExprOperatorContext) IL_MUL() antlr.TerminalNode {
	return s.GetToken(stParserIL_MUL, 0)
}

func (s *ExprOperatorContext) IL_DIV() antlr.TerminalNode {
	return s.GetToken(stParserIL_DIV, 0)
}

func (s *ExprOperatorContext) MOD() antlr.TerminalNode {
	return s.GetToken(stParserMOD, 0)
}

func (s *ExprOperatorContext) IL_GT() antlr.TerminalNode {
	return s.GetToken(stParserIL_GT, 0)
}

func (s *ExprOperatorContext) IL_GE() antlr.TerminalNode {
	return s.GetToken(stParserIL_GE, 0)
}

func (s *ExprOperatorContext) IL_EQ() antlr.TerminalNode {
	return s.GetToken(stParserIL_EQ, 0)
}

func (s *ExprOperatorContext) IL_LT() antlr.TerminalNode {
	return s.GetToken(stParserIL_LT, 0)
}

func (s *ExprOperatorContext) IL_LE() antlr.TerminalNode {
	return s.GetToken(stParserIL_LE, 0)
}

func (s *ExprOperatorContext) IL_NE() antlr.TerminalNode {
	return s.GetToken(stParserIL_NE, 0)
}

func (s *ExprOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExprOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterExprOperator(s)
	}
}

func (s *ExprOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitExprOperator(s)
	}
}

func (p *stParser) ExprOperator() (localctx IExprOperatorContext) {
	localctx = NewExprOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, stParserRULE_exprOperator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1200)
		_la = p.GetTokenStream().LA(1)

		if !(((int64((_la-97)) & ^0x3f) == 0 && ((int64(1)<<(_la-97))&17334273) != 0) || ((int64((_la-183)) & ^0x3f) == 0 && ((int64(1)<<(_la-183))&412340719363) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIl_param_assignmentContext is an interface to support dynamic dispatch.
type IIl_param_assignmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetId returns the id token.
	GetId() antlr.Token

	// GetTarget returns the target token.
	GetTarget() antlr.Token

	// SetId sets the id token.
	SetId(antlr.Token)

	// SetTarget sets the target token.
	SetTarget(antlr.Token)

	// GetArg returns the arg rule contexts.
	GetArg() IIlOperandContext

	// SetArg sets the arg rule contexts.
	SetArg(IIlOperandContext)

	// Getter signatures
	ARROW_RIGHT() antlr.TerminalNode
	AllIDENTIFIER() []antlr.TerminalNode
	IDENTIFIER(i int) antlr.TerminalNode
	IlOperand() IIlOperandContext
	NOT() antlr.TerminalNode
	ASSIGN() antlr.TerminalNode

	// IsIl_param_assignmentContext differentiates from other interfaces.
	IsIl_param_assignmentContext()
}

type Il_param_assignmentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	id     antlr.Token
	arg    IIlOperandContext
	target antlr.Token
}

func NewEmptyIl_param_assignmentContext() *Il_param_assignmentContext {
	var p = new(Il_param_assignmentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_il_param_assignment
	return p
}

func InitEmptyIl_param_assignmentContext(p *Il_param_assignmentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = stParserRULE_il_param_assignment
}

func (*Il_param_assignmentContext) IsIl_param_assignmentContext() {}

func NewIl_param_assignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Il_param_assignmentContext {
	var p = new(Il_param_assignmentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = stParserRULE_il_param_assignment

	return p
}

func (s *Il_param_assignmentContext) GetParser() antlr.Parser { return s.parser }

func (s *Il_param_assignmentContext) GetId() antlr.Token { return s.id }

func (s *Il_param_assignmentContext) GetTarget() antlr.Token { return s.target }

func (s *Il_param_assignmentContext) SetId(v antlr.Token) { s.id = v }

func (s *Il_param_assignmentContext) SetTarget(v antlr.Token) { s.target = v }

func (s *Il_param_assignmentContext) GetArg() IIlOperandContext { return s.arg }

func (s *Il_param_assignmentContext) SetArg(v IIlOperandContext) { s.arg = v }

func (s *Il_param_assignmentContext) ARROW_RIGHT() antlr.TerminalNode {
	return s.GetToken(stParserARROW_RIGHT, 0)
}

func (s *Il_param_assignmentContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(stParserIDENTIFIER)
}

func (s *Il_param_assignmentContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(stParserIDENTIFIER, i)
}

func (s *Il_param_assignmentContext) IlOperand() IIlOperandContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIlOperandContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIlOperandContext)
}

func (s *Il_param_assignmentContext) NOT() antlr.TerminalNode {
	return s.GetToken(stParserNOT, 0)
}

func (s *Il_param_assignmentContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(stParserASSIGN, 0)
}

func (s *Il_param_assignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Il_param_assignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Il_param_assignmentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.EnterIl_param_assignment(s)
	}
}

func (s *Il_param_assignmentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(stParserListener); ok {
		listenerT.ExitIl_param_assignment(s)
	}
}

func (p *stParser) Il_param_assignment() (localctx IIl_param_assignmentContext) {
	localctx = NewIl_param_assignmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, stParserRULE_il_param_assignment)
	var _la int

	p.SetState(1213)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 130, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1203)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == stParserNOT {
			{
				p.SetState(1202)
				p.Match(stParserNOT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(1205)

			var _m = p.Match(stParserIDENTIFIER)

			localctx.(*Il_param_assignmentContext).id = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1206)
			p.Match(stParserARROW_RIGHT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1207)

			var _x = p.IlOperand()

			localctx.(*Il_param_assignmentContext).arg = _x
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1210)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 129, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1208)

				var _m = p.Match(stParserIDENTIFIER)

				localctx.(*Il_param_assignmentContext).id = _m
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1209)
				p.Match(stParserASSIGN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(1212)

			var _m = p.Match(stParserIDENTIFIER)

			localctx.(*Il_param_assignmentContext).target = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

func (p *stParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 63:
		var t *ExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionContext)
		}
		return p.Expression_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *stParser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 10)

	case 1:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
